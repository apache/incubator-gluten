== Physical Plan ==
AdaptiveSparkPlan (103)
+- == Final Plan ==
   VeloxColumnarToRowExec (66)
   +- ^ SortExecTransformer (64)
      +- ^ InputIteratorTransformer (63)
         +- AQEShuffleRead (62)
            +- ShuffleQueryStage (61), Statistics(X)
               +- ColumnarExchange (60)
                  +- ^ ProjectExecTransformer (58)
                     +- ^ GlutenBroadcastHashJoinExecTransformer Inner (57)
                        :- ^ ProjectExecTransformer (49)
                        :  +- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (48)
                        :     :- ^ InputIteratorTransformer (8)
                        :     :  +- AQEShuffleRead (7)
                        :     :     +- ShuffleQueryStage (6), Statistics(X)
                        :     :        +- ColumnarExchange (5)
                        :     :           +- ^ ProjectExecTransformer (3)
                        :     :              +- ^ FilterExecTransformer (2)
                        :     :                 +- ^ Scan parquet default.supplier (1)
                        :     +- ^ InputIteratorTransformer (47)
                        :        +- BroadcastQueryStage (46), Statistics(X)
                        :           +- ColumnarBroadcastExchange (45)
                        :              +- AQEShuffleRead (44)
                        :                 +- ShuffleQueryStage (43), Statistics(X)
                        :                    +- ColumnarExchange (42)
                        :                       +- ^ ProjectExecTransformer (40)
                        :                          +- ^ GlutenBroadcastHashJoinExecTransformer Inner (39)
                        :                             :- ^ InputIteratorTransformer (22)
                        :                             :  +- BroadcastQueryStage (21), Statistics(X)
                        :                             :     +- ColumnarBroadcastExchange (20)
                        :                             :        +- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (18)
                        :                             :           :- ^ FilterExecTransformer (10)
                        :                             :           :  +- ^ Scan parquet default.partsupp (9)
                        :                             :           +- ^ InputIteratorTransformer (17)
                        :                             :              +- BroadcastQueryStage (16), Statistics(X)
                        :                             :                 +- ColumnarBroadcastExchange (15)
                        :                             :                    +- ^ ProjectExecTransformer (13)
                        :                             :                       +- ^ FilterExecTransformer (12)
                        :                             :                          +- ^ Scan parquet default.part (11)
                        :                             +- ^ FilterExecTransformer (38)
                        :                                +- ^ RegularHashAggregateExecTransformer (37)
                        :                                   +- ^ InputIteratorTransformer (36)
                        :                                      +- AQEShuffleRead (35)
                        :                                         +- ShuffleQueryStage (34), Statistics(X)
                        :                                            +- ColumnarExchange (33)
                        :                                               +- ^ ProjectExecTransformer (31)
                        :                                                  +- ^ FlushableHashAggregateExecTransformer (30)
                        :                                                     +- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (29)
                        :                                                        :- ^ ProjectExecTransformer (25)
                        :                                                        :  +- ^ FilterExecTransformer (24)
                        :                                                        :     +- ^ Scan parquet default.lineitem (23)
                        :                                                        +- ^ InputIteratorTransformer (28)
                        :                                                           +- BroadcastQueryStage (27), Statistics(X)
                        :                                                              +- ReusedExchange (26)
                        +- ^ InputIteratorTransformer (56)
                           +- BroadcastQueryStage (55), Statistics(X)
                              +- ColumnarBroadcastExchange (54)
                                 +- ^ ProjectExecTransformer (52)
                                    +- ^ FilterExecTransformer (51)
                                       +- ^ Scan parquet default.nation (50)
+- == Initial Plan ==
   Sort (102)
   +- Exchange (101)
      +- Project (100)
         +- BroadcastHashJoin Inner BuildRight (99)
            :- Project (94)
            :  +- ShuffledHashJoin LeftSemi BuildRight (93)
            :     :- Exchange (69)
            :     :  +- Filter (68)
            :     :     +- Scan parquet default.supplier (67)
            :     +- Exchange (92)
            :        +- Project (91)
            :           +- BroadcastHashJoin Inner BuildLeft (90)
            :              :- BroadcastExchange (77)
            :              :  +- BroadcastHashJoin LeftSemi BuildRight (76)
            :              :     :- Filter (71)
            :              :     :  +- Scan parquet default.partsupp (70)
            :              :     +- BroadcastExchange (75)
            :              :        +- Project (74)
            :              :           +- Filter (73)
            :              :              +- Scan parquet default.part (72)
            :              +- Filter (89)
            :                 +- HashAggregate (88)
            :                    +- Exchange (87)
            :                       +- HashAggregate (86)
            :                          +- BroadcastHashJoin LeftSemi BuildRight (85)
            :                             :- Project (80)
            :                             :  +- Filter (79)
            :                             :     +- Scan parquet default.lineitem (78)
            :                             +- BroadcastExchange (84)
            :                                +- Project (83)
            :                                   +- Filter (82)
            :                                      +- Scan parquet default.part (81)
            +- BroadcastExchange (98)
               +- Project (97)
                  +- Filter (96)
                     +- Scan parquet default.nation (95)


(1) Scan parquet default.supplier
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: (isnotnull(s_nationkey#X) AND might_contain(Subquery subquery#X, [id=#X], xxhash64(s_nationkey#X, 42)))

(3) ProjectExecTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(4) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: false

(5) ColumnarExchange
Input [5]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 100), ENSURE_REQUIREMENTS, [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: 0

(7) AQEShuffleRead
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: local

(8) InputIteratorTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(9) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>

(10) FilterExecTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: ((isnotnull(ps_availqty#X) AND isnotnull(ps_partkey#X)) AND isnotnull(ps_suppkey#X))

(11) Scan parquet default.part
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,forest)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(12) FilterExecTransformer
Input [2]: [p_partkey#X, p_name#X]
Arguments: (isnotnull(p_name#X) AND StartsWith(p_name#X, forest))

(13) ProjectExecTransformer
Input [2]: [p_partkey#X, p_name#X]
Arguments: [p_partkey#X]

(14) WholeStageCodegenTransformer (X)
Input [1]: [p_partkey#X]
Arguments: false

(15) ColumnarBroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(16) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 1

(17) InputIteratorTransformer
Input [1]: [p_partkey#X]

(18) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(19) WholeStageCodegenTransformer (X)
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: false

(20) ColumnarBroadcastExchange
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [plan_id=X]

(21) BroadcastQueryStage
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: 5

(22) InputIteratorTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]

(23) Scan parquet default.lineitem
Output [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1994-01-01), LessThan(l_shipdate,1995-01-01), IsNotNull(l_partkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_shipdate:date>

(24) FilterExecTransformer
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Arguments: ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1994-01-01)) AND (l_shipdate#X < 1995-01-01)) AND isnotnull(l_partkey#X)) AND isnotnull(l_suppkey#X))

(25) ProjectExecTransformer
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Arguments: [l_partkey#X, l_suppkey#X, l_quantity#X]

(26) ReusedExchange [Reuses operator id: 15]
Output [1]: [p_partkey#X]

(27) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 3

(28) InputIteratorTransformer
Input [1]: [p_partkey#X]

(29) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(30) FlushableHashAggregateExecTransformer
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(31) ProjectExecTransformer
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: [hash(l_partkey#X, l_suppkey#X, 42) AS hash_partition_key#X, l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(32) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: false

(33) ColumnarExchange
Input [5]: [hash_partition_key#X, l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_partkey#X, l_suppkey#X, 100), ENSURE_REQUIREMENTS, [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(34) ShuffleQueryStage
Output [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: 6

(35) AQEShuffleRead
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: coalesced

(36) InputIteratorTransformer
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(37) RegularHashAggregateExecTransformer
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [3]: [CheckOverflow((0.50 * promote_precision(sum(l_quantity#X)#X)), DecimalType(24,3)) AS (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(38) FilterExecTransformer
Input [3]: [(0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]
Arguments: isnotnull((0.5 * sum(l_quantity))#X)

(39) GlutenBroadcastHashJoinExecTransformer
Left keys [2]: [ps_partkey#X, ps_suppkey#X]
Right keys [2]: [l_partkey#X, l_suppkey#X]
Join condition: (cast(ps_availqty#X as decimal(24,3)) > (0.5 * sum(l_quantity))#X)

(40) ProjectExecTransformer
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]
Arguments: [hash(ps_suppkey#X, 42) AS hash_partition_key#X, ps_suppkey#X]

(41) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, ps_suppkey#X]
Arguments: false

(42) ColumnarExchange
Input [2]: [hash_partition_key#X, ps_suppkey#X]
Arguments: hashpartitioning(ps_suppkey#X, 100), ENSURE_REQUIREMENTS, [ps_suppkey#X], [plan_id=X], [id=#X]

(43) ShuffleQueryStage
Output [1]: [ps_suppkey#X]
Arguments: 7

(44) AQEShuffleRead
Input [1]: [ps_suppkey#X]
Arguments: local

(45) ColumnarBroadcastExchange
Input [1]: [ps_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(46) BroadcastQueryStage
Output [1]: [ps_suppkey#X]
Arguments: 8

(47) InputIteratorTransformer
Input [1]: [ps_suppkey#X]

(48) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [ps_suppkey#X]
Join condition: None

(49) ProjectExecTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: [s_name#X, s_address#X, s_nationkey#X]

(50) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,CANADA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(51) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = CANADA)) AND isnotnull(n_nationkey#X))

(52) ProjectExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: [n_nationkey#X]

(53) WholeStageCodegenTransformer (X)
Input [1]: [n_nationkey#X]
Arguments: false

(54) ColumnarBroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(55) BroadcastQueryStage
Output [1]: [n_nationkey#X]
Arguments: 4

(56) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(57) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(58) ProjectExecTransformer
Input [4]: [s_name#X, s_address#X, s_nationkey#X, n_nationkey#X]
Arguments: [s_name#X, s_address#X]

(59) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, s_address#X]
Arguments: false

(60) ColumnarExchange
Input [2]: [s_name#X, s_address#X]
Arguments: rangepartitioning(s_name#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(61) ShuffleQueryStage
Output [2]: [s_name#X, s_address#X]
Arguments: 9

(62) AQEShuffleRead
Input [2]: [s_name#X, s_address#X]
Arguments: coalesced

(63) InputIteratorTransformer
Input [2]: [s_name#X, s_address#X]

(64) SortExecTransformer
Input [2]: [s_name#X, s_address#X]
Arguments: [s_name#X ASC NULLS FIRST], true, 0

(65) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, s_address#X]
Arguments: false

(66) VeloxColumnarToRowExec
Input [2]: [s_name#X, s_address#X]

(67) Scan parquet default.supplier
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint>

(68) Filter
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Condition : (isnotnull(s_nationkey#X) AND might_contain(Subquery subquery#X, [id=#X], xxhash64(s_nationkey#X, 42)))

(69) Exchange
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(70) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>

(71) Filter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Condition : ((isnotnull(ps_availqty#X) AND isnotnull(ps_partkey#X)) AND isnotnull(ps_suppkey#X))

(72) Scan parquet default.part
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,forest)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(73) Filter
Input [2]: [p_partkey#X, p_name#X]
Condition : (isnotnull(p_name#X) AND StartsWith(p_name#X, forest))

(74) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(75) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(76) BroadcastHashJoin
Left keys [1]: [ps_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(77) BroadcastExchange
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [plan_id=X]

(78) Scan parquet default.lineitem
Output [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1994-01-01), LessThan(l_shipdate,1995-01-01), IsNotNull(l_partkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_shipdate:date>

(79) Filter
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Condition : ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1994-01-01)) AND (l_shipdate#X < 1995-01-01)) AND isnotnull(l_partkey#X)) AND isnotnull(l_suppkey#X))

(80) Project
Output [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]

(81) Scan parquet default.part
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,forest)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(82) Filter
Input [2]: [p_partkey#X, p_name#X]
Condition : (isnotnull(p_name#X) AND StartsWith(p_name#X, forest))

(83) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(84) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(85) BroadcastHashJoin
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(86) HashAggregate
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(87) Exchange
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_partkey#X, l_suppkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(88) HashAggregate
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [3]: [CheckOverflow((0.50 * promote_precision(sum(l_quantity#X)#X)), DecimalType(24,3)) AS (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(89) Filter
Input [3]: [(0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]
Condition : isnotnull((0.5 * sum(l_quantity))#X)

(90) BroadcastHashJoin
Left keys [2]: [ps_partkey#X, ps_suppkey#X]
Right keys [2]: [l_partkey#X, l_suppkey#X]
Join condition: (cast(ps_availqty#X as decimal(24,3)) > (0.5 * sum(l_quantity))#X)

(91) Project
Output [1]: [ps_suppkey#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(92) Exchange
Input [1]: [ps_suppkey#X]
Arguments: hashpartitioning(ps_suppkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(93) ShuffledHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [ps_suppkey#X]
Join condition: None

(94) Project
Output [3]: [s_name#X, s_address#X, s_nationkey#X]
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(95) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,CANADA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(96) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = CANADA)) AND isnotnull(n_nationkey#X))

(97) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(98) BroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(99) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(100) Project
Output [2]: [s_name#X, s_address#X]
Input [4]: [s_name#X, s_address#X, s_nationkey#X, n_nationkey#X]

(101) Exchange
Input [2]: [s_name#X, s_address#X]
Arguments: rangepartitioning(s_name#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(102) Sort
Input [2]: [s_name#X, s_address#X]
Arguments: [s_name#X ASC NULLS FIRST], true, 0

(103) AdaptiveSparkPlan
Output [2]: [s_name#X, s_address#X]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (121)
+- == Final Plan ==
   VeloxColumnarToRowExec (114)
   +- ^ RegularHashAggregateExecTransformer (112)
      +- ^ InputIteratorTransformer (111)
         +- ShuffleQueryStage (110), Statistics(X)
            +- ColumnarExchange (109)
               +- ^ FlushableHashAggregateExecTransformer (107)
                  +- ^ ProjectExecTransformer (106)
                     +- ^ FilterExecTransformer (105)
                        +- ^ Scan parquet default.nation (104)
+- == Initial Plan ==
   ObjectHashAggregate (120)
   +- Exchange (119)
      +- ObjectHashAggregate (118)
         +- Project (117)
            +- Filter (116)
               +- Scan parquet default.nation (115)


(104) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,CANADA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(105) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = CANADA)) AND isnotnull(n_nationkey#X))

(106) ProjectExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: [n_nationkey#X]

(107) FlushableHashAggregateExecTransformer
Input [1]: [n_nationkey#X]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(n_nationkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#X]
Results [1]: [buf#X]

(108) WholeStageCodegenTransformer (X)
Input [1]: [buf#X]
Arguments: false

(109) ColumnarExchange
Input [1]: [buf#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(110) ShuffleQueryStage
Output [1]: [buf#X]
Arguments: 0

(111) InputIteratorTransformer
Input [1]: [buf#X]

(112) RegularHashAggregateExecTransformer
Input [1]: [buf#X]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(n_nationkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(n_nationkey#X, 42), 1000000, 8388608, 0, 0)#X]
Results [1]: [bloom_filter_agg(xxhash64(n_nationkey#X, 42), 1000000, 8388608, 0, 0)#X AS bloomFilter#X]

(113) WholeStageCodegenTransformer (X)
Input [1]: [bloomFilter#X]
Arguments: false

(114) VeloxColumnarToRowExec
Input [1]: [bloomFilter#X]

(115) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,CANADA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(116) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = CANADA)) AND isnotnull(n_nationkey#X))

(117) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(118) ObjectHashAggregate
Input [1]: [n_nationkey#X]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(n_nationkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#X]
Results [1]: [buf#X]

(119) Exchange
Input [1]: [buf#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X]

(120) ObjectHashAggregate
Input [1]: [buf#X]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(n_nationkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(n_nationkey#X, 42), 1000000, 8388608, 0, 0)#X]
Results [1]: [bloom_filter_agg(xxhash64(n_nationkey#X, 42), 1000000, 8388608, 0, 0)#X AS bloomFilter#X]

(121) AdaptiveSparkPlan
Output [1]: [bloomFilter#X]
Arguments: isFinalPlan=true

Subquery:2 Hosting operator id = 1 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (121)
+- == Final Plan ==
   VeloxColumnarToRowExec (114)
   +- ^ RegularHashAggregateExecTransformer (112)
      +- ^ InputIteratorTransformer (111)
         +- ShuffleQueryStage (110), Statistics(X)
            +- ColumnarExchange (109)
               +- ^ FlushableHashAggregateExecTransformer (107)
                  +- ^ ProjectExecTransformer (106)
                     +- ^ FilterExecTransformer (105)
                        +- ^ Scan parquet default.nation (104)
+- == Initial Plan ==
   ObjectHashAggregate (120)
   +- Exchange (119)
      +- ObjectHashAggregate (118)
         +- Project (117)
            +- Filter (116)
               +- Scan parquet default.nation (115)
