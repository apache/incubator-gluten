== Physical Plan ==
AdaptiveSparkPlan (87)
+- == Final Plan ==
   VeloxColumnarToRowExec (54)
   +- TakeOrderedAndProjectExecTransformer (53)
      +- ^ RegularHashAggregateExecTransformer (51)
         +- ^ InputIteratorTransformer (50)
            +- AQEShuffleRead (49)
               +- ShuffleQueryStage (48), Statistics(X)
                  +- ColumnarExchange (47)
                     +- ^ ProjectExecTransformer (45)
                        +- ^ FlushableHashAggregateExecTransformer (44)
                           +- ^ ProjectExecTransformer (43)
                              +- ^ GlutenBroadcastHashJoinExecTransformer Inner (42)
                                 :- ^ ProjectExecTransformer (34)
                                 :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (33)
                                 :     :- ^ ProjectExecTransformer (25)
                                 :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (24)
                                 :     :     :- ^ InputIteratorTransformer (6)
                                 :     :     :  +- BroadcastQueryStage (5), Statistics(X)
                                 :     :     :     +- ColumnarBroadcastExchange (4)
                                 :     :     :        +- ^ FilterExecTransformer (2)
                                 :     :     :           +- ^ Scan parquet default.supplier (1)
                                 :     :     +- ^ GlutenBroadcastHashJoinExecTransformer LeftAnti (23)
                                 :     :        :- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (15)
                                 :     :        :  :- ^ ProjectExecTransformer (9)
                                 :     :        :  :  +- ^ FilterExecTransformer (8)
                                 :     :        :  :     +- ^ Scan parquet default.lineitem (7)
                                 :     :        :  +- ^ InputIteratorTransformer (14)
                                 :     :        :     +- BroadcastQueryStage (13), Statistics(X)
                                 :     :        :        +- ColumnarBroadcastExchange (12)
                                 :     :        :           +- ^ Scan parquet default.lineitem (10)
                                 :     :        +- ^ InputIteratorTransformer (22)
                                 :     :           +- BroadcastQueryStage (21), Statistics(X)
                                 :     :              +- ColumnarBroadcastExchange (20)
                                 :     :                 +- ^ ProjectExecTransformer (18)
                                 :     :                    +- ^ FilterExecTransformer (17)
                                 :     :                       +- ^ Scan parquet default.lineitem (16)
                                 :     +- ^ InputIteratorTransformer (32)
                                 :        +- BroadcastQueryStage (31), Statistics(X)
                                 :           +- ColumnarBroadcastExchange (30)
                                 :              +- ^ ProjectExecTransformer (28)
                                 :                 +- ^ FilterExecTransformer (27)
                                 :                    +- ^ Scan parquet default.orders (26)
                                 +- ^ InputIteratorTransformer (41)
                                    +- BroadcastQueryStage (40), Statistics(X)
                                       +- ColumnarBroadcastExchange (39)
                                          +- ^ ProjectExecTransformer (37)
                                             +- ^ FilterExecTransformer (36)
                                                +- ^ Scan parquet default.nation (35)
+- == Initial Plan ==
   TakeOrderedAndProject (86)
   +- HashAggregate (85)
      +- Exchange (84)
         +- HashAggregate (83)
            +- Project (82)
               +- BroadcastHashJoin Inner BuildRight (81)
                  :- Project (76)
                  :  +- BroadcastHashJoin Inner BuildRight (75)
                  :     :- Project (70)
                  :     :  +- BroadcastHashJoin Inner BuildLeft (69)
                  :     :     :- BroadcastExchange (57)
                  :     :     :  +- Filter (56)
                  :     :     :     +- Scan parquet default.supplier (55)
                  :     :     +- BroadcastHashJoin LeftAnti BuildRight (68)
                  :     :        :- BroadcastHashJoin LeftSemi BuildRight (63)
                  :     :        :  :- Project (60)
                  :     :        :  :  +- Filter (59)
                  :     :        :  :     +- Scan parquet default.lineitem (58)
                  :     :        :  +- BroadcastExchange (62)
                  :     :        :     +- Scan parquet default.lineitem (61)
                  :     :        +- BroadcastExchange (67)
                  :     :           +- Project (66)
                  :     :              +- Filter (65)
                  :     :                 +- Scan parquet default.lineitem (64)
                  :     +- BroadcastExchange (74)
                  :        +- Project (73)
                  :           +- Filter (72)
                  :              +- Scan parquet default.orders (71)
                  +- BroadcastExchange (80)
                     +- Project (79)
                        +- Filter (78)
                           +- Scan parquet default.nation (77)


(1) Scan parquet default.supplier
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(3) WholeStageCodegenTransformer (X)
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(s_nationkey, Filter(IsNotNull, deterministic, null not allowed)), (s_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:VARCHAR, n0_2:BIGINT

(4) ColumnarBroadcastExchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(5) BroadcastQueryStage
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: 0

(6) InputIteratorTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(7) Scan parquet default.lineitem
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(8) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(9) ProjectExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: [l_orderkey#X, l_suppkey#X]

(10) Scan parquet default.lineitem
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(11) WholeStageCodegenTransformer (X)
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table] -> n0_0:BIGINT, n0_1:BIGINT

(12) ColumnarBroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(13) BroadcastQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: 1

(14) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(15) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(16) Scan parquet default.lineitem
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(17) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(18) ProjectExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: [l_orderkey#X, l_suppkey#X]

(19) WholeStageCodegenTransformer (X)
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: false
Native Plan:
-- Project[expressions: (n1_4:BIGINT, "n0_0"), (n1_5:BIGINT, "n0_1")] -> n1_4:BIGINT, n1_5:BIGINT
  -- TableScan[table: hive_table, range filters: [(l_commitdate, Filter(IsNotNull, deterministic, null not allowed)), (l_receiptdate, Filter(IsNotNull, deterministic, null not allowed))], remaining filter: (greaterthan("l_receiptdate","l_commitdate"))] -> n0_0:BIGINT, n0_1:BIGINT, n0_2:DATE, n0_3:DATE

(20) ColumnarBroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(21) BroadcastQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: 2

(22) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(23) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(24) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(25) ProjectExecTransformer
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]
Arguments: [s_name#X, s_nationkey#X, l_orderkey#X]

(26) Scan parquet default.orders
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(27) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderstatus#X]
Arguments: ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(28) ProjectExecTransformer
Input [2]: [o_orderkey#X, o_orderstatus#X]
Arguments: [o_orderkey#X]

(29) WholeStageCodegenTransformer (X)
Input [1]: [o_orderkey#X]
Arguments: false
Native Plan:
-- Project[expressions: (n1_2:BIGINT, "n0_0")] -> n1_2:BIGINT
  -- TableScan[table: hive_table, range filters: [(o_orderkey, Filter(IsNotNull, deterministic, null not allowed)), (o_orderstatus, BytesRange: [F, F] no nulls)]] -> n0_0:BIGINT, n0_1:VARCHAR

(30) ColumnarBroadcastExchange
Input [1]: [o_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(31) BroadcastQueryStage
Output [1]: [o_orderkey#X]
Arguments: 3

(32) InputIteratorTransformer
Input [1]: [o_orderkey#X]

(33) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(34) ProjectExecTransformer
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]
Arguments: [s_name#X, s_nationkey#X]

(35) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(36) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(37) ProjectExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: [n_nationkey#X]

(38) WholeStageCodegenTransformer (X)
Input [1]: [n_nationkey#X]
Arguments: false
Native Plan:
-- Project[expressions: (n1_2:BIGINT, "n0_0")] -> n1_2:BIGINT
  -- TableScan[table: hive_table, range filters: [(n_name, BytesRange: [SAUDI ARABIA, SAUDI ARABIA] no nulls), (n_nationkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:VARCHAR

(39) ColumnarBroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(40) BroadcastQueryStage
Output [1]: [n_nationkey#X]
Arguments: 4

(41) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(42) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(43) ProjectExecTransformer
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]
Arguments: [s_name#X]

(44) FlushableHashAggregateExecTransformer
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(45) ProjectExecTransformer
Input [2]: [s_name#X, count#X]
Arguments: [hash(s_name#X, 42) AS hash_partition_key#X, s_name#X, count#X]

(46) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: false
Native Plan:
-- Project[expressions: (n21_2:INTEGER, hash_with_seed(42,"n19_3")), (n21_3:VARCHAR, "n19_3"), (n21_4:BIGINT, "n20_1")] -> n21_2:INTEGER, n21_3:VARCHAR, n21_4:BIGINT
  -- Aggregation[PARTIAL [n19_3] n20_1 := count_partial(1)] -> n19_3:VARCHAR, n20_1:BIGINT
    -- Project[expressions: (n19_3:VARCHAR, "n18_3")] -> n19_3:VARCHAR
      -- Project[expressions: (n18_3:VARCHAR, "n16_4"), (n18_4:BIGINT, "n16_5"), (n18_5:BIGINT, "n4_0")] -> n18_3:VARCHAR, n18_4:BIGINT, n18_5:BIGINT
        -- HashJoin[INNER n16_5=n4_0] -> n16_4:VARCHAR, n16_5:BIGINT, n4_0:BIGINT
          -- Project[expressions: (n16_4:VARCHAR, "n15_4"), (n16_5:BIGINT, "n15_5")] -> n16_4:VARCHAR, n16_5:BIGINT
            -- Project[expressions: (n15_4:VARCHAR, "n13_5"), (n15_5:BIGINT, "n13_6"), (n15_6:BIGINT, "n13_7"), (n15_7:BIGINT, "n3_0")] -> n15_4:VARCHAR, n15_5:BIGINT, n15_6:BIGINT, n15_7:BIGINT
              -- HashJoin[INNER n13_7=n3_0] -> n13_5:VARCHAR, n13_6:BIGINT, n13_7:BIGINT, n3_0:BIGINT
                -- Project[expressions: (n13_5:VARCHAR, "n12_6"), (n13_6:BIGINT, "n12_7"), (n13_7:BIGINT, "n12_8")] -> n13_5:VARCHAR, n13_6:BIGINT, n13_7:BIGINT
                  -- Project[expressions: (n12_5:BIGINT, "n2_0"), (n12_6:VARCHAR, "n2_1"), (n12_7:BIGINT, "n2_2"), (n12_8:BIGINT, "n10_2"), (n12_9:BIGINT, "n10_3")] -> n12_5:BIGINT, n12_6:VARCHAR, n12_7:BIGINT, n12_8:BIGINT, n12_9:BIGINT
                    -- HashJoin[INNER n10_3=n2_0] -> n10_2:BIGINT, n10_3:BIGINT, n2_0:BIGINT, n2_1:VARCHAR, n2_2:BIGINT
                      -- Project[expressions: (n10_2:BIGINT, "n8_2"), (n10_3:BIGINT, "n8_3")] -> n10_2:BIGINT, n10_3:BIGINT
                        -- HashJoin[ANTI n8_2=n1_0, filter: not(equalto("n1_1","n8_3"))] -> n8_2:BIGINT, n8_3:BIGINT
                          -- Project[expressions: (n8_2:BIGINT, "n6_4"), (n8_3:BIGINT, "n6_5")] -> n8_2:BIGINT, n8_3:BIGINT
                            -- HashJoin[LEFT SEMI (FILTER) n6_4=n0_0, filter: not(equalto("n0_1","n6_5"))] -> n6_4:BIGINT, n6_5:BIGINT
                              -- Project[expressions: (n6_4:BIGINT, "n5_0"), (n6_5:BIGINT, "n5_1")] -> n6_4:BIGINT, n6_5:BIGINT
                                -- TableScan[table: hive_table, range filters: [(l_commitdate, Filter(IsNotNull, deterministic, null not allowed)), (l_orderkey, Filter(IsNotNull, deterministic, null not allowed)), (l_receiptdate, Filter(IsNotNull, deterministic, null not allowed)), (l_suppkey, Filter(IsNotNull, deterministic, null not allowed))], remaining filter: (greaterthan("l_receiptdate","l_commitdate"))] -> n5_0:BIGINT, n5_1:BIGINT, n5_2:DATE, n5_3:DATE
                              -- ValueStream[] -> n0_0:BIGINT, n0_1:BIGINT
                          -- ValueStream[] -> n1_0:BIGINT, n1_1:BIGINT
                      -- ValueStream[] -> n2_0:BIGINT, n2_1:VARCHAR, n2_2:BIGINT
                -- ValueStream[] -> n3_0:BIGINT
          -- ValueStream[] -> n4_0:BIGINT

(47) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 100), ENSURE_REQUIREMENTS, [s_name#X, count#X], [plan_id=X], [id=#X]

(48) ShuffleQueryStage
Output [2]: [s_name#X, count#X]
Arguments: 5

(49) AQEShuffleRead
Input [2]: [s_name#X, count#X]
Arguments: coalesced

(50) InputIteratorTransformer
Input [2]: [s_name#X, count#X]

(51) RegularHashAggregateExecTransformer
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(52) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, numwait#X]
Arguments: false
Native Plan:
-- Project[expressions: (n2_2:VARCHAR, "n0_0"), (n2_3:BIGINT, "n1_1")] -> n2_2:VARCHAR, n2_3:BIGINT
  -- Aggregation[SINGLE [n0_0] n1_1 := count_merge_extract("n0_1")] -> n0_0:VARCHAR, n1_1:BIGINT
    -- ValueStream[] -> n0_0:VARCHAR, n0_1:BIGINT

(53) TakeOrderedAndProjectExecTransformer
Input [2]: [s_name#X, numwait#X]
Arguments: 100, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X]

(54) VeloxColumnarToRowExec
Input [2]: [s_name#X, numwait#X]

(55) Scan parquet default.supplier
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(56) Filter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(57) BroadcastExchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(58) Scan parquet default.lineitem
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(59) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(60) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(61) Scan parquet default.lineitem
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(62) BroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(63) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(64) Scan parquet default.lineitem
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(65) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(66) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(67) BroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(68) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(69) BroadcastHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(70) Project
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(71) Scan parquet default.orders
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(72) Filter
Input [2]: [o_orderkey#X, o_orderstatus#X]
Condition : ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(73) Project
Output [1]: [o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(74) BroadcastExchange
Input [1]: [o_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(75) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(76) Project
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(77) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(78) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(79) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(80) BroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(81) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(82) Project
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(83) HashAggregate
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(84) Exchange
Input [2]: [s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(85) HashAggregate
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(86) TakeOrderedAndProject
Input [2]: [s_name#X, numwait#X]
Arguments: 100, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X]

(87) AdaptiveSparkPlan
Output [2]: [s_name#X, numwait#X]
Arguments: isFinalPlan=true
