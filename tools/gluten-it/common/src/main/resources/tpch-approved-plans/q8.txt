== Physical Plan ==
AdaptiveSparkPlan (121)
+- == Final Plan ==
   VeloxColumnarToRowExec (76)
   +- ^ SortExecTransformer (74)
      +- ^ InputIteratorTransformer (73)
         +- AQEShuffleRead (72)
            +- ShuffleQueryStage (71), Statistics(X)
               +- ColumnarExchange (70)
                  +- ^ RegularHashAggregateExecTransformer (68)
                     +- ^ InputIteratorTransformer (67)
                        +- AQEShuffleRead (66)
                           +- ShuffleQueryStage (65), Statistics(X)
                              +- ColumnarExchange (64)
                                 +- ^ ProjectExecTransformer (62)
                                    +- ^ FlushableHashAggregateExecTransformer (61)
                                       +- ^ ProjectExecTransformer (60)
                                          +- ^ GlutenBroadcastHashJoinExecTransformer Inner (59)
                                             :- ^ ProjectExecTransformer (51)
                                             :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (50)
                                             :     :- ^ ProjectExecTransformer (43)
                                             :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (42)
                                             :     :     :- ^ ProjectExecTransformer (35)
                                             :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (34)
                                             :     :     :     :- ^ ProjectExecTransformer (27)
                                             :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (26)
                                             :     :     :     :     :- ^ ProjectExecTransformer (19)
                                             :     :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (18)
                                             :     :     :     :     :     :- ^ ProjectExecTransformer (11)
                                             :     :     :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (10)
                                             :     :     :     :     :     :     :- ^ InputIteratorTransformer (7)
                                             :     :     :     :     :     :     :  +- BroadcastQueryStage (6), Statistics(X)
                                             :     :     :     :     :     :     :     +- ColumnarBroadcastExchange (5)
                                             :     :     :     :     :     :     :        +- ^ ProjectExecTransformer (3)
                                             :     :     :     :     :     :     :           +- ^ FilterExecTransformer (2)
                                             :     :     :     :     :     :     :              +- ^ Scan parquet default.part (1)
                                             :     :     :     :     :     :     +- ^ FilterExecTransformer (9)
                                             :     :     :     :     :     :        +- ^ Scan parquet default.lineitem (8)
                                             :     :     :     :     :     +- ^ InputIteratorTransformer (17)
                                             :     :     :     :     :        +- BroadcastQueryStage (16), Statistics(X)
                                             :     :     :     :     :           +- ColumnarBroadcastExchange (15)
                                             :     :     :     :     :              +- ^ FilterExecTransformer (13)
                                             :     :     :     :     :                 +- ^ Scan parquet default.supplier (12)
                                             :     :     :     :     +- ^ InputIteratorTransformer (25)
                                             :     :     :     :        +- BroadcastQueryStage (24), Statistics(X)
                                             :     :     :     :           +- ColumnarBroadcastExchange (23)
                                             :     :     :     :              +- ^ FilterExecTransformer (21)
                                             :     :     :     :                 +- ^ Scan parquet default.orders (20)
                                             :     :     :     +- ^ InputIteratorTransformer (33)
                                             :     :     :        +- BroadcastQueryStage (32), Statistics(X)
                                             :     :     :           +- ColumnarBroadcastExchange (31)
                                             :     :     :              +- ^ FilterExecTransformer (29)
                                             :     :     :                 +- ^ Scan parquet default.customer (28)
                                             :     :     +- ^ InputIteratorTransformer (41)
                                             :     :        +- BroadcastQueryStage (40), Statistics(X)
                                             :     :           +- ColumnarBroadcastExchange (39)
                                             :     :              +- ^ FilterExecTransformer (37)
                                             :     :                 +- ^ Scan parquet default.nation (36)
                                             :     +- ^ InputIteratorTransformer (49)
                                             :        +- BroadcastQueryStage (48), Statistics(X)
                                             :           +- ColumnarBroadcastExchange (47)
                                             :              +- ^ FilterExecTransformer (45)
                                             :                 +- ^ Scan parquet default.nation (44)
                                             +- ^ InputIteratorTransformer (58)
                                                +- BroadcastQueryStage (57), Statistics(X)
                                                   +- ColumnarBroadcastExchange (56)
                                                      +- ^ ProjectExecTransformer (54)
                                                         +- ^ FilterExecTransformer (53)
                                                            +- ^ Scan parquet default.region (52)
+- == Initial Plan ==
   Sort (120)
   +- Exchange (119)
      +- HashAggregate (118)
         +- Exchange (117)
            +- HashAggregate (116)
               +- Project (115)
                  +- BroadcastHashJoin Inner BuildRight (114)
                     :- Project (109)
                     :  +- BroadcastHashJoin Inner BuildRight (108)
                     :     :- Project (104)
                     :     :  +- BroadcastHashJoin Inner BuildRight (103)
                     :     :     :- Project (99)
                     :     :     :  +- BroadcastHashJoin Inner BuildRight (98)
                     :     :     :     :- Project (94)
                     :     :     :     :  +- BroadcastHashJoin Inner BuildRight (93)
                     :     :     :     :     :- Project (89)
                     :     :     :     :     :  +- BroadcastHashJoin Inner BuildRight (88)
                     :     :     :     :     :     :- Project (84)
                     :     :     :     :     :     :  +- BroadcastHashJoin Inner BuildLeft (83)
                     :     :     :     :     :     :     :- BroadcastExchange (80)
                     :     :     :     :     :     :     :  +- Project (79)
                     :     :     :     :     :     :     :     +- Filter (78)
                     :     :     :     :     :     :     :        +- Scan parquet default.part (77)
                     :     :     :     :     :     :     +- Filter (82)
                     :     :     :     :     :     :        +- Scan parquet default.lineitem (81)
                     :     :     :     :     :     +- BroadcastExchange (87)
                     :     :     :     :     :        +- Filter (86)
                     :     :     :     :     :           +- Scan parquet default.supplier (85)
                     :     :     :     :     +- BroadcastExchange (92)
                     :     :     :     :        +- Filter (91)
                     :     :     :     :           +- Scan parquet default.orders (90)
                     :     :     :     +- BroadcastExchange (97)
                     :     :     :        +- Filter (96)
                     :     :     :           +- Scan parquet default.customer (95)
                     :     :     +- BroadcastExchange (102)
                     :     :        +- Filter (101)
                     :     :           +- Scan parquet default.nation (100)
                     :     +- BroadcastExchange (107)
                     :        +- Filter (106)
                     :           +- Scan parquet default.nation (105)
                     +- BroadcastExchange (113)
                        +- Project (112)
                           +- Filter (111)
                              +- Scan parquet default.region (110)


(1) Scan parquet default.part
Output [2]: [p_partkey#X, p_type#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_type), EqualTo(p_type,ECONOMY ANODIZED STEEL), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string>

(2) FilterExecTransformer
Input [2]: [p_partkey#X, p_type#X]
Arguments: ((isnotnull(p_type#X) AND (p_type#X = ECONOMY ANODIZED STEEL)) AND isnotnull(p_partkey#X))

(3) ProjectExecTransformer
Input [2]: [p_partkey#X, p_type#X]
Arguments: [p_partkey#X]

(4) WholeStageCodegenTransformer (X)
Input [1]: [p_partkey#X]
Arguments: false
Native Plan:
-- Project[expressions: (n1_2:BIGINT, "n0_0")] -> n1_2:BIGINT
  -- TableScan[table: hive_table, range filters: [(p_partkey, Filter(IsNotNull, deterministic, null not allowed)), (p_type, BytesRange: [ECONOMY ANODIZED STEEL, ECONOMY ANODIZED STEEL] no nulls)]] -> n0_0:BIGINT, n0_1:VARCHAR

(5) ColumnarBroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(6) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 0

(7) InputIteratorTransformer
Input [1]: [p_partkey#X]

(8) Scan parquet default.lineitem
Output [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(9) FilterExecTransformer
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(10) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(11) ProjectExecTransformer
Input [6]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(12) Scan parquet default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(13) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(14) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(s_nationkey, Filter(IsNotNull, deterministic, null not allowed)), (s_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT

(15) ColumnarBroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(16) BroadcastQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: 1

(17) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(18) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(19) ProjectExecTransformer
Input [6]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]
Arguments: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]

(20) Scan parquet default.orders
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1995-01-01), LessThanOrEqual(o_orderdate,1996-12-31), IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(21) FilterExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1995-01-01)) AND (o_orderdate#X <= 1996-12-31)) AND isnotnull(o_orderkey#X)) AND isnotnull(o_custkey#X))

(22) WholeStageCodegenTransformer (X)
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(o_custkey, Filter(IsNotNull, deterministic, null not allowed)), (o_orderdate, BigintRange: [9131, 9861] no nulls), (o_orderkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT, n0_2:DATE

(23) ColumnarBroadcastExchange
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(24) BroadcastQueryStage
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: 2

(25) InputIteratorTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(26) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(27) ProjectExecTransformer
Input [7]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]

(28) Scan parquet default.customer
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(29) FilterExecTransformer
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(30) WholeStageCodegenTransformer (X)
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(c_custkey, Filter(IsNotNull, deterministic, null not allowed)), (c_nationkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT

(31) ColumnarBroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(32) BroadcastQueryStage
Output [2]: [c_custkey#X, c_nationkey#X]
Arguments: 3

(33) InputIteratorTransformer
Input [2]: [c_custkey#X, c_nationkey#X]

(34) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(35) ProjectExecTransformer
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X, c_custkey#X, c_nationkey#X]
Arguments: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]

(36) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(37) FilterExecTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(38) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(n_nationkey, Filter(IsNotNull, deterministic, null not allowed)), (n_regionkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT

(39) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(40) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_regionkey#X]
Arguments: 4

(41) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]

(42) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(43) ProjectExecTransformer
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X, n_nationkey#X, n_regionkey#X]
Arguments: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]

(44) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(45) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: isnotnull(n_nationkey#X)

(46) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_name#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(n_nationkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:VARCHAR

(47) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(48) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: 5

(49) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(50) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(51) ProjectExecTransformer
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X, n_nationkey#X, n_name#X]
Arguments: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]

(52) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(53) FilterExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: ((isnotnull(r_name#X) AND (r_name#X = AMERICA)) AND isnotnull(r_regionkey#X))

(54) ProjectExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: [r_regionkey#X]

(55) WholeStageCodegenTransformer (X)
Input [1]: [r_regionkey#X]
Arguments: false
Native Plan:
-- Project[expressions: (n1_2:BIGINT, "n0_0")] -> n1_2:BIGINT
  -- TableScan[table: hive_table, range filters: [(r_name, BytesRange: [AMERICA, AMERICA] no nulls), (r_regionkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:VARCHAR

(56) ColumnarBroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(57) BroadcastQueryStage
Output [1]: [r_regionkey#X]
Arguments: 6

(58) InputIteratorTransformer
Input [1]: [r_regionkey#X]

(59) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(60) ProjectExecTransformer
Input [6]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X, r_regionkey#X]
Arguments: [year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) AS volume#X, n_name#X AS nation#X]

(61) FlushableHashAggregateExecTransformer
Input [3]: [o_year#X, volume#X, nation#X]
Keys [1]: [o_year#X]
Functions [2]: [partial_sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), partial_sum(volume#X)]
Aggregate Attributes [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Results [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(62) ProjectExecTransformer
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: [hash(o_year#X, 42) AS hash_partition_key#X, o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(63) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project[expressions: (n32_5:INTEGER, hash_with_seed(42,"n31_3")), (n32_6:INTEGER, "n31_3"), (n32_7:DECIMAL(36, 4), "n31_4"), (n32_8:BOOLEAN, "n31_5"), (n32_9:DECIMAL(36, 4), "n31_6"), (n32_10:BOOLEAN, "n31_7")] -> n32_5:INTEGER, n32_6:INTEGER, n32_7:DECIMAL(36, 4), n32_8:BOOLEAN, n32_9:DECIMAL(36, 4), n32_10:BOOLEAN
  -- Project[expressions: (n31_3:INTEGER, "n29_3"), (n31_4:DECIMAL(36, 4), "n30_1"["col_0"]), (n31_5:BOOLEAN, "n30_1"["col_1"]), (n31_6:DECIMAL(36, 4), "n30_2"["col_0"]), (n31_7:BOOLEAN, "n30_2"["col_1"])] -> n31_3:INTEGER, n31_4:DECIMAL(36, 4), n31_5:BOOLEAN, n31_6:DECIMAL(36, 4), n31_7:BOOLEAN
    -- Aggregation[PARTIAL [n29_3] n30_1 := sum_partial("n29_4"), n30_2 := sum_partial("n29_5")] -> n29_3:INTEGER, n30_1:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>, n30_2:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>
      -- Project[expressions: (n29_3:INTEGER, "n28_6"), (n29_4:DECIMAL(26, 4), if(equalto("n28_8","BRAZIL"),"n28_7",0.0000)), (n29_5:DECIMAL(26, 4), "n28_7")] -> n29_3:INTEGER, n29_4:DECIMAL(26, 4), n29_5:DECIMAL(26, 4)
        -- Project[expressions: (n28_6:INTEGER, year("n27_8")), (n28_7:DECIMAL(26, 4), try_cast multiply("n27_6",try_cast subtract(try_cast 1.00 as DECIMAL(1, 0),"n27_7") as DECIMAL(13, 2)) as DECIMAL(26, 4)), (n28_8:VARCHAR, "n27_10")] -> n28_6:INTEGER, n28_7:DECIMAL(26, 4), n28_8:VARCHAR
          -- Project[expressions: (n27_6:DECIMAL(12, 2), "n25_7"), (n27_7:DECIMAL(12, 2), "n25_8"), (n27_8:DATE, "n25_9"), (n27_9:BIGINT, "n25_10"), (n27_10:VARCHAR, "n25_11"), (n27_11:BIGINT, "n6_0")] -> n27_6:DECIMAL(12, 2), n27_7:DECIMAL(12, 2), n27_8:DATE, n27_9:BIGINT, n27_10:VARCHAR, n27_11:BIGINT
            -- HashJoin[INNER n25_10=n6_0] -> n25_7:DECIMAL(12, 2), n25_8:DECIMAL(12, 2), n25_9:DATE, n25_10:BIGINT, n25_11:VARCHAR, n6_0:BIGINT
              -- Project[expressions: (n25_7:DECIMAL(12, 2), "n24_7"), (n25_8:DECIMAL(12, 2), "n24_8"), (n25_9:DATE, "n24_10"), (n25_10:BIGINT, "n24_11"), (n25_11:VARCHAR, "n24_13")] -> n25_7:DECIMAL(12, 2), n25_8:DECIMAL(12, 2), n25_9:DATE, n25_10:BIGINT, n25_11:VARCHAR
                -- Project[expressions: (n24_7:DECIMAL(12, 2), "n22_7"), (n24_8:DECIMAL(12, 2), "n22_8"), (n24_9:BIGINT, "n22_9"), (n24_10:DATE, "n22_10"), (n24_11:BIGINT, "n22_11"), (n24_12:BIGINT, "n5_0"), (n24_13:VARCHAR, "n5_1")] -> n24_7:DECIMAL(12, 2), n24_8:DECIMAL(12, 2), n24_9:BIGINT, n24_10:DATE, n24_11:BIGINT, n24_12:BIGINT, n24_13:VARCHAR
                  -- HashJoin[INNER n22_9=n5_0] -> n22_7:DECIMAL(12, 2), n22_8:DECIMAL(12, 2), n22_9:BIGINT, n22_10:DATE, n22_11:BIGINT, n5_0:BIGINT, n5_1:VARCHAR
                    -- Project[expressions: (n22_7:DECIMAL(12, 2), "n21_7"), (n22_8:DECIMAL(12, 2), "n21_8"), (n22_9:BIGINT, "n21_9"), (n22_10:DATE, "n21_10"), (n22_11:BIGINT, "n21_13")] -> n22_7:DECIMAL(12, 2), n22_8:DECIMAL(12, 2), n22_9:BIGINT, n22_10:DATE, n22_11:BIGINT
                      -- Project[expressions: (n21_7:DECIMAL(12, 2), "n19_7"), (n21_8:DECIMAL(12, 2), "n19_8"), (n21_9:BIGINT, "n19_9"), (n21_10:DATE, "n19_10"), (n21_11:BIGINT, "n19_11"), (n21_12:BIGINT, "n4_0"), (n21_13:BIGINT, "n4_1")] -> n21_7:DECIMAL(12, 2), n21_8:DECIMAL(12, 2), n21_9:BIGINT, n21_10:DATE, n21_11:BIGINT, n21_12:BIGINT, n21_13:BIGINT
                        -- HashJoin[INNER n19_11=n4_0] -> n19_7:DECIMAL(12, 2), n19_8:DECIMAL(12, 2), n19_9:BIGINT, n19_10:DATE, n19_11:BIGINT, n4_0:BIGINT, n4_1:BIGINT
                          -- Project[expressions: (n19_7:DECIMAL(12, 2), "n18_7"), (n19_8:DECIMAL(12, 2), "n18_8"), (n19_9:BIGINT, "n18_9"), (n19_10:DATE, "n18_11"), (n19_11:BIGINT, "n18_13")] -> n19_7:DECIMAL(12, 2), n19_8:DECIMAL(12, 2), n19_9:BIGINT, n19_10:DATE, n19_11:BIGINT
                            -- Project[expressions: (n18_7:DECIMAL(12, 2), "n16_7"), (n18_8:DECIMAL(12, 2), "n16_8"), (n18_9:BIGINT, "n16_9"), (n18_10:BIGINT, "n16_10"), (n18_11:DATE, "n16_11"), (n18_12:BIGINT, "n3_0"), (n18_13:BIGINT, "n3_1")] -> n18_7:DECIMAL(12, 2), n18_8:DECIMAL(12, 2), n18_9:BIGINT, n18_10:BIGINT, n18_11:DATE, n18_12:BIGINT, n18_13:BIGINT
                              -- HashJoin[INNER n16_10=n3_0] -> n16_7:DECIMAL(12, 2), n16_8:DECIMAL(12, 2), n16_9:BIGINT, n16_10:BIGINT, n16_11:DATE, n3_0:BIGINT, n3_1:BIGINT
                                -- Project[expressions: (n16_7:DECIMAL(12, 2), "n15_8"), (n16_8:DECIMAL(12, 2), "n15_9"), (n16_9:BIGINT, "n15_10"), (n16_10:BIGINT, "n15_12"), (n16_11:DATE, "n15_13")] -> n16_7:DECIMAL(12, 2), n16_8:DECIMAL(12, 2), n16_9:BIGINT, n16_10:BIGINT, n16_11:DATE
                                  -- Project[expressions: (n15_7:BIGINT, "n13_6"), (n15_8:DECIMAL(12, 2), "n13_7"), (n15_9:DECIMAL(12, 2), "n13_8"), (n15_10:BIGINT, "n13_9"), (n15_11:BIGINT, "n2_0"), (n15_12:BIGINT, "n2_1"), (n15_13:DATE, "n2_2")] -> n15_7:BIGINT, n15_8:DECIMAL(12, 2), n15_9:DECIMAL(12, 2), n15_10:BIGINT, n15_11:BIGINT, n15_12:BIGINT, n15_13:DATE
                                    -- HashJoin[INNER n13_6=n2_0] -> n13_6:BIGINT, n13_7:DECIMAL(12, 2), n13_8:DECIMAL(12, 2), n13_9:BIGINT, n2_0:BIGINT, n2_1:BIGINT, n2_2:DATE
                                      -- Project[expressions: (n13_6:BIGINT, "n12_6"), (n13_7:DECIMAL(12, 2), "n12_8"), (n13_8:DECIMAL(12, 2), "n12_9"), (n13_9:BIGINT, "n12_11")] -> n13_6:BIGINT, n13_7:DECIMAL(12, 2), n13_8:DECIMAL(12, 2), n13_9:BIGINT
                                        -- Project[expressions: (n12_6:BIGINT, "n10_6"), (n12_7:BIGINT, "n10_7"), (n12_8:DECIMAL(12, 2), "n10_8"), (n12_9:DECIMAL(12, 2), "n10_9"), (n12_10:BIGINT, "n1_0"), (n12_11:BIGINT, "n1_1")] -> n12_6:BIGINT, n12_7:BIGINT, n12_8:DECIMAL(12, 2), n12_9:DECIMAL(12, 2), n12_10:BIGINT, n12_11:BIGINT
                                          -- HashJoin[INNER n10_7=n1_0] -> n10_6:BIGINT, n10_7:BIGINT, n10_8:DECIMAL(12, 2), n10_9:DECIMAL(12, 2), n1_0:BIGINT, n1_1:BIGINT
                                            -- Project[expressions: (n10_6:BIGINT, "n9_7"), (n10_7:BIGINT, "n9_9"), (n10_8:DECIMAL(12, 2), "n9_10"), (n10_9:DECIMAL(12, 2), "n9_11")] -> n10_6:BIGINT, n10_7:BIGINT, n10_8:DECIMAL(12, 2), n10_9:DECIMAL(12, 2)
                                              -- Project[expressions: (n9_6:BIGINT, "n0_0"), (n9_7:BIGINT, "n7_0"), (n9_8:BIGINT, "n7_1"), (n9_9:BIGINT, "n7_2"), (n9_10:DECIMAL(12, 2), "n7_3"), (n9_11:DECIMAL(12, 2), "n7_4")] -> n9_6:BIGINT, n9_7:BIGINT, n9_8:BIGINT, n9_9:BIGINT, n9_10:DECIMAL(12, 2), n9_11:DECIMAL(12, 2)
                                                -- HashJoin[INNER n7_1=n0_0] -> n7_0:BIGINT, n7_1:BIGINT, n7_2:BIGINT, n7_3:DECIMAL(12, 2), n7_4:DECIMAL(12, 2), n0_0:BIGINT
                                                  -- TableScan[table: hive_table, range filters: [(l_orderkey, Filter(IsNotNull, deterministic, null not allowed)), (l_partkey, Filter(IsNotNull, deterministic, null not allowed)), (l_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n7_0:BIGINT, n7_1:BIGINT, n7_2:BIGINT, n7_3:DECIMAL(12, 2), n7_4:DECIMAL(12, 2)
                                                  -- ValueStream[] -> n0_0:BIGINT
                                            -- ValueStream[] -> n1_0:BIGINT, n1_1:BIGINT
                                      -- ValueStream[] -> n2_0:BIGINT, n2_1:BIGINT, n2_2:DATE
                                -- ValueStream[] -> n3_0:BIGINT, n3_1:BIGINT
                          -- ValueStream[] -> n4_0:BIGINT, n4_1:BIGINT
                    -- ValueStream[] -> n5_0:BIGINT, n5_1:VARCHAR
              -- ValueStream[] -> n6_0:BIGINT

(64) ColumnarExchange
Input [6]: [hash_partition_key#X, o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(o_year#X, 100), ENSURE_REQUIREMENTS, [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(65) ShuffleQueryStage
Output [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: 7

(66) AQEShuffleRead
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: coalesced

(67) InputIteratorTransformer
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(68) RegularHashAggregateExecTransformer
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Keys [1]: [o_year#X]
Functions [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), sum(volume#X)]
Aggregate Attributes [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]
Results [2]: [o_year#X, CheckOverflow((promote_precision(sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X) / promote_precision(sum(volume#X)#X)), DecimalType(38,6)) AS mkt_share#X]

(69) WholeStageCodegenTransformer (X)
Input [2]: [o_year#X, mkt_share#X]
Arguments: false
Native Plan:
-- Project[expressions: (n3_3:INTEGER, "n1_5"), (n3_4:DECIMAL(38, 6), try_cast divide("n2_1","n2_2") as DECIMAL(38, 6))] -> n3_3:INTEGER, n3_4:DECIMAL(38, 6)
  -- Aggregation[SINGLE [n1_5] n2_1 := sum_merge_extract("n1_6"), n2_2 := sum_merge_extract("n1_7")] -> n1_5:INTEGER, n2_1:DECIMAL(36, 4), n2_2:DECIMAL(36, 4)
    -- Project[expressions: (n1_5:INTEGER, "n0_0"), (n1_6:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>, row_constructor("n0_1","n0_2")), (n1_7:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>, row_constructor("n0_3","n0_4"))] -> n1_5:INTEGER, n1_6:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>, n1_7:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>
      -- ValueStream[] -> n0_0:INTEGER, n0_1:DECIMAL(36, 4), n0_2:BOOLEAN, n0_3:DECIMAL(36, 4), n0_4:BOOLEAN

(70) ColumnarExchange
Input [2]: [o_year#X, mkt_share#X]
Arguments: rangepartitioning(o_year#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(71) ShuffleQueryStage
Output [2]: [o_year#X, mkt_share#X]
Arguments: 8

(72) AQEShuffleRead
Input [2]: [o_year#X, mkt_share#X]
Arguments: coalesced

(73) InputIteratorTransformer
Input [2]: [o_year#X, mkt_share#X]

(74) SortExecTransformer
Input [2]: [o_year#X, mkt_share#X]
Arguments: [o_year#X ASC NULLS FIRST], true, 0

(75) WholeStageCodegenTransformer (X)
Input [2]: [o_year#X, mkt_share#X]
Arguments: false
Native Plan:
-- OrderBy[n0_0 ASC NULLS FIRST] -> n0_0:INTEGER, n0_1:DECIMAL(38, 6)
  -- ValueStream[] -> n0_0:INTEGER, n0_1:DECIMAL(38, 6)

(76) VeloxColumnarToRowExec
Input [2]: [o_year#X, mkt_share#X]

(77) Scan parquet default.part
Output [2]: [p_partkey#X, p_type#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_type), EqualTo(p_type,ECONOMY ANODIZED STEEL), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string>

(78) Filter
Input [2]: [p_partkey#X, p_type#X]
Condition : ((isnotnull(p_type#X) AND (p_type#X = ECONOMY ANODIZED STEEL)) AND isnotnull(p_partkey#X))

(79) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_type#X]

(80) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(81) Scan parquet default.lineitem
Output [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(82) Filter
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Condition : ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(83) BroadcastHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(84) Project
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(85) Scan parquet default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(86) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(87) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(88) BroadcastHashJoin
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(89) Project
Output [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(90) Scan parquet default.orders
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1995-01-01), LessThanOrEqual(o_orderdate,1996-12-31), IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(91) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Condition : ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1995-01-01)) AND (o_orderdate#X <= 1996-12-31)) AND isnotnull(o_orderkey#X)) AND isnotnull(o_custkey#X))

(92) BroadcastExchange
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(93) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(94) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Input [7]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderkey#X, o_custkey#X, o_orderdate#X]

(95) Scan parquet default.customer
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(96) Filter
Input [2]: [c_custkey#X, c_nationkey#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(97) BroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(98) BroadcastHashJoin
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(99) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X, c_custkey#X, c_nationkey#X]

(100) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(101) Filter
Input [2]: [n_nationkey#X, n_regionkey#X]
Condition : (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(102) BroadcastExchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(103) BroadcastHashJoin
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(104) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X, n_nationkey#X, n_regionkey#X]

(105) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(106) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : isnotnull(n_nationkey#X)

(107) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(108) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(109) Project
Output [5]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X, n_nationkey#X, n_name#X]

(110) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(111) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = AMERICA)) AND isnotnull(r_regionkey#X))

(112) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(113) BroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(114) BroadcastHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(115) Project
Output [3]: [year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) AS volume#X, n_name#X AS nation#X]
Input [6]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X, r_regionkey#X]

(116) HashAggregate
Input [3]: [o_year#X, volume#X, nation#X]
Keys [1]: [o_year#X]
Functions [2]: [partial_sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), partial_sum(volume#X)]
Aggregate Attributes [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Results [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(117) Exchange
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(o_year#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(118) HashAggregate
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Keys [1]: [o_year#X]
Functions [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), sum(volume#X)]
Aggregate Attributes [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]
Results [2]: [o_year#X, CheckOverflow((promote_precision(sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X) / promote_precision(sum(volume#X)#X)), DecimalType(38,6)) AS mkt_share#X]

(119) Exchange
Input [2]: [o_year#X, mkt_share#X]
Arguments: rangepartitioning(o_year#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(120) Sort
Input [2]: [o_year#X, mkt_share#X]
Arguments: [o_year#X ASC NULLS FIRST], true, 0

(121) AdaptiveSparkPlan
Output [2]: [o_year#X, mkt_share#X]
Arguments: isFinalPlan=true
