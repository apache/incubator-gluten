== Physical Plan ==
VeloxColumnarToRowExec (20)
+- ^ SortExecTransformer (18)
   +- ^ InputIteratorTransformer (17)
      +- ColumnarExchange (16)
         +- ^ RegularHashAggregateExecTransformer (14)
            +- ^ InputIteratorTransformer (13)
               +- ColumnarExchange (12)
                  +- ^ ProjectExecTransformer (10)
                     +- ^ FlushableHashAggregateExecTransformer (9)
                        +- ^ ProjectExecTransformer (8)
                           +- ^ GlutenBroadcastHashJoinExecTransformer LeftAnti (7)
                              :- ^ FilterExecTransformer (2)
                              :  +- ^ Scan parquet spark_catalog.default.customer (1)
                              +- ^ InputIteratorTransformer (6)
                                 +- ColumnarBroadcastExchange (5)
                                    +- ^ Scan parquet spark_catalog.default.orders (3)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/customer]
PushedFilters: [IsNotNull(c_acctbal)]
ReadSchema: struct<c_custkey:bigint,c_phone:string,c_acctbal:decimal(12,2)>

(2) FilterExecTransformer
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: ((isnotnull(c_acctbal#X) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17)) AND (cast(c_acctbal#X as decimal(16,6)) > Subquery scalar-subquery#X, [id=#X]))

(3) Scan parquet spark_catalog.default.orders
Output [1]: [o_custkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/orders]
ReadSchema: struct<o_custkey:bigint>

(4) WholeStageCodegenTransformer (X)
Input [1]: [o_custkey#X]
Arguments: false
Native Plan:
-- TableScan

(5) ColumnarBroadcastExchange
Input [1]: [o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(6) InputIteratorTransformer
Input [1]: [o_custkey#X]

(7) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: LeftAnti
Join condition: None

(8) ProjectExecTransformer
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: [substring(c_phone#X, 1, 2) AS cntrycode#X, c_acctbal#X]

(9) FlushableHashAggregateExecTransformer
Input [2]: [cntrycode#X, c_acctbal#X]
Keys [1]: [cntrycode#X]
Functions [2]: [partial_count(1), partial_sum(c_acctbal#X)]
Aggregate Attributes [3]: [count#X, sum#X, isEmpty#X]
Results [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(10) ProjectExecTransformer
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: [hash(cntrycode#X, 42) AS hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]

(11) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project
  -- Project
    -- Aggregation
      -- Project
        -- Project
          -- HashJoin
            -- TableScan
            -- ValueStream

(12) ColumnarExchange
Input [5]: [hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(cntrycode#X, 100), ENSURE_REQUIREMENTS, [cntrycode#X, count#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(13) InputIteratorTransformer
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(14) RegularHashAggregateExecTransformer
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Keys [1]: [cntrycode#X]
Functions [2]: [count(1), sum(c_acctbal#X)]
Aggregate Attributes [2]: [count(1)#X, sum(c_acctbal#X)#X]
Results [3]: [cntrycode#X, count(1)#X AS numcust#X, sum(c_acctbal#X)#X AS totacctbal#X]

(15) WholeStageCodegenTransformer (X)
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: false
Native Plan:
-- Project
  -- Aggregation
    -- Project
      -- ValueStream

(16) ColumnarExchange
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: rangepartitioning(cntrycode#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(17) InputIteratorTransformer
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

(18) SortExecTransformer
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: [cntrycode#X ASC NULLS FIRST], true, 0

(19) WholeStageCodegenTransformer (X)
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: false
Native Plan:
-- OrderBy
  -- ValueStream

(20) VeloxColumnarToRowExec
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#X, [id=#X]
VeloxColumnarToRowExec (30)
+- ^ RegularHashAggregateExecTransformer (28)
   +- ^ InputIteratorTransformer (27)
      +- ColumnarExchange (26)
         +- ^ FlushableHashAggregateExecTransformer (24)
            +- ^ ProjectExecTransformer (23)
               +- ^ FilterExecTransformer (22)
                  +- ^ Scan parquet spark_catalog.default.customer (21)


(21) Scan parquet spark_catalog.default.customer
Output [2]: [c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/customer]
PushedFilters: [IsNotNull(c_acctbal), GreaterThan(c_acctbal,0.00)]
ReadSchema: struct<c_phone:string,c_acctbal:decimal(12,2)>

(22) FilterExecTransformer
Input [2]: [c_phone#X, c_acctbal#X]
Arguments: ((isnotnull(c_acctbal#X) AND (c_acctbal#X > 0.00)) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17))

(23) ProjectExecTransformer
Input [2]: [c_phone#X, c_acctbal#X]
Arguments: [c_acctbal#X]

(24) FlushableHashAggregateExecTransformer
Input [1]: [c_acctbal#X]
Keys: []
Functions [1]: [partial_avg(c_acctbal#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [2]: [sum#X, count#X]

(25) WholeStageCodegenTransformer (X)
Input [2]: [sum#X, count#X]
Arguments: false
Native Plan:
-- Project[expressions: (n3_1:DECIMAL(22, 2), "n2_0"["col_0"]), (n3_2:BIGINT, "n2_0"["col_1"])] -> n3_1:DECIMAL(22, 2), n3_2:BIGINT
  -- Aggregation[PARTIAL n2_0 := avg_partial("n1_2")] -> n2_0:ROW<col_0:DECIMAL(22, 2),col_1:BIGINT>
    -- Project[expressions: (n1_2:DECIMAL(12, 2), "n0_1")] -> n1_2:DECIMAL(12, 2)
      -- TableScan[table: hive_table, range filters: [(c_acctbal, BigintRange: [1, 999999999999999999] no nulls)], remaining filter: (in(substring("c_phone",1,2),7 elements starting at 0 {13, 17, 18, 23, 29, ...}))] -> n0_0:VARCHAR, n0_1:DECIMAL(12, 2)

(26) ColumnarExchange
Input [2]: [sum#X, count#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(27) InputIteratorTransformer
Input [2]: [sum#X, count#X]

(28) RegularHashAggregateExecTransformer
Input [2]: [sum#X, count#X]
Keys: []
Functions [1]: [avg(c_acctbal#X)]
Aggregate Attributes [1]: [avg(c_acctbal#X)#X]
Results [1]: [avg(c_acctbal#X)#X AS avg(c_acctbal)#X]

(29) WholeStageCodegenTransformer (X)
Input [1]: [avg(c_acctbal)#X]
Arguments: false
Native Plan:
-- Project[expressions: (n3_1:DECIMAL(16, 6), "n2_0")] -> n3_1:DECIMAL(16, 6)
  -- Aggregation[SINGLE n2_0 := avg_merge_extract("n1_2")] -> n2_0:DECIMAL(16, 6)
    -- Project[expressions: (n1_2:ROW<col_0:DECIMAL(22, 2),col_1:BIGINT>, row_constructor("n0_0","n0_1"))] -> n1_2:ROW<col_0:DECIMAL(22, 2),col_1:BIGINT>
      -- ValueStream[] -> n0_0:DECIMAL(22, 2), n0_1:BIGINT

(30) VeloxColumnarToRowExec
Input [1]: [avg(c_acctbal)#X]

Subquery:2 Hosting operator id = 1 Hosting Expression = Subquery scalar-subquery#X, [id=#X]
VeloxColumnarToRowExec (30)
+- ^ RegularHashAggregateExecTransformer (28)
   +- ^ InputIteratorTransformer (27)
      +- ColumnarExchange (26)
         +- ^ FlushableHashAggregateExecTransformer (24)
            +- ^ ProjectExecTransformer (23)
               +- ^ FilterExecTransformer (22)
                  +- ^ Scan parquet spark_catalog.default.customer (21)



