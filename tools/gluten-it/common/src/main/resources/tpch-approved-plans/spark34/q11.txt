== Physical Plan ==
VeloxColumnarToRowExec (30)
+- ^ SortExecTransformer (28)
   +- ^ InputIteratorTransformer (27)
      +- ColumnarExchange (26)
         +- ^ FilterExecTransformer (24)
            +- ^ RegularHashAggregateExecTransformer (23)
               +- ^ InputIteratorTransformer (22)
                  +- ColumnarExchange (21)
                     +- ^ ProjectExecTransformer (19)
                        +- ^ FlushableHashAggregateExecTransformer (18)
                           +- ^ ProjectExecTransformer (17)
                              +- ^ GlutenBroadcastHashJoinExecTransformer Inner (16)
                                 :- ^ ProjectExecTransformer (9)
                                 :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (8)
                                 :     :- ^ FilterExecTransformer (2)
                                 :     :  +- ^ Scan parquet spark_catalog.default.partsupp (1)
                                 :     +- ^ InputIteratorTransformer (7)
                                 :        +- ColumnarBroadcastExchange (6)
                                 :           +- ^ FilterExecTransformer (4)
                                 :              +- ^ Scan parquet spark_catalog.default.supplier (3)
                                 +- ^ InputIteratorTransformer (15)
                                    +- ColumnarBroadcastExchange (14)
                                       +- ^ ProjectExecTransformer (12)
                                          +- ^ FilterExecTransformer (11)
                                             +- ^ Scan parquet spark_catalog.default.nation (10)


(1) Scan parquet spark_catalog.default.partsupp
Output [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/partsupp]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(2) FilterExecTransformer
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: isnotnull(ps_suppkey#X)

(3) Scan parquet spark_catalog.default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(4) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(5) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(s_nationkey, Filter(IsNotNull, deterministic, null not allowed)), (s_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT

(6) ColumnarBroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(7) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(8) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join type: Inner
Join condition: None

(9) ProjectExecTransformer
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]
Arguments: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]

(10) Scan parquet spark_catalog.default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,GERMANY), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(11) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = GERMANY)) AND isnotnull(n_nationkey#X))

(12) ProjectExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: [n_nationkey#X]

(13) WholeStageCodegenTransformer (X)
Input [1]: [n_nationkey#X]
Arguments: false
Native Plan:
-- Project[expressions: (n1_2:BIGINT, "n0_0")] -> n1_2:BIGINT
  -- TableScan[table: hive_table, range filters: [(n_name, BytesRange: [GERMANY, GERMANY] no nulls), (n_nationkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:VARCHAR

(14) ColumnarBroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(15) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(16) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(17) ProjectExecTransformer
Input [5]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X]
Arguments: [ps_partkey#X, ps_availqty#X, ps_supplycost#X]

(18) FlushableHashAggregateExecTransformer
Input [3]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [partial_sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [ps_partkey#X, sum#X, isEmpty#X]

(19) ProjectExecTransformer
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]
Arguments: [hash(ps_partkey#X, 42) AS hash_partition_key#X, ps_partkey#X, sum#X, isEmpty#X]

(20) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, ps_partkey#X, sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project[expressions: (n12_3:INTEGER, hash_with_seed(42,"n11_2")), (n12_4:BIGINT, "n11_2"), (n12_5:DECIMAL(33, 2), "n11_3"), (n12_6:BOOLEAN, "n11_4")] -> n12_3:INTEGER, n12_4:BIGINT, n12_5:DECIMAL(33, 2), n12_6:BOOLEAN
  -- Project[expressions: (n11_2:BIGINT, "n9_3"), (n11_3:DECIMAL(33, 2), "n10_1"["col_0"]), (n11_4:BOOLEAN, "n10_1"["col_1"])] -> n11_2:BIGINT, n11_3:DECIMAL(33, 2), n11_4:BOOLEAN
    -- Aggregation[PARTIAL [n9_3] n10_1 := sum_partial("n9_4")] -> n9_3:BIGINT, n10_1:ROW<col_0:DECIMAL(33, 2),col_1:BOOLEAN>
      -- Project[expressions: (n9_3:BIGINT, "n8_5"), (n9_4:DECIMAL(23, 2), multiply("n8_7",try_cast "n8_6" as DECIMAL(10, 0)))] -> n9_3:BIGINT, n9_4:DECIMAL(23, 2)
        -- Project[expressions: (n8_5:BIGINT, "n7_5"), (n8_6:INTEGER, "n7_6"), (n8_7:DECIMAL(12, 2), "n7_7")] -> n8_5:BIGINT, n8_6:INTEGER, n8_7:DECIMAL(12, 2)
          -- Project[expressions: (n7_5:BIGINT, "n5_6"), (n7_6:INTEGER, "n5_7"), (n7_7:DECIMAL(12, 2), "n5_8"), (n7_8:BIGINT, "n5_9"), (n7_9:BIGINT, "n1_0")] -> n7_5:BIGINT, n7_6:INTEGER, n7_7:DECIMAL(12, 2), n7_8:BIGINT, n7_9:BIGINT
            -- HashJoin[INNER n5_9=n1_0] -> n5_6:BIGINT, n5_7:INTEGER, n5_8:DECIMAL(12, 2), n5_9:BIGINT, n1_0:BIGINT
              -- Project[expressions: (n5_6:BIGINT, "n4_6"), (n5_7:INTEGER, "n4_8"), (n5_8:DECIMAL(12, 2), "n4_9"), (n5_9:BIGINT, "n4_11")] -> n5_6:BIGINT, n5_7:INTEGER, n5_8:DECIMAL(12, 2), n5_9:BIGINT
                -- Project[expressions: (n4_6:BIGINT, "n2_0"), (n4_7:BIGINT, "n2_1"), (n4_8:INTEGER, "n2_2"), (n4_9:DECIMAL(12, 2), "n2_3"), (n4_10:BIGINT, "n0_0"), (n4_11:BIGINT, "n0_1")] -> n4_6:BIGINT, n4_7:BIGINT, n4_8:INTEGER, n4_9:DECIMAL(12, 2), n4_10:BIGINT, n4_11:BIGINT
                  -- HashJoin[INNER n2_1=n0_0] -> n2_0:BIGINT, n2_1:BIGINT, n2_2:INTEGER, n2_3:DECIMAL(12, 2), n0_0:BIGINT, n0_1:BIGINT
                    -- TableScan[table: hive_table, range filters: [(ps_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n2_0:BIGINT, n2_1:BIGINT, n2_2:INTEGER, n2_3:DECIMAL(12, 2)
                    -- ValueStream[] -> n0_0:BIGINT, n0_1:BIGINT
              -- ValueStream[] -> n1_0:BIGINT

(21) ColumnarExchange
Input [4]: [hash_partition_key#X, ps_partkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(ps_partkey#X, 100), ENSURE_REQUIREMENTS, [ps_partkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(22) InputIteratorTransformer
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]

(23) RegularHashAggregateExecTransformer
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))]
Aggregate Attributes [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X]
Results [2]: [ps_partkey#X, sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X AS value#X]

(24) FilterExecTransformer
Input [2]: [ps_partkey#X, value#X]
Arguments: (isnotnull(value#X) AND (cast(value#X as decimal(38,6)) > Subquery scalar-subquery#X, [id=#X]))

(25) WholeStageCodegenTransformer (X)
Input [2]: [ps_partkey#X, value#X]
Arguments: false
Native Plan:
-- Filter[expression: and(isnotnull("n3_3"),decimal_greaterthan(try_cast "n3_3" as DECIMAL(38, 6),7874103.109405))] -> n3_2:BIGINT, n3_3:DECIMAL(33, 2)
  -- Project[expressions: (n3_2:BIGINT, "n1_3"), (n3_3:DECIMAL(33, 2), "n2_1")] -> n3_2:BIGINT, n3_3:DECIMAL(33, 2)
    -- Aggregation[SINGLE [n1_3] n2_1 := sum_merge_extract("n1_4")] -> n1_3:BIGINT, n2_1:DECIMAL(33, 2)
      -- Project[expressions: (n1_3:BIGINT, "n0_0"), (n1_4:ROW<col_0:DECIMAL(33, 2),col_1:BOOLEAN>, row_constructor("n0_1","n0_2"))] -> n1_3:BIGINT, n1_4:ROW<col_0:DECIMAL(33, 2),col_1:BOOLEAN>
        -- ValueStream[] -> n0_0:BIGINT, n0_1:DECIMAL(33, 2), n0_2:BOOLEAN

(26) ColumnarExchange
Input [2]: [ps_partkey#X, value#X]
Arguments: rangepartitioning(value#X DESC NULLS LAST, 100), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(27) InputIteratorTransformer
Input [2]: [ps_partkey#X, value#X]

(28) SortExecTransformer
Input [2]: [ps_partkey#X, value#X]
Arguments: [value#X DESC NULLS LAST], true, 0

(29) WholeStageCodegenTransformer (X)
Input [2]: [ps_partkey#X, value#X]
Arguments: false
Native Plan:
-- OrderBy[n0_1 DESC NULLS LAST] -> n0_0:BIGINT, n0_1:DECIMAL(33, 2)
  -- ValueStream[] -> n0_0:BIGINT, n0_1:DECIMAL(33, 2)

(30) VeloxColumnarToRowExec
Input [2]: [ps_partkey#X, value#X]

===== Subqueries =====

Subquery:1 Hosting operator id = 24 Hosting Expression = Subquery scalar-subquery#X, [id=#X]
VeloxColumnarToRowExec (47)
+- ^ RegularHashAggregateExecTransformer (45)
   +- ^ InputIteratorTransformer (44)
      +- ColumnarExchange (43)
         +- ^ FlushableHashAggregateExecTransformer (41)
            +- ^ ProjectExecTransformer (40)
               +- ^ GlutenBroadcastHashJoinExecTransformer Inner (39)
                  :- ^ ProjectExecTransformer (36)
                  :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (35)
                  :     :- ^ FilterExecTransformer (32)
                  :     :  +- ^ Scan parquet spark_catalog.default.partsupp (31)
                  :     +- ^ InputIteratorTransformer (34)
                  :        +- ReusedExchange (33)
                  +- ^ InputIteratorTransformer (38)
                     +- ReusedExchange (37)


(31) Scan parquet spark_catalog.default.partsupp
Output [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/partsupp]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(32) FilterExecTransformer
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: isnotnull(ps_suppkey#X)

(33) ReusedExchange [Reuses operator id: 6]
Output [2]: [s_suppkey#X, s_nationkey#X]

(34) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(35) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join type: Inner
Join condition: None

(36) ProjectExecTransformer
Input [5]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]
Arguments: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]

(37) ReusedExchange [Reuses operator id: 14]
Output [1]: [n_nationkey#X]

(38) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(39) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(40) ProjectExecTransformer
Input [4]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X]
Arguments: [ps_availqty#X, ps_supplycost#X]

(41) FlushableHashAggregateExecTransformer
Input [2]: [ps_availqty#X, ps_supplycost#X]
Keys: []
Functions [1]: [partial_sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(42) WholeStageCodegenTransformer (X)
Input [2]: [sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project[expressions: (n11_1:DECIMAL(33, 2), "n10_0"["col_0"]), (n11_2:BOOLEAN, "n10_0"["col_1"])] -> n11_1:DECIMAL(33, 2), n11_2:BOOLEAN
  -- Aggregation[PARTIAL n10_0 := sum_partial("n9_2")] -> n10_0:ROW<col_0:DECIMAL(33, 2),col_1:BOOLEAN>
    -- Project[expressions: (n9_2:DECIMAL(23, 2), multiply("n8_5",try_cast "n8_4" as DECIMAL(10, 0)))] -> n9_2:DECIMAL(23, 2)
      -- Project[expressions: (n8_4:INTEGER, "n7_4"), (n8_5:DECIMAL(12, 2), "n7_5")] -> n8_4:INTEGER, n8_5:DECIMAL(12, 2)
        -- Project[expressions: (n7_4:INTEGER, "n5_5"), (n7_5:DECIMAL(12, 2), "n5_6"), (n7_6:BIGINT, "n5_7"), (n7_7:BIGINT, "n1_0")] -> n7_4:INTEGER, n7_5:DECIMAL(12, 2), n7_6:BIGINT, n7_7:BIGINT
          -- HashJoin[INNER n5_7=n1_0] -> n5_5:INTEGER, n5_6:DECIMAL(12, 2), n5_7:BIGINT, n1_0:BIGINT
            -- Project[expressions: (n5_5:INTEGER, "n4_6"), (n5_6:DECIMAL(12, 2), "n4_7"), (n5_7:BIGINT, "n4_9")] -> n5_5:INTEGER, n5_6:DECIMAL(12, 2), n5_7:BIGINT
              -- Project[expressions: (n4_5:BIGINT, "n2_0"), (n4_6:INTEGER, "n2_1"), (n4_7:DECIMAL(12, 2), "n2_2"), (n4_8:BIGINT, "n0_0"), (n4_9:BIGINT, "n0_1")] -> n4_5:BIGINT, n4_6:INTEGER, n4_7:DECIMAL(12, 2), n4_8:BIGINT, n4_9:BIGINT
                -- HashJoin[INNER n2_0=n0_0] -> n2_0:BIGINT, n2_1:INTEGER, n2_2:DECIMAL(12, 2), n0_0:BIGINT, n0_1:BIGINT
                  -- TableScan[table: hive_table, range filters: [(ps_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n2_0:BIGINT, n2_1:INTEGER, n2_2:DECIMAL(12, 2)
                  -- ValueStream[] -> n0_0:BIGINT, n0_1:BIGINT
            -- ValueStream[] -> n1_0:BIGINT

(43) ColumnarExchange
Input [2]: [sum#X, isEmpty#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(44) InputIteratorTransformer
Input [2]: [sum#X, isEmpty#X]

(45) RegularHashAggregateExecTransformer
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))]
Aggregate Attributes [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X]
Results [1]: [(sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X * 0.0001000000) AS (sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]

(46) WholeStageCodegenTransformer (X)
Input [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]
Arguments: false
Native Plan:
-- Project[expressions: (n3_1:DECIMAL(38, 6), multiply("n2_0",0.0001000000))] -> n3_1:DECIMAL(38, 6)
  -- Aggregation[SINGLE n2_0 := sum_merge_extract("n1_2")] -> n2_0:DECIMAL(33, 2)
    -- Project[expressions: (n1_2:ROW<col_0:DECIMAL(33, 2),col_1:BOOLEAN>, row_constructor("n0_0","n0_1"))] -> n1_2:ROW<col_0:DECIMAL(33, 2),col_1:BOOLEAN>
      -- ValueStream[] -> n0_0:DECIMAL(33, 2), n0_1:BOOLEAN

(47) VeloxColumnarToRowExec
Input [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]