== Physical Plan ==
VeloxColumnarToRowExec (31)
+- ^ RegularHashAggregateExecTransformer (29)
   +- ^ InputIteratorTransformer (28)
      +- ColumnarExchange (27)
         +- ^ FlushableHashAggregateExecTransformer (25)
            +- ^ ProjectExecTransformer (24)
               +- ^ ShuffledHashJoinExecTransformer Inner (23)
                  :- ^ InputIteratorTransformer (13)
                  :  +- ColumnarExchange (12)
                  :     +- ^ ProjectExecTransformer (10)
                  :        +- ^ GlutenBroadcastHashJoinExecTransformer Inner (9)
                  :           :- ^ FilterExecTransformer (2)
                  :           :  +- ^ Scan parquet spark_catalog.default.lineitem (1)
                  :           +- ^ InputIteratorTransformer (8)
                  :              +- ColumnarBroadcastExchange (7)
                  :                 +- ^ ProjectExecTransformer (5)
                  :                    +- ^ FilterExecTransformer (4)
                  :                       +- ^ Scan parquet spark_catalog.default.part (3)
                  +- ^ FilterExecTransformer (22)
                     +- ^ RegularHashAggregateExecTransformer (21)
                        +- ^ InputIteratorTransformer (20)
                           +- ColumnarExchange (19)
                              +- ^ ProjectExecTransformer (17)
                                 +- ^ FlushableHashAggregateExecTransformer (16)
                                    +- ^ FilterExecTransformer (15)
                                       +- ^ Scan parquet spark_catalog.default.lineitem (14)


(1) Scan parquet spark_catalog.default.lineitem
Output [3]: [l_partkey#7603L, l_quantity#7606, l_extendedprice#7607]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/lineitem]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_quantity)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2)>

(2) FilterExecTransformer
Input [3]: [l_partkey#7603L, l_quantity#7606, l_extendedprice#7607]
Arguments: (isnotnull(l_partkey#7603L) AND isnotnull(l_quantity#7606))

(3) Scan parquet spark_catalog.default.part
Output [3]: [p_partkey#7575L, p_container#7580, p_brand#7583]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/part]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_container), EqualTo(p_brand,Brand#23), EqualTo(p_container,MED BOX), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_container:string,p_brand:string>

(4) FilterExecTransformer
Input [3]: [p_partkey#7575L, p_container#7580, p_brand#7583]
Arguments: ((((isnotnull(p_brand#7583) AND isnotnull(p_container#7580)) AND (p_brand#7583 = Brand#23)) AND (p_container#7580 = MED BOX)) AND isnotnull(p_partkey#7575L))

(5) ProjectExecTransformer
Input [3]: [p_partkey#7575L, p_container#7580, p_brand#7583]
Arguments: [p_partkey#7575L]

(6) WholeStageCodegenTransformer (122)
Input [1]: [p_partkey#7575L]
Arguments: false
Native Plan:
-- Project
  -- TableScan

(7) ColumnarBroadcastExchange
Input [1]: [p_partkey#7575L]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=11677]

(8) InputIteratorTransformer
Input [1]: [p_partkey#7575L]

(9) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_partkey#7603L]
Right keys [1]: [p_partkey#7575L]
Join type: Inner
Join condition: None

(10) ProjectExecTransformer
Input [4]: [l_partkey#7603L, l_quantity#7606, l_extendedprice#7607, p_partkey#7575L]
Arguments: [hash(p_partkey#7575L, 42) AS hash_partition_key#7682, l_quantity#7606, l_extendedprice#7607, p_partkey#7575L]

(11) WholeStageCodegenTransformer (123)
Input [4]: [hash_partition_key#7682, l_quantity#7606, l_extendedprice#7607, p_partkey#7575L]
Arguments: false
Native Plan:
-- Project
  -- Project
    -- HashJoin
      -- TableScan
      -- ValueStream

(12) ColumnarExchange
Input [4]: [hash_partition_key#7682, l_quantity#7606, l_extendedprice#7607, p_partkey#7575L]
Arguments: hashpartitioning(p_partkey#7575L, 100), ENSURE_REQUIREMENTS, [l_quantity#7606, l_extendedprice#7607, p_partkey#7575L], [plan_id=11683], [id=#11683]

(13) InputIteratorTransformer
Input [3]: [l_quantity#7606, l_extendedprice#7607, p_partkey#7575L]

(14) Scan parquet spark_catalog.default.lineitem
Output [2]: [l_partkey#7657L, l_quantity#7660]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/lineitem]
PushedFilters: [IsNotNull(l_partkey)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2)>

(15) FilterExecTransformer
Input [2]: [l_partkey#7657L, l_quantity#7660]
Arguments: isnotnull(l_partkey#7657L)

(16) FlushableHashAggregateExecTransformer
Input [2]: [l_partkey#7657L, l_quantity#7660]
Keys [1]: [l_partkey#7657L]
Functions [1]: [partial_avg(l_quantity#7660)]
Aggregate Attributes [2]: [sum#7678, count#7679L]
Results [3]: [l_partkey#7657L, sum#7680, count#7681L]

(17) ProjectExecTransformer
Input [3]: [l_partkey#7657L, sum#7680, count#7681L]
Arguments: [hash(l_partkey#7657L, 42) AS hash_partition_key#7683, l_partkey#7657L, sum#7680, count#7681L]

(18) WholeStageCodegenTransformer (124)
Input [4]: [hash_partition_key#7683, l_partkey#7657L, sum#7680, count#7681L]
Arguments: false
Native Plan:
-- Project
  -- Project
    -- Aggregation
      -- TableScan

(19) ColumnarExchange
Input [4]: [hash_partition_key#7683, l_partkey#7657L, sum#7680, count#7681L]
Arguments: hashpartitioning(l_partkey#7657L, 100), ENSURE_REQUIREMENTS, [l_partkey#7657L, sum#7680, count#7681L], [plan_id=11687], [id=#11687]

(20) InputIteratorTransformer
Input [3]: [l_partkey#7657L, sum#7680, count#7681L]

(21) RegularHashAggregateExecTransformer
Input [3]: [l_partkey#7657L, sum#7680, count#7681L]
Keys [1]: [l_partkey#7657L]
Functions [1]: [avg(l_quantity#7660)]
Aggregate Attributes [1]: [avg(l_quantity#7660)#7653]
Results [2]: [(0.2 * avg(l_quantity#7660)#7653) AS (0.2 * avg(l_quantity))#7654, l_partkey#7657L]

(22) FilterExecTransformer
Input [2]: [(0.2 * avg(l_quantity))#7654, l_partkey#7657L]
Arguments: isnotnull((0.2 * avg(l_quantity))#7654)

(23) ShuffledHashJoinExecTransformer
Left keys [1]: [p_partkey#7575L]
Right keys [1]: [l_partkey#7657L]
Join type: Inner
Join condition: (cast(l_quantity#7606 as decimal(18,7)) < (0.2 * avg(l_quantity))#7654)

(24) ProjectExecTransformer
Input [5]: [l_quantity#7606, l_extendedprice#7607, p_partkey#7575L, (0.2 * avg(l_quantity))#7654, l_partkey#7657L]
Arguments: [l_extendedprice#7607]

(25) FlushableHashAggregateExecTransformer
Input [1]: [l_extendedprice#7607]
Keys: []
Functions [1]: [partial_sum(l_extendedprice#7607)]
Aggregate Attributes [2]: [sum#7674, isEmpty#7675]
Results [2]: [sum#7676, isEmpty#7677]

(26) WholeStageCodegenTransformer (125)
Input [2]: [sum#7676, isEmpty#7677]
Arguments: false
Native Plan:
-- Project
  -- Aggregation
    -- Project
      -- Project
        -- HashJoin
          -- ValueStream
          -- Filter
            -- Project
              -- Aggregation
                -- Project
                  -- ValueStream

(27) ColumnarExchange
Input [2]: [sum#7676, isEmpty#7677]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11696], [id=#11696]

(28) InputIteratorTransformer
Input [2]: [sum#7676, isEmpty#7677]

(29) RegularHashAggregateExecTransformer
Input [2]: [sum#7676, isEmpty#7677]
Keys: []
Functions [1]: [sum(l_extendedprice#7607)]
Aggregate Attributes [1]: [sum(l_extendedprice#7607)#7672]
Results [1]: [(sum(l_extendedprice#7607)#7672 / 7.0) AS avg_yearly#7650]

(30) WholeStageCodegenTransformer (126)
Input [1]: [avg_yearly#7650]
Arguments: false
Native Plan:
-- Project
  -- Aggregation
    -- Project
      -- ValueStream

(31) VeloxColumnarToRowExec
Input [1]: [avg_yearly#7650]

