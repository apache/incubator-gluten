== Physical Plan ==
VeloxColumnarToRowExec (27)
+- ^ SortExecTransformer (25)
   +- ^ InputIteratorTransformer (24)
      +- ColumnarExchange (23)
         +- ^ RegularHashAggregateExecTransformer (21)
            +- ^ InputIteratorTransformer (20)
               +- ColumnarExchange (19)
                  +- ^ ProjectExecTransformer (17)
                     +- ^ FlushableHashAggregateExecTransformer (16)
                        +- ^ RegularHashAggregateExecTransformer (15)
                           +- ^ RegularHashAggregateExecTransformer (14)
                              +- ^ ProjectExecTransformer (13)
                                 +- ^ ShuffledHashJoinExecTransformer LeftOuter (12)
                                    :- ^ InputIteratorTransformer (5)
                                    :  +- ColumnarExchange (4)
                                    :     +- ^ ProjectExecTransformer (2)
                                    :        +- ^ Scan parquet spark_catalog.default.customer (1)
                                    +- ^ InputIteratorTransformer (11)
                                       +- ColumnarExchange (10)
                                          +- ^ ProjectExecTransformer (8)
                                             +- ^ FilterExecTransformer (7)
                                                +- ^ Scan parquet spark_catalog.default.orders (6)


(1) Scan parquet spark_catalog.default.customer
Output [1]: [c_custkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/customer]
ReadSchema: struct<c_custkey:bigint>

(2) ProjectExecTransformer
Input [1]: [c_custkey#X]
Arguments: [hash(c_custkey#X, 42) AS hash_partition_key#X, hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X]

(3) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, hash_partition_key#X, c_custkey#X]
Arguments: false
Native Plan:
-- Project
  -- TableScan

(4) ColumnarExchange
Input [3]: [hash_partition_key#X, hash_partition_key#X, c_custkey#X]
Arguments: hashpartitioning(c_custkey#X, 100), ENSURE_REQUIREMENTS, [hash_partition_key#X, c_custkey#X], [plan_id=X], [id=#X]

(5) InputIteratorTransformer
Input [2]: [hash_partition_key#X, c_custkey#X]

(6) Scan parquet spark_catalog.default.orders
Output [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/orders]
PushedFilters: [IsNotNull(o_comment), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_comment:string>

(7) FilterExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Arguments: ((isnotnull(o_comment#X) AND NOT o_comment#X LIKE %special%requests%) AND isnotnull(o_custkey#X))

(8) ProjectExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Arguments: [hash(o_custkey#X, 42) AS hash_partition_key#X, hash(o_custkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X]

(9) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: false
Native Plan:
-- Project
  -- TableScan

(10) ColumnarExchange
Input [4]: [hash_partition_key#X, hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 100), ENSURE_REQUIREMENTS, [hash_partition_key#X, o_orderkey#X, o_custkey#X], [plan_id=X], [id=#X]

(11) InputIteratorTransformer
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]

(12) ShuffledHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: LeftOuter
Join condition: None

(13) ProjectExecTransformer
Input [5]: [hash_partition_key#X, c_custkey#X, hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: [c_custkey#X, o_orderkey#X]

(14) RegularHashAggregateExecTransformer
Input [2]: [c_custkey#X, o_orderkey#X]
Keys [1]: [c_custkey#X]
Functions [1]: [partial_count(o_orderkey#X)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_custkey#X, count#X]

(15) RegularHashAggregateExecTransformer
Input [2]: [c_custkey#X, count#X]
Keys [1]: [c_custkey#X]
Functions [1]: [count(o_orderkey#X)]
Aggregate Attributes [1]: [count(o_orderkey#X)#X]
Results [1]: [count(o_orderkey#X)#X AS c_count#X]

(16) FlushableHashAggregateExecTransformer
Input [1]: [c_count#X]
Keys [1]: [c_count#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_count#X, count#X]

(17) ProjectExecTransformer
Input [2]: [c_count#X, count#X]
Arguments: [hash(c_count#X, 42) AS hash_partition_key#X, c_count#X, count#X]

(18) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: false
Native Plan:
-- Project
  -- Aggregation
    -- Project
      -- Aggregation
        -- Aggregation
          -- Project
            -- Project
              -- HashJoin
                -- ValueStream
                -- ValueStream

(19) ColumnarExchange
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: hashpartitioning(c_count#X, 100), ENSURE_REQUIREMENTS, [c_count#X, count#X], [plan_id=X], [id=#X]

(20) InputIteratorTransformer
Input [2]: [c_count#X, count#X]

(21) RegularHashAggregateExecTransformer
Input [2]: [c_count#X, count#X]
Keys [1]: [c_count#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [c_count#X, count(1)#X AS custdist#X]

(22) WholeStageCodegenTransformer (X)
Input [2]: [c_count#X, custdist#X]
Arguments: false
Native Plan:
-- Project
  -- Aggregation
    -- ValueStream

(23) ColumnarExchange
Input [2]: [c_count#X, custdist#X]
Arguments: rangepartitioning(custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST, 100), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(24) InputIteratorTransformer
Input [2]: [c_count#X, custdist#X]

(25) SortExecTransformer
Input [2]: [c_count#X, custdist#X]
Arguments: [custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST], true, 0

(26) WholeStageCodegenTransformer (X)
Input [2]: [c_count#X, custdist#X]
Arguments: false
Native Plan:
-- OrderBy
  -- ValueStream

(27) VeloxColumnarToRowExec
Input [2]: [c_count#X, custdist#X]

