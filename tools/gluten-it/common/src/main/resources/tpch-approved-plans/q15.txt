== Physical Plan ==
AdaptiveSparkPlan (40)
+- == Final Plan ==
   VeloxColumnarToRowExec (25)
   +- AQEShuffleRead (24)
      +- ShuffleQueryStage (23), Statistics(X)
         +- ColumnarExchange (22)
            +- ^ ProjectExecTransformer (20)
               +- ^ GlutenBroadcastHashJoinExecTransformer Inner (19)
                  :- ^ InputIteratorTransformer (6)
                  :  +- BroadcastQueryStage (5), Statistics(X)
                  :     +- ColumnarBroadcastExchange (4)
                  :        +- ^ FilterExecTransformer (2)
                  :           +- ^ Scan parquet default.supplier (1)
                  +- ^ FilterExecTransformer (18)
                     +- ^ RegularHashAggregateExecTransformer (17)
                        +- ^ InputIteratorTransformer (16)
                           +- AQEShuffleRead (15)
                              +- ShuffleQueryStage (14), Statistics(X)
                                 +- ColumnarExchange (13)
                                    +- ^ ProjectExecTransformer (11)
                                       +- ^ FlushableHashAggregateExecTransformer (10)
                                          +- ^ ProjectExecTransformer (9)
                                             +- ^ FilterExecTransformer (8)
                                                +- ^ Scan parquet default.lineitem (7)
+- == Initial Plan ==
   Sort (39)
   +- Exchange (38)
      +- Project (37)
         +- BroadcastHashJoin Inner BuildLeft (36)
            :- BroadcastExchange (28)
            :  +- Filter (27)
            :     +- Scan parquet default.supplier (26)
            +- Filter (35)
               +- HashAggregate (34)
                  +- Exchange (33)
                     +- HashAggregate (32)
                        +- Project (31)
                           +- Filter (30)
                              +- Scan parquet default.lineitem (29)


(1) Scan parquet default.supplier
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_phone:string>

(2) FilterExecTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Arguments: isnotnull(s_suppkey#X)

(3) WholeStageCodegenTransformer (X)
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(s_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:VARCHAR, n0_2:VARCHAR, n0_3:VARCHAR

(4) ColumnarBroadcastExchange
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(5) BroadcastQueryStage
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Arguments: 0

(6) InputIteratorTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]

(7) Scan parquet default.lineitem
Output [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01), IsNotNull(l_suppkey)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(8) FilterExecTransformer
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: (((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1996-01-01)) AND (l_shipdate#X < 1996-04-01)) AND isnotnull(l_suppkey#X))

(9) ProjectExecTransformer
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: [l_suppkey#X, l_extendedprice#X, l_discount#X]

(10) FlushableHashAggregateExecTransformer
Input [3]: [l_suppkey#X, l_extendedprice#X, l_discount#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_suppkey#X, sum#X, isEmpty#X]

(11) ProjectExecTransformer
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: [hash(l_suppkey#X, 42) AS hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]

(12) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project[expressions: (n5_3:INTEGER, hash_with_seed(42,"n4_2")), (n5_4:BIGINT, "n4_2"), (n5_5:DECIMAL(36, 4), "n4_3"), (n5_6:BOOLEAN, "n4_4")] -> n5_3:INTEGER, n5_4:BIGINT, n5_5:DECIMAL(36, 4), n5_6:BOOLEAN
  -- Project[expressions: (n4_2:BIGINT, "n2_3"), (n4_3:DECIMAL(36, 4), "n3_1"["col_0"]), (n4_4:BOOLEAN, "n3_1"["col_1"])] -> n4_2:BIGINT, n4_3:DECIMAL(36, 4), n4_4:BOOLEAN
    -- Aggregation[PARTIAL [n2_3] n3_1 := sum_partial("n2_4")] -> n2_3:BIGINT, n3_1:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>
      -- Project[expressions: (n2_3:BIGINT, "n1_4"), (n2_4:DECIMAL(26, 4), try_cast multiply("n1_5",try_cast subtract(try_cast 1.00 as DECIMAL(1, 0),"n1_6") as DECIMAL(13, 2)) as DECIMAL(26, 4))] -> n2_3:BIGINT, n2_4:DECIMAL(26, 4)
        -- Project[expressions: (n1_4:BIGINT, "n0_0"), (n1_5:DECIMAL(12, 2), "n0_1"), (n1_6:DECIMAL(12, 2), "n0_2")] -> n1_4:BIGINT, n1_5:DECIMAL(12, 2), n1_6:DECIMAL(12, 2)
          -- TableScan[table: hive_table, range filters: [(l_shipdate, BigintRange: [9496, 9586] no nulls), (l_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:DECIMAL(12, 2), n0_2:DECIMAL(12, 2), n0_3:DATE

(13) ColumnarExchange
Input [4]: [hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_suppkey#X, 100), ENSURE_REQUIREMENTS, [l_suppkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: 1

(15) AQEShuffleRead
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: coalesced

(16) InputIteratorTransformer
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]

(17) RegularHashAggregateExecTransformer
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X]
Results [2]: [l_suppkey#X AS supplier_no#X, sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X AS total_revenue#X]

(18) FilterExecTransformer
Input [2]: [supplier_no#X, total_revenue#X]
Arguments: (isnotnull(total_revenue#X) AND (total_revenue#X = Subquery subquery#X, [id=#X]))

(19) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [supplier_no#X]
Join condition: None

(20) ProjectExecTransformer
Input [6]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, supplier_no#X, total_revenue#X]
Arguments: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]

(21) WholeStageCodegenTransformer (X)
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: false
Native Plan:
-- Project[expressions: (n8_6:BIGINT, "n7_6"), (n8_7:VARCHAR, "n7_7"), (n8_8:VARCHAR, "n7_8"), (n8_9:VARCHAR, "n7_9"), (n8_10:DECIMAL(36, 4), "n7_11")] -> n8_6:BIGINT, n8_7:VARCHAR, n8_8:VARCHAR, n8_9:VARCHAR, n8_10:DECIMAL(36, 4)
  -- Project[expressions: (n7_6:BIGINT, "n1_0"), (n7_7:VARCHAR, "n1_1"), (n7_8:VARCHAR, "n1_2"), (n7_9:VARCHAR, "n1_3"), (n7_10:BIGINT, "n4_2"), (n7_11:DECIMAL(36, 4), "n4_3")] -> n7_6:BIGINT, n7_7:VARCHAR, n7_8:VARCHAR, n7_9:VARCHAR, n7_10:BIGINT, n7_11:DECIMAL(36, 4)
    -- HashJoin[INNER n4_2=n1_0] -> n4_2:BIGINT, n4_3:DECIMAL(36, 4), n1_0:BIGINT, n1_1:VARCHAR, n1_2:VARCHAR, n1_3:VARCHAR
      -- Filter[expression: and(isnotnull("n4_3"),decimal_equalto("n4_3",1614410.2928))] -> n4_2:BIGINT, n4_3:DECIMAL(36, 4)
        -- Project[expressions: (n4_2:BIGINT, "n2_3"), (n4_3:DECIMAL(36, 4), "n3_1")] -> n4_2:BIGINT, n4_3:DECIMAL(36, 4)
          -- Aggregation[SINGLE [n2_3] n3_1 := sum_merge_extract("n2_4")] -> n2_3:BIGINT, n3_1:DECIMAL(36, 4)
            -- Project[expressions: (n2_3:BIGINT, "n0_0"), (n2_4:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>, row_constructor("n0_1","n0_2"))] -> n2_3:BIGINT, n2_4:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>
              -- ValueStream[] -> n0_0:BIGINT, n0_1:DECIMAL(36, 4), n0_2:BOOLEAN
      -- ValueStream[] -> n1_0:BIGINT, n1_1:VARCHAR, n1_2:VARCHAR, n1_3:VARCHAR

(22) ColumnarExchange
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: rangepartitioning(s_suppkey#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(23) ShuffleQueryStage
Output [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: 2

(24) AQEShuffleRead
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: local

(25) VeloxColumnarToRowExec
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]

(26) Scan parquet default.supplier
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_phone:string>

(27) Filter
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Condition : isnotnull(s_suppkey#X)

(28) BroadcastExchange
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(29) Scan parquet default.lineitem
Output [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01), IsNotNull(l_suppkey)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(30) Filter
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Condition : (((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1996-01-01)) AND (l_shipdate#X < 1996-04-01)) AND isnotnull(l_suppkey#X))

(31) Project
Output [3]: [l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(32) HashAggregate
Input [3]: [l_suppkey#X, l_extendedprice#X, l_discount#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_suppkey#X, sum#X, isEmpty#X]

(33) Exchange
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_suppkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(34) HashAggregate
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X]
Results [2]: [l_suppkey#X AS supplier_no#X, sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X AS total_revenue#X]

(35) Filter
Input [2]: [supplier_no#X, total_revenue#X]
Condition : (isnotnull(total_revenue#X) AND (total_revenue#X = Subquery subquery#X, [id=#X]))

(36) BroadcastHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [supplier_no#X]
Join condition: None

(37) Project
Output [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Input [6]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, supplier_no#X, total_revenue#X]

(38) Exchange
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: rangepartitioning(s_suppkey#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(39) Sort
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: [s_suppkey#X ASC NULLS FIRST], true, 0

(40) AdaptiveSparkPlan
Output [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 18 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (69)
+- == Final Plan ==
   VeloxColumnarToRowExec (59)
   +- ^ RegularHashAggregateExecTransformer (57)
      +- ^ InputIteratorTransformer (56)
         +- ShuffleQueryStage (55), Statistics(X)
            +- ColumnarExchange (54)
               +- ^ FlushableHashAggregateExecTransformer (52)
                  +- ^ RegularHashAggregateExecTransformer (51)
                     +- ^ InputIteratorTransformer (50)
                        +- AQEShuffleRead (49)
                           +- ShuffleQueryStage (48), Statistics(X)
                              +- ColumnarExchange (47)
                                 +- ^ ProjectExecTransformer (45)
                                    +- ^ FlushableHashAggregateExecTransformer (44)
                                       +- ^ ProjectExecTransformer (43)
                                          +- ^ FilterExecTransformer (42)
                                             +- ^ Scan parquet default.lineitem (41)
+- == Initial Plan ==
   HashAggregate (68)
   +- Exchange (67)
      +- HashAggregate (66)
         +- HashAggregate (65)
            +- Exchange (64)
               +- HashAggregate (63)
                  +- Project (62)
                     +- Filter (61)
                        +- Scan parquet default.lineitem (60)


(41) Scan parquet default.lineitem
Output [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(42) FilterExecTransformer
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: ((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1996-01-01)) AND (l_shipdate#X < 1996-04-01))

(43) ProjectExecTransformer
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: [l_suppkey#X, l_extendedprice#X, l_discount#X]

(44) FlushableHashAggregateExecTransformer
Input [3]: [l_suppkey#X, l_extendedprice#X, l_discount#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_suppkey#X, sum#X, isEmpty#X]

(45) ProjectExecTransformer
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: [hash(l_suppkey#X, 42) AS hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]

(46) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project[expressions: (n5_3:INTEGER, hash_with_seed(42,"n4_2")), (n5_4:BIGINT, "n4_2"), (n5_5:DECIMAL(36, 4), "n4_3"), (n5_6:BOOLEAN, "n4_4")] -> n5_3:INTEGER, n5_4:BIGINT, n5_5:DECIMAL(36, 4), n5_6:BOOLEAN
  -- Project[expressions: (n4_2:BIGINT, "n2_3"), (n4_3:DECIMAL(36, 4), "n3_1"["col_0"]), (n4_4:BOOLEAN, "n3_1"["col_1"])] -> n4_2:BIGINT, n4_3:DECIMAL(36, 4), n4_4:BOOLEAN
    -- Aggregation[PARTIAL [n2_3] n3_1 := sum_partial("n2_4")] -> n2_3:BIGINT, n3_1:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>
      -- Project[expressions: (n2_3:BIGINT, "n1_4"), (n2_4:DECIMAL(26, 4), try_cast multiply("n1_5",try_cast subtract(try_cast 1.00 as DECIMAL(1, 0),"n1_6") as DECIMAL(13, 2)) as DECIMAL(26, 4))] -> n2_3:BIGINT, n2_4:DECIMAL(26, 4)
        -- Project[expressions: (n1_4:BIGINT, "n0_0"), (n1_5:DECIMAL(12, 2), "n0_1"), (n1_6:DECIMAL(12, 2), "n0_2")] -> n1_4:BIGINT, n1_5:DECIMAL(12, 2), n1_6:DECIMAL(12, 2)
          -- TableScan[table: hive_table, range filters: [(l_shipdate, BigintRange: [9496, 9586] no nulls)]] -> n0_0:BIGINT, n0_1:DECIMAL(12, 2), n0_2:DECIMAL(12, 2), n0_3:DATE

(47) ColumnarExchange
Input [4]: [hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_suppkey#X, 100), ENSURE_REQUIREMENTS, [l_suppkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(48) ShuffleQueryStage
Output [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: 0

(49) AQEShuffleRead
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: coalesced

(50) InputIteratorTransformer
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]

(51) RegularHashAggregateExecTransformer
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X]
Results [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X AS total_revenue#X]

(52) FlushableHashAggregateExecTransformer
Input [1]: [total_revenue#X]
Keys: []
Functions [1]: [partial_max(total_revenue#X)]
Aggregate Attributes [1]: [max#X]
Results [1]: [max#X]

(53) WholeStageCodegenTransformer (X)
Input [1]: [max#X]
Arguments: false
Native Plan:
-- Aggregation[PARTIAL n4_0 := max_partial("n3_2")] -> n4_0:DECIMAL(36, 4)
  -- Project[expressions: (n3_2:DECIMAL(36, 4), "n2_1")] -> n3_2:DECIMAL(36, 4)
    -- Aggregation[SINGLE [n1_3] n2_1 := sum_merge_extract("n1_4")] -> n1_3:BIGINT, n2_1:DECIMAL(36, 4)
      -- Project[expressions: (n1_3:BIGINT, "n0_0"), (n1_4:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>, row_constructor("n0_1","n0_2"))] -> n1_3:BIGINT, n1_4:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>
        -- ValueStream[] -> n0_0:BIGINT, n0_1:DECIMAL(36, 4), n0_2:BOOLEAN

(54) ColumnarExchange
Input [1]: [max#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(55) ShuffleQueryStage
Output [1]: [max#X]
Arguments: 1

(56) InputIteratorTransformer
Input [1]: [max#X]

(57) RegularHashAggregateExecTransformer
Input [1]: [max#X]
Keys: []
Functions [1]: [max(total_revenue#X)]
Aggregate Attributes [1]: [max(total_revenue#X)#X]
Results [1]: [max(total_revenue#X)#X AS max(total_revenue)#X]

(58) WholeStageCodegenTransformer (X)
Input [1]: [max(total_revenue)#X]
Arguments: false
Native Plan:
-- Project[expressions: (n2_1:DECIMAL(36, 4), "n1_0")] -> n2_1:DECIMAL(36, 4)
  -- Aggregation[SINGLE n1_0 := max_merge_extract("n0_0")] -> n1_0:DECIMAL(36, 4)
    -- ValueStream[] -> n0_0:DECIMAL(36, 4)

(59) VeloxColumnarToRowExec
Input [1]: [max(total_revenue)#X]

(60) Scan parquet default.lineitem
Output [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(61) Filter
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Condition : ((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1996-01-01)) AND (l_shipdate#X < 1996-04-01))

(62) Project
Output [3]: [l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(63) HashAggregate
Input [3]: [l_suppkey#X, l_extendedprice#X, l_discount#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_suppkey#X, sum#X, isEmpty#X]

(64) Exchange
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_suppkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(65) HashAggregate
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X]
Results [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X AS total_revenue#X]

(66) HashAggregate
Input [1]: [total_revenue#X]
Keys: []
Functions [1]: [partial_max(total_revenue#X)]
Aggregate Attributes [1]: [max#X]
Results [1]: [max#X]

(67) Exchange
Input [1]: [max#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X]

(68) HashAggregate
Input [1]: [max#X]
Keys: []
Functions [1]: [max(total_revenue#X)]
Aggregate Attributes [1]: [max(total_revenue#X)#X]
Results [1]: [max(total_revenue#X)#X AS max(total_revenue)#X]

(69) AdaptiveSparkPlan
Output [1]: [max(total_revenue)#X]
Arguments: isFinalPlan=true
