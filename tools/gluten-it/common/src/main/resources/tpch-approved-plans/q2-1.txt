== Physical Plan ==
AdaptiveSparkPlan (134)
+- == Final Plan ==
   VeloxColumnarToRowExec (82)
   +- TakeOrderedAndProjectExecTransformer (81)
      +- ^ ProjectExecTransformer (79)
         +- ^ GlutenBroadcastHashJoinExecTransformer Inner (78)
            :- ^ ProjectExecTransformer (74)
            :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (73)
            :     :- ^ ProjectExecTransformer (66)
            :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (65)
            :     :     :- ^ ProjectExecTransformer (58)
            :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (57)
            :     :     :     :- ^ InputIteratorTransformer (16)
            :     :     :     :  +- AQEShuffleRead (15)
            :     :     :     :     +- ShuffleQueryStage (14), Statistics(X)
            :     :     :     :        +- ColumnarExchange (13)
            :     :     :     :           +- ^ ProjectExecTransformer (11)
            :     :     :     :              +- ^ GlutenBroadcastHashJoinExecTransformer Inner (10)
            :     :     :     :                 :- ^ InputIteratorTransformer (7)
            :     :     :     :                 :  +- BroadcastQueryStage (6), Statistics(X)
            :     :     :     :                 :     +- ColumnarBroadcastExchange (5)
            :     :     :     :                 :        +- ^ ProjectExecTransformer (3)
            :     :     :     :                 :           +- ^ FilterExecTransformer (2)
            :     :     :     :                 :              +- ^ Scan parquet default.part (1)
            :     :     :     :                 +- ^ FilterExecTransformer (9)
            :     :     :     :                    +- ^ Scan parquet default.partsupp (8)
            :     :     :     +- ^ InputIteratorTransformer (56)
            :     :     :        +- BroadcastQueryStage (55), Statistics(X)
            :     :     :           +- ColumnarBroadcastExchange (54)
            :     :     :              +- ^ FilterExecTransformer (52)
            :     :     :                 +- ^ RegularHashAggregateExecTransformer (51)
            :     :     :                    +- ^ InputIteratorTransformer (50)
            :     :     :                       +- AQEShuffleRead (49)
            :     :     :                          +- ShuffleQueryStage (48), Statistics(X)
            :     :     :                             +- ColumnarExchange (47)
            :     :     :                                +- ^ ProjectExecTransformer (45)
            :     :     :                                   +- ^ FlushableHashAggregateExecTransformer (44)
            :     :     :                                      +- ^ ProjectExecTransformer (43)
            :     :     :                                         +- ^ GlutenBroadcastHashJoinExecTransformer Inner (42)
            :     :     :                                            :- ^ ProjectExecTransformer (34)
            :     :     :                                            :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (33)
            :     :     :                                            :     :- ^ ProjectExecTransformer (26)
            :     :     :                                            :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (25)
            :     :     :                                            :     :     :- ^ FilterExecTransformer (18)
            :     :     :                                            :     :     :  +- ^ Scan parquet default.partsupp (17)
            :     :     :                                            :     :     +- ^ InputIteratorTransformer (24)
            :     :     :                                            :     :        +- BroadcastQueryStage (23), Statistics(X)
            :     :     :                                            :     :           +- ColumnarBroadcastExchange (22)
            :     :     :                                            :     :              +- ^ FilterExecTransformer (20)
            :     :     :                                            :     :                 +- ^ Scan parquet default.supplier (19)
            :     :     :                                            :     +- ^ InputIteratorTransformer (32)
            :     :     :                                            :        +- BroadcastQueryStage (31), Statistics(X)
            :     :     :                                            :           +- ColumnarBroadcastExchange (30)
            :     :     :                                            :              +- ^ FilterExecTransformer (28)
            :     :     :                                            :                 +- ^ Scan parquet default.nation (27)
            :     :     :                                            +- ^ InputIteratorTransformer (41)
            :     :     :                                               +- BroadcastQueryStage (40), Statistics(X)
            :     :     :                                                  +- ColumnarBroadcastExchange (39)
            :     :     :                                                     +- ^ ProjectExecTransformer (37)
            :     :     :                                                        +- ^ FilterExecTransformer (36)
            :     :     :                                                           +- ^ Scan parquet default.region (35)
            :     :     +- ^ InputIteratorTransformer (64)
            :     :        +- BroadcastQueryStage (63), Statistics(X)
            :     :           +- ColumnarBroadcastExchange (62)
            :     :              +- ^ FilterExecTransformer (60)
            :     :                 +- ^ Scan parquet default.supplier (59)
            :     +- ^ InputIteratorTransformer (72)
            :        +- BroadcastQueryStage (71), Statistics(X)
            :           +- ColumnarBroadcastExchange (70)
            :              +- ^ FilterExecTransformer (68)
            :                 +- ^ Scan parquet default.nation (67)
            +- ^ InputIteratorTransformer (77)
               +- BroadcastQueryStage (76), Statistics(X)
                  +- ReusedExchange (75)
+- == Initial Plan ==
   TakeOrderedAndProject (133)
   +- Project (132)
      +- BroadcastHashJoin Inner BuildRight (131)
         :- Project (126)
         :  +- BroadcastHashJoin Inner BuildRight (125)
         :     :- Project (121)
         :     :  +- BroadcastHashJoin Inner BuildRight (120)
         :     :     :- Project (116)
         :     :     :  +- ShuffledHashJoin Inner BuildLeft (115)
         :     :     :     :- Exchange (91)
         :     :     :     :  +- Project (90)
         :     :     :     :     +- BroadcastHashJoin Inner BuildLeft (89)
         :     :     :     :        :- BroadcastExchange (86)
         :     :     :     :        :  +- Project (85)
         :     :     :     :        :     +- Filter (84)
         :     :     :     :        :        +- Scan parquet default.part (83)
         :     :     :     :        +- Filter (88)
         :     :     :     :           +- Scan parquet default.partsupp (87)
         :     :     :     +- Exchange (114)
         :     :     :        +- Filter (113)
         :     :     :           +- HashAggregate (112)
         :     :     :              +- Exchange (111)
         :     :     :                 +- HashAggregate (110)
         :     :     :                    +- Project (109)
         :     :     :                       +- BroadcastHashJoin Inner BuildRight (108)
         :     :     :                          :- Project (103)
         :     :     :                          :  +- BroadcastHashJoin Inner BuildRight (102)
         :     :     :                          :     :- Project (98)
         :     :     :                          :     :  +- BroadcastHashJoin Inner BuildRight (97)
         :     :     :                          :     :     :- Filter (93)
         :     :     :                          :     :     :  +- Scan parquet default.partsupp (92)
         :     :     :                          :     :     +- BroadcastExchange (96)
         :     :     :                          :     :        +- Filter (95)
         :     :     :                          :     :           +- Scan parquet default.supplier (94)
         :     :     :                          :     +- BroadcastExchange (101)
         :     :     :                          :        +- Filter (100)
         :     :     :                          :           +- Scan parquet default.nation (99)
         :     :     :                          +- BroadcastExchange (107)
         :     :     :                             +- Project (106)
         :     :     :                                +- Filter (105)
         :     :     :                                   +- Scan parquet default.region (104)
         :     :     +- BroadcastExchange (119)
         :     :        +- Filter (118)
         :     :           +- Scan parquet default.supplier (117)
         :     +- BroadcastExchange (124)
         :        +- Filter (123)
         :           +- Scan parquet default.nation (122)
         +- BroadcastExchange (130)
            +- Project (129)
               +- Filter (128)
                  +- Scan parquet default.region (127)


(1) Scan parquet default.part
Output [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,15), StringEndsWith(p_type,BRASS), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>

(2) FilterExecTransformer
Input [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]
Arguments: ((((isnotnull(p_size#X) AND isnotnull(p_type#X)) AND (p_size#X = 15)) AND EndsWith(p_type#X, BRASS)) AND isnotnull(p_partkey#X))

(3) ProjectExecTransformer
Input [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]
Arguments: [p_partkey#X, p_mfgr#X]

(4) WholeStageCodegenTransformer (X)
Input [2]: [p_partkey#X, p_mfgr#X]
Arguments: false

(5) ColumnarBroadcastExchange
Input [2]: [p_partkey#X, p_mfgr#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(6) BroadcastQueryStage
Output [2]: [p_partkey#X, p_mfgr#X]
Arguments: 0

(7) InputIteratorTransformer
Input [2]: [p_partkey#X, p_mfgr#X]

(8) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(9) FilterExecTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: ((isnotnull(ps_partkey#X) AND isnotnull(ps_supplycost#X)) AND isnotnull(ps_suppkey#X))

(10) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [ps_partkey#X]
Join condition: None

(11) ProjectExecTransformer
Input [5]: [p_partkey#X, p_mfgr#X, ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: [hash(ps_supplycost#X, p_partkey#X, 42) AS hash_partition_key#X, p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]

(12) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: false

(13) ColumnarExchange
Input [5]: [hash_partition_key#X, p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_supplycost#X, p_partkey#X, 100), ENSURE_REQUIREMENTS, [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: 9

(15) AQEShuffleRead
Input [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: local

(16) InputIteratorTransformer
Input [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]

(17) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(18) FilterExecTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: (isnotnull(ps_suppkey#X) AND isnotnull(ps_partkey#X))

(19) Scan parquet default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(20) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(21) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false

(22) ColumnarBroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(23) BroadcastQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: 1

(24) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(25) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(26) ProjectExecTransformer
Input [5]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]
Arguments: [ps_partkey#X, ps_supplycost#X, s_nationkey#X]

(27) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(28) FilterExecTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(29) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: false

(30) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(31) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_regionkey#X]
Arguments: 2

(32) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]

(33) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(34) ProjectExecTransformer
Input [5]: [ps_partkey#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X, n_regionkey#X]
Arguments: [ps_partkey#X, ps_supplycost#X, n_regionkey#X]

(35) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(36) FilterExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: ((isnotnull(r_name#X) AND (r_name#X = EUROPE)) AND isnotnull(r_regionkey#X))

(37) ProjectExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: [r_regionkey#X]

(38) WholeStageCodegenTransformer (X)
Input [1]: [r_regionkey#X]
Arguments: false

(39) ColumnarBroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(40) BroadcastQueryStage
Output [1]: [r_regionkey#X]
Arguments: 3

(41) InputIteratorTransformer
Input [1]: [r_regionkey#X]

(42) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(43) ProjectExecTransformer
Input [4]: [ps_partkey#X, ps_supplycost#X, n_regionkey#X, r_regionkey#X]
Arguments: [ps_partkey#X, ps_supplycost#X]

(44) FlushableHashAggregateExecTransformer
Input [2]: [ps_partkey#X, ps_supplycost#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [partial_min(ps_supplycost#X)]
Aggregate Attributes [1]: [min#X]
Results [2]: [ps_partkey#X, min#X]

(45) ProjectExecTransformer
Input [2]: [ps_partkey#X, min#X]
Arguments: [hash(ps_partkey#X, 42) AS hash_partition_key#X, ps_partkey#X, min#X]

(46) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, ps_partkey#X, min#X]
Arguments: false

(47) ColumnarExchange
Input [3]: [hash_partition_key#X, ps_partkey#X, min#X]
Arguments: hashpartitioning(ps_partkey#X, 100), ENSURE_REQUIREMENTS, [ps_partkey#X, min#X], [plan_id=X], [id=#X]

(48) ShuffleQueryStage
Output [2]: [ps_partkey#X, min#X]
Arguments: 8

(49) AQEShuffleRead
Input [2]: [ps_partkey#X, min#X]
Arguments: coalesced

(50) InputIteratorTransformer
Input [2]: [ps_partkey#X, min#X]

(51) RegularHashAggregateExecTransformer
Input [2]: [ps_partkey#X, min#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [min(ps_supplycost#X)]
Aggregate Attributes [1]: [min(ps_supplycost#X)#X]
Results [2]: [min(ps_supplycost#X)#X AS min(ps_supplycost)#X, ps_partkey#X]

(52) FilterExecTransformer
Input [2]: [min(ps_supplycost)#X, ps_partkey#X]
Arguments: isnotnull(min(ps_supplycost)#X)

(53) WholeStageCodegenTransformer (X)
Input [2]: [min(ps_supplycost)#X, ps_partkey#X]
Arguments: false

(54) ColumnarBroadcastExchange
Input [2]: [min(ps_supplycost)#X, ps_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, decimal(12,2), false], input[1, bigint, true]),false), [plan_id=X]

(55) BroadcastQueryStage
Output [2]: [min(ps_supplycost)#X, ps_partkey#X]
Arguments: 10

(56) InputIteratorTransformer
Input [2]: [min(ps_supplycost)#X, ps_partkey#X]

(57) GlutenBroadcastHashJoinExecTransformer
Left keys [2]: [ps_supplycost#X, p_partkey#X]
Right keys [2]: [min(ps_supplycost)#X, ps_partkey#X]
Join condition: None

(58) ProjectExecTransformer
Input [6]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X, min(ps_supplycost)#X, ps_partkey#X]
Arguments: [p_partkey#X, p_mfgr#X, ps_suppkey#X]

(59) Scan parquet default.supplier
Output [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint,s_phone:string,s_acctbal:decimal(12,2),s_comment:string>

(60) FilterExecTransformer
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(61) WholeStageCodegenTransformer (X)
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: false

(62) ColumnarBroadcastExchange
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(63) BroadcastQueryStage
Output [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: 4

(64) InputIteratorTransformer
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]

(65) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(66) ProjectExecTransformer
Input [10]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]

(67) Scan parquet default.nation
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(68) FilterExecTransformer
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: ((isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X)) AND might_contain(Subquery subquery#X, [id=#X], xxhash64(n_regionkey#X, 42)))

(69) WholeStageCodegenTransformer (X)
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: false

(70) ColumnarBroadcastExchange
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(71) BroadcastQueryStage
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: 5

(72) InputIteratorTransformer
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]

(73) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(74) ProjectExecTransformer
Input [11]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X, n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_phone#X, s_acctbal#X, s_comment#X, n_name#X, n_regionkey#X]

(75) ReusedExchange [Reuses operator id: 39]
Output [1]: [r_regionkey#X]

(76) BroadcastQueryStage
Output [1]: [r_regionkey#X]
Arguments: 7

(77) InputIteratorTransformer
Input [1]: [r_regionkey#X]

(78) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(79) ProjectExecTransformer
Input [10]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_phone#X, s_acctbal#X, s_comment#X, n_name#X, n_regionkey#X, r_regionkey#X]
Arguments: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]

(80) WholeStageCodegenTransformer (X)
Input [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]
Arguments: false

(81) TakeOrderedAndProjectExecTransformer
Input [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]
Arguments: 100, [s_acctbal#X DESC NULLS LAST, n_name#X ASC NULLS FIRST, s_name#X ASC NULLS FIRST, p_partkey#X ASC NULLS FIRST], [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]

(82) VeloxColumnarToRowExec
Input [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]

(83) Scan parquet default.part
Output [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,15), StringEndsWith(p_type,BRASS), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>

(84) Filter
Input [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]
Condition : ((((isnotnull(p_size#X) AND isnotnull(p_type#X)) AND (p_size#X = 15)) AND EndsWith(p_type#X, BRASS)) AND isnotnull(p_partkey#X))

(85) Project
Output [2]: [p_partkey#X, p_mfgr#X]
Input [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]

(86) BroadcastExchange
Input [2]: [p_partkey#X, p_mfgr#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(87) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(88) Filter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Condition : ((isnotnull(ps_partkey#X) AND isnotnull(ps_supplycost#X)) AND isnotnull(ps_suppkey#X))

(89) BroadcastHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [ps_partkey#X]
Join condition: None

(90) Project
Output [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Input [5]: [p_partkey#X, p_mfgr#X, ps_partkey#X, ps_suppkey#X, ps_supplycost#X]

(91) Exchange
Input [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_supplycost#X, p_partkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(92) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(93) Filter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Condition : (isnotnull(ps_suppkey#X) AND isnotnull(ps_partkey#X))

(94) Scan parquet default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(95) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(96) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(97) BroadcastHashJoin
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(98) Project
Output [3]: [ps_partkey#X, ps_supplycost#X, s_nationkey#X]
Input [5]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]

(99) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(100) Filter
Input [2]: [n_nationkey#X, n_regionkey#X]
Condition : (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(101) BroadcastExchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(102) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(103) Project
Output [3]: [ps_partkey#X, ps_supplycost#X, n_regionkey#X]
Input [5]: [ps_partkey#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X, n_regionkey#X]

(104) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(105) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = EUROPE)) AND isnotnull(r_regionkey#X))

(106) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(107) BroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(108) BroadcastHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(109) Project
Output [2]: [ps_partkey#X, ps_supplycost#X]
Input [4]: [ps_partkey#X, ps_supplycost#X, n_regionkey#X, r_regionkey#X]

(110) HashAggregate
Input [2]: [ps_partkey#X, ps_supplycost#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [partial_min(ps_supplycost#X)]
Aggregate Attributes [1]: [min#X]
Results [2]: [ps_partkey#X, min#X]

(111) Exchange
Input [2]: [ps_partkey#X, min#X]
Arguments: hashpartitioning(ps_partkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(112) HashAggregate
Input [2]: [ps_partkey#X, min#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [min(ps_supplycost#X)]
Aggregate Attributes [1]: [min(ps_supplycost#X)#X]
Results [2]: [min(ps_supplycost#X)#X AS min(ps_supplycost)#X, ps_partkey#X]

(113) Filter
Input [2]: [min(ps_supplycost)#X, ps_partkey#X]
Condition : isnotnull(min(ps_supplycost)#X)

(114) Exchange
Input [2]: [min(ps_supplycost)#X, ps_partkey#X]
Arguments: hashpartitioning(min(ps_supplycost)#X, ps_partkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(115) ShuffledHashJoin
Left keys [2]: [ps_supplycost#X, p_partkey#X]
Right keys [2]: [min(ps_supplycost)#X, ps_partkey#X]
Join condition: None

(116) Project
Output [3]: [p_partkey#X, p_mfgr#X, ps_suppkey#X]
Input [6]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X, min(ps_supplycost)#X, ps_partkey#X]

(117) Scan parquet default.supplier
Output [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint,s_phone:string,s_acctbal:decimal(12,2),s_comment:string>

(118) Filter
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(119) BroadcastExchange
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(120) BroadcastHashJoin
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(121) Project
Output [8]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Input [10]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]

(122) Scan parquet default.nation
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(123) Filter
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Condition : ((isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X)) AND might_contain(Subquery subquery#X, [id=#X], xxhash64(n_regionkey#X, 42)))

(124) BroadcastExchange
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(125) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(126) Project
Output [9]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_phone#X, s_acctbal#X, s_comment#X, n_name#X, n_regionkey#X]
Input [11]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X, n_nationkey#X, n_name#X, n_regionkey#X]

(127) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(128) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = EUROPE)) AND isnotnull(r_regionkey#X))

(129) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(130) BroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(131) BroadcastHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(132) Project
Output [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]
Input [10]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_phone#X, s_acctbal#X, s_comment#X, n_name#X, n_regionkey#X, r_regionkey#X]

(133) TakeOrderedAndProject
Input [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]
Arguments: 100, [s_acctbal#X DESC NULLS LAST, n_name#X ASC NULLS FIRST, s_name#X ASC NULLS FIRST, p_partkey#X ASC NULLS FIRST], [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]

(134) AdaptiveSparkPlan
Output [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 68 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (152)
+- == Final Plan ==
   VeloxColumnarToRowExec (145)
   +- ^ RegularHashAggregateExecTransformer (143)
      +- ^ InputIteratorTransformer (142)
         +- ShuffleQueryStage (141), Statistics(X)
            +- ColumnarExchange (140)
               +- ^ FlushableHashAggregateExecTransformer (138)
                  +- ^ ProjectExecTransformer (137)
                     +- ^ FilterExecTransformer (136)
                        +- ^ Scan parquet default.region (135)
+- == Initial Plan ==
   ObjectHashAggregate (151)
   +- Exchange (150)
      +- ObjectHashAggregate (149)
         +- Project (148)
            +- Filter (147)
               +- Scan parquet default.region (146)


(135) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(136) FilterExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: ((isnotnull(r_name#X) AND (r_name#X = EUROPE)) AND isnotnull(r_regionkey#X))

(137) ProjectExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: [r_regionkey#X]

(138) FlushableHashAggregateExecTransformer
Input [1]: [r_regionkey#X]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#X]
Results [1]: [buf#X]

(139) WholeStageCodegenTransformer (X)
Input [1]: [buf#X]
Arguments: false

(140) ColumnarExchange
Input [1]: [buf#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(141) ShuffleQueryStage
Output [1]: [buf#X]
Arguments: 0

(142) InputIteratorTransformer
Input [1]: [buf#X]

(143) RegularHashAggregateExecTransformer
Input [1]: [buf#X]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)#X]
Results [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)#X AS bloomFilter#X]

(144) WholeStageCodegenTransformer (X)
Input [1]: [bloomFilter#X]
Arguments: false

(145) VeloxColumnarToRowExec
Input [1]: [bloomFilter#X]

(146) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(147) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = EUROPE)) AND isnotnull(r_regionkey#X))

(148) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(149) ObjectHashAggregate
Input [1]: [r_regionkey#X]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#X]
Results [1]: [buf#X]

(150) Exchange
Input [1]: [buf#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X]

(151) ObjectHashAggregate
Input [1]: [buf#X]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)#X]
Results [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)#X AS bloomFilter#X]

(152) AdaptiveSparkPlan
Output [1]: [bloomFilter#X]
Arguments: isFinalPlan=true

Subquery:2 Hosting operator id = 67 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (152)
+- == Final Plan ==
   VeloxColumnarToRowExec (145)
   +- ^ RegularHashAggregateExecTransformer (143)
      +- ^ InputIteratorTransformer (142)
         +- ShuffleQueryStage (141), Statistics(X)
            +- ColumnarExchange (140)
               +- ^ FlushableHashAggregateExecTransformer (138)
                  +- ^ ProjectExecTransformer (137)
                     +- ^ FilterExecTransformer (136)
                        +- ^ Scan parquet default.region (135)
+- == Initial Plan ==
   ObjectHashAggregate (151)
   +- Exchange (150)
      +- ObjectHashAggregate (149)
         +- Project (148)
            +- Filter (147)
               +- Scan parquet default.region (146)
