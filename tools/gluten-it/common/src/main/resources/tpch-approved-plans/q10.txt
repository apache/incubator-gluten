== Physical Plan ==
AdaptiveSparkPlan (63)
+- == Final Plan ==
   VeloxColumnarToRowExec (39)
   +- TakeOrderedAndProjectExecTransformer (38)
      +- ^ RegularHashAggregateExecTransformer (36)
         +- ^ InputIteratorTransformer (35)
            +- AQEShuffleRead (34)
               +- ShuffleQueryStage (33), Statistics(X)
                  +- ColumnarExchange (32)
                     +- ^ ProjectExecTransformer (30)
                        +- ^ FlushableHashAggregateExecTransformer (29)
                           +- ^ ProjectExecTransformer (28)
                              +- ^ GlutenBroadcastHashJoinExecTransformer Inner (27)
                                 :- ^ ProjectExecTransformer (20)
                                 :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (19)
                                 :     :- ^ ProjectExecTransformer (11)
                                 :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (10)
                                 :     :     :- ^ FilterExecTransformer (2)
                                 :     :     :  +- ^ Scan parquet default.customer (1)
                                 :     :     +- ^ InputIteratorTransformer (9)
                                 :     :        +- BroadcastQueryStage (8), Statistics(X)
                                 :     :           +- ColumnarBroadcastExchange (7)
                                 :     :              +- ^ ProjectExecTransformer (5)
                                 :     :                 +- ^ FilterExecTransformer (4)
                                 :     :                    +- ^ Scan parquet default.orders (3)
                                 :     +- ^ InputIteratorTransformer (18)
                                 :        +- BroadcastQueryStage (17), Statistics(X)
                                 :           +- ColumnarBroadcastExchange (16)
                                 :              +- ^ ProjectExecTransformer (14)
                                 :                 +- ^ FilterExecTransformer (13)
                                 :                    +- ^ Scan parquet default.lineitem (12)
                                 +- ^ InputIteratorTransformer (26)
                                    +- BroadcastQueryStage (25), Statistics(X)
                                       +- ColumnarBroadcastExchange (24)
                                          +- ^ FilterExecTransformer (22)
                                             +- ^ Scan parquet default.nation (21)
+- == Initial Plan ==
   TakeOrderedAndProject (62)
   +- HashAggregate (61)
      +- Exchange (60)
         +- HashAggregate (59)
            +- Project (58)
               +- BroadcastHashJoin Inner BuildRight (57)
                  :- Project (53)
                  :  +- BroadcastHashJoin Inner BuildRight (52)
                  :     :- Project (47)
                  :     :  +- BroadcastHashJoin Inner BuildRight (46)
                  :     :     :- Filter (41)
                  :     :     :  +- Scan parquet default.customer (40)
                  :     :     +- BroadcastExchange (45)
                  :     :        +- Project (44)
                  :     :           +- Filter (43)
                  :     :              +- Scan parquet default.orders (42)
                  :     +- BroadcastExchange (51)
                  :        +- Project (50)
                  :           +- Filter (49)
                  :              +- Scan parquet default.lineitem (48)
                  +- BroadcastExchange (56)
                     +- Filter (55)
                        +- Scan parquet default.nation (54)


(1) Scan parquet default.customer
Output [7]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_name:string,c_address:string,c_nationkey:bigint,c_phone:string,c_acctbal:decimal(12,2),c_comment:string>

(2) FilterExecTransformer
Input [7]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X]
Arguments: (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(3) Scan parquet default.orders
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1993-10-01), LessThan(o_orderdate,1994-01-01), IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(4) FilterExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1993-10-01)) AND (o_orderdate#X < 1994-01-01)) AND isnotnull(o_custkey#X)) AND isnotnull(o_orderkey#X))

(5) ProjectExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: [o_orderkey#X, o_custkey#X]

(6) WholeStageCodegenTransformer (X)
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: false
Native Plan:
-- Project[expressions: (n1_3:BIGINT, "n0_0"), (n1_4:BIGINT, "n0_1")] -> n1_3:BIGINT, n1_4:BIGINT
  -- TableScan[table: hive_table, range filters: [(o_custkey, Filter(IsNotNull, deterministic, null not allowed)), (o_orderdate, BigintRange: [8674, 8765] no nulls), (o_orderkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT, n0_2:DATE

(7) ColumnarBroadcastExchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=X]

(8) BroadcastQueryStage
Output [2]: [o_orderkey#X, o_custkey#X]
Arguments: 0

(9) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_custkey#X]

(10) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(11) ProjectExecTransformer
Input [9]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X, o_orderkey#X, o_custkey#X]
Arguments: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X, o_orderkey#X]

(12) Scan parquet default.lineitem
Output [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, l_returnflag#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_returnflag), EqualTo(l_returnflag,R), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_returnflag:string>

(13) FilterExecTransformer
Input [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, l_returnflag#X]
Arguments: ((isnotnull(l_returnflag#X) AND (l_returnflag#X = R)) AND isnotnull(l_orderkey#X))

(14) ProjectExecTransformer
Input [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, l_returnflag#X]
Arguments: [l_orderkey#X, l_extendedprice#X, l_discount#X]

(15) WholeStageCodegenTransformer (X)
Input [3]: [l_orderkey#X, l_extendedprice#X, l_discount#X]
Arguments: false
Native Plan:
-- Project[expressions: (n1_4:BIGINT, "n0_0"), (n1_5:DECIMAL(12, 2), "n0_1"), (n1_6:DECIMAL(12, 2), "n0_2")] -> n1_4:BIGINT, n1_5:DECIMAL(12, 2), n1_6:DECIMAL(12, 2)
  -- TableScan[table: hive_table, range filters: [(l_orderkey, Filter(IsNotNull, deterministic, null not allowed)), (l_returnflag, BytesRange: [R, R] no nulls)]] -> n0_0:BIGINT, n0_1:DECIMAL(12, 2), n0_2:DECIMAL(12, 2), n0_3:VARCHAR

(16) ColumnarBroadcastExchange
Input [3]: [l_orderkey#X, l_extendedprice#X, l_discount#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(17) BroadcastQueryStage
Output [3]: [l_orderkey#X, l_extendedprice#X, l_discount#X]
Arguments: 1

(18) InputIteratorTransformer
Input [3]: [l_orderkey#X, l_extendedprice#X, l_discount#X]

(19) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(20) ProjectExecTransformer
Input [11]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X, o_orderkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X]
Arguments: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X, l_extendedprice#X, l_discount#X]

(21) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(22) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: isnotnull(n_nationkey#X)

(23) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_name#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(n_nationkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:VARCHAR

(24) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(25) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: 2

(26) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(27) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(28) ProjectExecTransformer
Input [11]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X, l_extendedprice#X, l_discount#X, n_nationkey#X, n_name#X]
Arguments: [c_custkey#X, c_name#X, c_address#X, c_phone#X, c_acctbal#X, c_comment#X, l_extendedprice#X, l_discount#X, n_name#X]

(29) FlushableHashAggregateExecTransformer
Input [9]: [c_custkey#X, c_name#X, c_address#X, c_phone#X, c_acctbal#X, c_comment#X, l_extendedprice#X, l_discount#X, n_name#X]
Keys [7]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [9]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]

(30) ProjectExecTransformer
Input [9]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]
Arguments: [hash(c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, 42) AS hash_partition_key#X, c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]

(31) WholeStageCodegenTransformer (X)
Input [10]: [hash_partition_key#X, c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project[expressions: (n16_9:INTEGER, hash_with_seed(42,"n15_8","n15_9","n15_10","n15_11","n15_12","n15_13","n15_14")), (n16_10:BIGINT, "n15_8"), (n16_11:VARCHAR, "n15_9"), (n16_12:DECIMAL(12, 2), "n15_10"), (n16_13:VARCHAR, "n15_11"), (n16_14:VARCHAR, "n15_12"), (n16_15:VARCHAR, "n15_13"), (n16_16:VARCHAR, "n15_14"), (n16_17:DECIMAL(36, 4), "n15_15"), (n16_18:BOOLEAN, "n15_16")] -> n16_9:INTEGER, n16_10:BIGINT, n16_11:VARCHAR, n16_12:DECIMAL(12, 2), n16_13:VARCHAR, n16_14:VARCHAR, n16_15:VARCHAR, n16_16:VARCHAR, n16_17:DECIMAL(36, 4), n16_18:BOOLEAN
  -- Project[expressions: (n15_8:BIGINT, "n13_9"), (n15_9:VARCHAR, "n13_10"), (n15_10:DECIMAL(12, 2), "n13_11"), (n15_11:VARCHAR, "n13_12"), (n15_12:VARCHAR, "n13_13"), (n15_13:VARCHAR, "n13_14"), (n15_14:VARCHAR, "n13_15"), (n15_15:DECIMAL(36, 4), "n14_7"["col_0"]), (n15_16:BOOLEAN, "n14_7"["col_1"])] -> n15_8:BIGINT, n15_9:VARCHAR, n15_10:DECIMAL(12, 2), n15_11:VARCHAR, n15_12:VARCHAR, n15_13:VARCHAR, n15_14:VARCHAR, n15_15:DECIMAL(36, 4), n15_16:BOOLEAN
    -- Aggregation[PARTIAL [n13_9, n13_10, n13_11, n13_12, n13_13, n13_14, n13_15] n14_7 := sum_partial("n13_16")] -> n13_9:BIGINT, n13_10:VARCHAR, n13_11:DECIMAL(12, 2), n13_12:VARCHAR, n13_13:VARCHAR, n13_14:VARCHAR, n13_15:VARCHAR, n14_7:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>
      -- Project[expressions: (n13_9:BIGINT, "n12_11"), (n13_10:VARCHAR, "n12_12"), (n13_11:DECIMAL(12, 2), "n12_15"), (n13_12:VARCHAR, "n12_14"), (n13_13:VARCHAR, "n12_19"), (n13_14:VARCHAR, "n12_13"), (n13_15:VARCHAR, "n12_16"), (n13_16:DECIMAL(26, 4), try_cast multiply("n12_17",try_cast subtract(try_cast 1.00 as DECIMAL(1, 0),"n12_18") as DECIMAL(13, 2)) as DECIMAL(26, 4))] -> n13_9:BIGINT, n13_10:VARCHAR, n13_11:DECIMAL(12, 2), n13_12:VARCHAR, n13_13:VARCHAR, n13_14:VARCHAR, n13_15:VARCHAR, n13_16:DECIMAL(26, 4)
        -- Project[expressions: (n12_11:BIGINT, "n11_11"), (n12_12:VARCHAR, "n11_12"), (n12_13:VARCHAR, "n11_13"), (n12_14:VARCHAR, "n11_15"), (n12_15:DECIMAL(12, 2), "n11_16"), (n12_16:VARCHAR, "n11_17"), (n12_17:DECIMAL(12, 2), "n11_18"), (n12_18:DECIMAL(12, 2), "n11_19"), (n12_19:VARCHAR, "n11_21")] -> n12_11:BIGINT, n12_12:VARCHAR, n12_13:VARCHAR, n12_14:VARCHAR, n12_15:DECIMAL(12, 2), n12_16:VARCHAR, n12_17:DECIMAL(12, 2), n12_18:DECIMAL(12, 2), n12_19:VARCHAR
          -- Project[expressions: (n11_11:BIGINT, "n9_11"), (n11_12:VARCHAR, "n9_12"), (n11_13:VARCHAR, "n9_13"), (n11_14:BIGINT, "n9_14"), (n11_15:VARCHAR, "n9_15"), (n11_16:DECIMAL(12, 2), "n9_16"), (n11_17:VARCHAR, "n9_17"), (n11_18:DECIMAL(12, 2), "n9_18"), (n11_19:DECIMAL(12, 2), "n9_19"), (n11_20:BIGINT, "n2_0"), (n11_21:VARCHAR, "n2_1")] -> n11_11:BIGINT, n11_12:VARCHAR, n11_13:VARCHAR, n11_14:BIGINT, n11_15:VARCHAR, n11_16:DECIMAL(12, 2), n11_17:VARCHAR, n11_18:DECIMAL(12, 2), n11_19:DECIMAL(12, 2), n11_20:BIGINT, n11_21:VARCHAR
            -- HashJoin[INNER n9_14=n2_0] -> n9_11:BIGINT, n9_12:VARCHAR, n9_13:VARCHAR, n9_14:BIGINT, n9_15:VARCHAR, n9_16:DECIMAL(12, 2), n9_17:VARCHAR, n9_18:DECIMAL(12, 2), n9_19:DECIMAL(12, 2), n2_0:BIGINT, n2_1:VARCHAR
              -- Project[expressions: (n9_11:BIGINT, "n8_11"), (n9_12:VARCHAR, "n8_12"), (n9_13:VARCHAR, "n8_13"), (n9_14:BIGINT, "n8_14"), (n9_15:VARCHAR, "n8_15"), (n9_16:DECIMAL(12, 2), "n8_16"), (n9_17:VARCHAR, "n8_17"), (n9_18:DECIMAL(12, 2), "n8_20"), (n9_19:DECIMAL(12, 2), "n8_21")] -> n9_11:BIGINT, n9_12:VARCHAR, n9_13:VARCHAR, n9_14:BIGINT, n9_15:VARCHAR, n9_16:DECIMAL(12, 2), n9_17:VARCHAR, n9_18:DECIMAL(12, 2), n9_19:DECIMAL(12, 2)
                -- Project[expressions: (n8_11:BIGINT, "n6_9"), (n8_12:VARCHAR, "n6_10"), (n8_13:VARCHAR, "n6_11"), (n8_14:BIGINT, "n6_12"), (n8_15:VARCHAR, "n6_13"), (n8_16:DECIMAL(12, 2), "n6_14"), (n8_17:VARCHAR, "n6_15"), (n8_18:BIGINT, "n6_16"), (n8_19:BIGINT, "n1_0"), (n8_20:DECIMAL(12, 2), "n1_1"), (n8_21:DECIMAL(12, 2), "n1_2")] -> n8_11:BIGINT, n8_12:VARCHAR, n8_13:VARCHAR, n8_14:BIGINT, n8_15:VARCHAR, n8_16:DECIMAL(12, 2), n8_17:VARCHAR, n8_18:BIGINT, n8_19:BIGINT, n8_20:DECIMAL(12, 2), n8_21:DECIMAL(12, 2)
                  -- HashJoin[INNER n6_16=n1_0] -> n6_9:BIGINT, n6_10:VARCHAR, n6_11:VARCHAR, n6_12:BIGINT, n6_13:VARCHAR, n6_14:DECIMAL(12, 2), n6_15:VARCHAR, n6_16:BIGINT, n1_0:BIGINT, n1_1:DECIMAL(12, 2), n1_2:DECIMAL(12, 2)
                    -- Project[expressions: (n6_9:BIGINT, "n5_9"), (n6_10:VARCHAR, "n5_10"), (n6_11:VARCHAR, "n5_11"), (n6_12:BIGINT, "n5_12"), (n6_13:VARCHAR, "n5_13"), (n6_14:DECIMAL(12, 2), "n5_14"), (n6_15:VARCHAR, "n5_15"), (n6_16:BIGINT, "n5_16")] -> n6_9:BIGINT, n6_10:VARCHAR, n6_11:VARCHAR, n6_12:BIGINT, n6_13:VARCHAR, n6_14:DECIMAL(12, 2), n6_15:VARCHAR, n6_16:BIGINT
                      -- Project[expressions: (n5_9:BIGINT, "n3_0"), (n5_10:VARCHAR, "n3_1"), (n5_11:VARCHAR, "n3_2"), (n5_12:BIGINT, "n3_3"), (n5_13:VARCHAR, "n3_4"), (n5_14:DECIMAL(12, 2), "n3_5"), (n5_15:VARCHAR, "n3_6"), (n5_16:BIGINT, "n0_0"), (n5_17:BIGINT, "n0_1")] -> n5_9:BIGINT, n5_10:VARCHAR, n5_11:VARCHAR, n5_12:BIGINT, n5_13:VARCHAR, n5_14:DECIMAL(12, 2), n5_15:VARCHAR, n5_16:BIGINT, n5_17:BIGINT
                        -- HashJoin[INNER n3_0=n0_1] -> n3_0:BIGINT, n3_1:VARCHAR, n3_2:VARCHAR, n3_3:BIGINT, n3_4:VARCHAR, n3_5:DECIMAL(12, 2), n3_6:VARCHAR, n0_0:BIGINT, n0_1:BIGINT
                          -- TableScan[table: hive_table, range filters: [(c_custkey, Filter(IsNotNull, deterministic, null not allowed)), (c_nationkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n3_0:BIGINT, n3_1:VARCHAR, n3_2:VARCHAR, n3_3:BIGINT, n3_4:VARCHAR, n3_5:DECIMAL(12, 2), n3_6:VARCHAR
                          -- ValueStream[] -> n0_0:BIGINT, n0_1:BIGINT
                    -- ValueStream[] -> n1_0:BIGINT, n1_1:DECIMAL(12, 2), n1_2:DECIMAL(12, 2)
              -- ValueStream[] -> n2_0:BIGINT, n2_1:VARCHAR

(32) ColumnarExchange
Input [10]: [hash_partition_key#X, c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, 100), ENSURE_REQUIREMENTS, [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(33) ShuffleQueryStage
Output [9]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]
Arguments: 3

(34) AQEShuffleRead
Input [9]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]
Arguments: coalesced

(35) InputIteratorTransformer
Input [9]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]

(36) RegularHashAggregateExecTransformer
Input [9]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]
Keys [7]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X]
Results [8]: [c_custkey#X, c_name#X, sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X AS revenue#X, c_acctbal#X, n_name#X, c_address#X, c_phone#X, c_comment#X]

(37) WholeStageCodegenTransformer (X)
Input [8]: [c_custkey#X, c_name#X, revenue#X, c_acctbal#X, n_name#X, c_address#X, c_phone#X, c_comment#X]
Arguments: false
Native Plan:
-- Project[expressions: (n3_8:BIGINT, "n1_9"), (n3_9:VARCHAR, "n1_10"), (n3_10:DECIMAL(36, 4), "n2_7"), (n3_11:DECIMAL(12, 2), "n1_11"), (n3_12:VARCHAR, "n1_13"), (n3_13:VARCHAR, "n1_14"), (n3_14:VARCHAR, "n1_12"), (n3_15:VARCHAR, "n1_15")] -> n3_8:BIGINT, n3_9:VARCHAR, n3_10:DECIMAL(36, 4), n3_11:DECIMAL(12, 2), n3_12:VARCHAR, n3_13:VARCHAR, n3_14:VARCHAR, n3_15:VARCHAR
  -- Aggregation[SINGLE [n1_9, n1_10, n1_11, n1_12, n1_13, n1_14, n1_15] n2_7 := sum_merge_extract("n1_16")] -> n1_9:BIGINT, n1_10:VARCHAR, n1_11:DECIMAL(12, 2), n1_12:VARCHAR, n1_13:VARCHAR, n1_14:VARCHAR, n1_15:VARCHAR, n2_7:DECIMAL(36, 4)
    -- Project[expressions: (n1_9:BIGINT, "n0_0"), (n1_10:VARCHAR, "n0_1"), (n1_11:DECIMAL(12, 2), "n0_2"), (n1_12:VARCHAR, "n0_3"), (n1_13:VARCHAR, "n0_4"), (n1_14:VARCHAR, "n0_5"), (n1_15:VARCHAR, "n0_6"), (n1_16:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>, row_constructor("n0_7","n0_8"))] -> n1_9:BIGINT, n1_10:VARCHAR, n1_11:DECIMAL(12, 2), n1_12:VARCHAR, n1_13:VARCHAR, n1_14:VARCHAR, n1_15:VARCHAR, n1_16:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>
      -- ValueStream[] -> n0_0:BIGINT, n0_1:VARCHAR, n0_2:DECIMAL(12, 2), n0_3:VARCHAR, n0_4:VARCHAR, n0_5:VARCHAR, n0_6:VARCHAR, n0_7:DECIMAL(36, 4), n0_8:BOOLEAN

(38) TakeOrderedAndProjectExecTransformer
Input [8]: [c_custkey#X, c_name#X, revenue#X, c_acctbal#X, n_name#X, c_address#X, c_phone#X, c_comment#X]
Arguments: 20, [revenue#X DESC NULLS LAST], [c_custkey#X, c_name#X, revenue#X, c_acctbal#X, n_name#X, c_address#X, c_phone#X, c_comment#X]

(39) VeloxColumnarToRowExec
Input [8]: [c_custkey#X, c_name#X, revenue#X, c_acctbal#X, n_name#X, c_address#X, c_phone#X, c_comment#X]

(40) Scan parquet default.customer
Output [7]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_name:string,c_address:string,c_nationkey:bigint,c_phone:string,c_acctbal:decimal(12,2),c_comment:string>

(41) Filter
Input [7]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(42) Scan parquet default.orders
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1993-10-01), LessThan(o_orderdate,1994-01-01), IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(43) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Condition : ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1993-10-01)) AND (o_orderdate#X < 1994-01-01)) AND isnotnull(o_custkey#X)) AND isnotnull(o_orderkey#X))

(44) Project
Output [2]: [o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(45) BroadcastExchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=X]

(46) BroadcastHashJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(47) Project
Output [8]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X, o_orderkey#X]
Input [9]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X, o_orderkey#X, o_custkey#X]

(48) Scan parquet default.lineitem
Output [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, l_returnflag#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_returnflag), EqualTo(l_returnflag,R), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_returnflag:string>

(49) Filter
Input [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, l_returnflag#X]
Condition : ((isnotnull(l_returnflag#X) AND (l_returnflag#X = R)) AND isnotnull(l_orderkey#X))

(50) Project
Output [3]: [l_orderkey#X, l_extendedprice#X, l_discount#X]
Input [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, l_returnflag#X]

(51) BroadcastExchange
Input [3]: [l_orderkey#X, l_extendedprice#X, l_discount#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(52) BroadcastHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(53) Project
Output [9]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X, l_extendedprice#X, l_discount#X]
Input [11]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X, o_orderkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X]

(54) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(55) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : isnotnull(n_nationkey#X)

(56) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(57) BroadcastHashJoin
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(58) Project
Output [9]: [c_custkey#X, c_name#X, c_address#X, c_phone#X, c_acctbal#X, c_comment#X, l_extendedprice#X, l_discount#X, n_name#X]
Input [11]: [c_custkey#X, c_name#X, c_address#X, c_nationkey#X, c_phone#X, c_acctbal#X, c_comment#X, l_extendedprice#X, l_discount#X, n_nationkey#X, n_name#X]

(59) HashAggregate
Input [9]: [c_custkey#X, c_name#X, c_address#X, c_phone#X, c_acctbal#X, c_comment#X, l_extendedprice#X, l_discount#X, n_name#X]
Keys [7]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [9]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]

(60) Exchange
Input [9]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(61) HashAggregate
Input [9]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X, sum#X, isEmpty#X]
Keys [7]: [c_custkey#X, c_name#X, c_acctbal#X, c_phone#X, n_name#X, c_address#X, c_comment#X]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X]
Results [8]: [c_custkey#X, c_name#X, sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#X AS revenue#X, c_acctbal#X, n_name#X, c_address#X, c_phone#X, c_comment#X]

(62) TakeOrderedAndProject
Input [8]: [c_custkey#X, c_name#X, revenue#X, c_acctbal#X, n_name#X, c_address#X, c_phone#X, c_comment#X]
Arguments: 20, [revenue#X DESC NULLS LAST], [c_custkey#X, c_name#X, revenue#X, c_acctbal#X, n_name#X, c_address#X, c_phone#X, c_comment#X]

(63) AdaptiveSparkPlan
Output [8]: [c_custkey#X, c_name#X, revenue#X, c_acctbal#X, n_name#X, c_address#X, c_phone#X, c_comment#X]
Arguments: isFinalPlan=true
