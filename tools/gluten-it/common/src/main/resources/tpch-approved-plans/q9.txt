== Physical Plan ==
AdaptiveSparkPlan (93)
+- == Final Plan ==
   VeloxColumnarToRowExec (59)
   +- ^ SortExecTransformer (57)
      +- ^ InputIteratorTransformer (56)
         +- AQEShuffleRead (55)
            +- ShuffleQueryStage (54), Statistics(X)
               +- ColumnarExchange (53)
                  +- ^ RegularHashAggregateExecTransformer (51)
                     +- ^ InputIteratorTransformer (50)
                        +- AQEShuffleRead (49)
                           +- ShuffleQueryStage (48), Statistics(X)
                              +- ColumnarExchange (47)
                                 +- ^ ProjectExecTransformer (45)
                                    +- ^ FlushableHashAggregateExecTransformer (44)
                                       +- ^ ProjectExecTransformer (43)
                                          +- ^ GlutenBroadcastHashJoinExecTransformer Inner (42)
                                             :- ^ ProjectExecTransformer (35)
                                             :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (34)
                                             :     :- ^ ProjectExecTransformer (27)
                                             :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (26)
                                             :     :     :- ^ ProjectExecTransformer (19)
                                             :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (18)
                                             :     :     :     :- ^ ProjectExecTransformer (11)
                                             :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (10)
                                             :     :     :     :     :- ^ InputIteratorTransformer (7)
                                             :     :     :     :     :  +- BroadcastQueryStage (6), Statistics(X)
                                             :     :     :     :     :     +- ColumnarBroadcastExchange (5)
                                             :     :     :     :     :        +- ^ ProjectExecTransformer (3)
                                             :     :     :     :     :           +- ^ FilterExecTransformer (2)
                                             :     :     :     :     :              +- ^ Scan parquet default.part (1)
                                             :     :     :     :     +- ^ FilterExecTransformer (9)
                                             :     :     :     :        +- ^ Scan parquet default.lineitem (8)
                                             :     :     :     +- ^ InputIteratorTransformer (17)
                                             :     :     :        +- BroadcastQueryStage (16), Statistics(X)
                                             :     :     :           +- ColumnarBroadcastExchange (15)
                                             :     :     :              +- ^ FilterExecTransformer (13)
                                             :     :     :                 +- ^ Scan parquet default.supplier (12)
                                             :     :     +- ^ InputIteratorTransformer (25)
                                             :     :        +- BroadcastQueryStage (24), Statistics(X)
                                             :     :           +- ColumnarBroadcastExchange (23)
                                             :     :              +- ^ FilterExecTransformer (21)
                                             :     :                 +- ^ Scan parquet default.partsupp (20)
                                             :     +- ^ InputIteratorTransformer (33)
                                             :        +- BroadcastQueryStage (32), Statistics(X)
                                             :           +- ColumnarBroadcastExchange (31)
                                             :              +- ^ FilterExecTransformer (29)
                                             :                 +- ^ Scan parquet default.orders (28)
                                             +- ^ InputIteratorTransformer (41)
                                                +- BroadcastQueryStage (40), Statistics(X)
                                                   +- ColumnarBroadcastExchange (39)
                                                      +- ^ FilterExecTransformer (37)
                                                         +- ^ Scan parquet default.nation (36)
+- == Initial Plan ==
   Sort (92)
   +- Exchange (91)
      +- HashAggregate (90)
         +- Exchange (89)
            +- HashAggregate (88)
               +- Project (87)
                  +- BroadcastHashJoin Inner BuildRight (86)
                     :- Project (82)
                     :  +- BroadcastHashJoin Inner BuildRight (81)
                     :     :- Project (77)
                     :     :  +- BroadcastHashJoin Inner BuildRight (76)
                     :     :     :- Project (72)
                     :     :     :  +- BroadcastHashJoin Inner BuildRight (71)
                     :     :     :     :- Project (67)
                     :     :     :     :  +- BroadcastHashJoin Inner BuildLeft (66)
                     :     :     :     :     :- BroadcastExchange (63)
                     :     :     :     :     :  +- Project (62)
                     :     :     :     :     :     +- Filter (61)
                     :     :     :     :     :        +- Scan parquet default.part (60)
                     :     :     :     :     +- Filter (65)
                     :     :     :     :        +- Scan parquet default.lineitem (64)
                     :     :     :     +- BroadcastExchange (70)
                     :     :     :        +- Filter (69)
                     :     :     :           +- Scan parquet default.supplier (68)
                     :     :     +- BroadcastExchange (75)
                     :     :        +- Filter (74)
                     :     :           +- Scan parquet default.partsupp (73)
                     :     +- BroadcastExchange (80)
                     :        +- Filter (79)
                     :           +- Scan parquet default.orders (78)
                     +- BroadcastExchange (85)
                        +- Filter (84)
                           +- Scan parquet default.nation (83)


(1) Scan parquet default.part
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_name), StringContains(p_name,green), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(2) FilterExecTransformer
Input [2]: [p_partkey#X, p_name#X]
Arguments: ((isnotnull(p_name#X) AND Contains(p_name#X, green)) AND isnotnull(p_partkey#X))

(3) ProjectExecTransformer
Input [2]: [p_partkey#X, p_name#X]
Arguments: [p_partkey#X]

(4) WholeStageCodegenTransformer (X)
Input [1]: [p_partkey#X]
Arguments: false
Native Plan:
-- Project[expressions: (n1_2:BIGINT, "n0_0")] -> n1_2:BIGINT
  -- TableScan[table: hive_table, range filters: [(p_name, Filter(IsNotNull, deterministic, null not allowed)), (p_partkey, Filter(IsNotNull, deterministic, null not allowed))], remaining filter: (contains("p_name","green"))] -> n0_0:BIGINT, n0_1:VARCHAR

(5) ColumnarBroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(6) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 0

(7) InputIteratorTransformer
Input [1]: [p_partkey#X]

(8) Scan parquet default.lineitem
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(9) FilterExecTransformer
Input [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Arguments: ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(10) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(11) ProjectExecTransformer
Input [7]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Arguments: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]

(12) Scan parquet default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(13) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(14) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(s_nationkey, Filter(IsNotNull, deterministic, null not allowed)), (s_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT

(15) ColumnarBroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(16) BroadcastQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: 1

(17) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(18) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(19) ProjectExecTransformer
Input [8]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]
Arguments: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X]

(20) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(21) FilterExecTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: (isnotnull(ps_suppkey#X) AND isnotnull(ps_partkey#X))

(22) WholeStageCodegenTransformer (X)
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(ps_partkey, Filter(IsNotNull, deterministic, null not allowed)), (ps_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT, n0_2:DECIMAL(12, 2)

(23) ColumnarBroadcastExchange
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, bigint, false]),false), [plan_id=X]

(24) BroadcastQueryStage
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: 2

(25) InputIteratorTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]

(26) GlutenBroadcastHashJoinExecTransformer
Left keys [2]: [l_suppkey#X, l_partkey#X]
Right keys [2]: [ps_suppkey#X, ps_partkey#X]
Join condition: None

(27) ProjectExecTransformer
Input [10]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X]

(28) Scan parquet default.orders
Output [2]: [o_orderkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date>

(29) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderdate#X]
Arguments: isnotnull(o_orderkey#X)

(30) WholeStageCodegenTransformer (X)
Input [2]: [o_orderkey#X, o_orderdate#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(o_orderkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:DATE

(31) ColumnarBroadcastExchange
Input [2]: [o_orderkey#X, o_orderdate#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(32) BroadcastQueryStage
Output [2]: [o_orderkey#X, o_orderdate#X]
Arguments: 3

(33) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_orderdate#X]

(34) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(35) ProjectExecTransformer
Input [8]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderkey#X, o_orderdate#X]
Arguments: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X]

(36) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(37) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: isnotnull(n_nationkey#X)

(38) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_name#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(n_nationkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:VARCHAR

(39) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(40) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: 4

(41) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(42) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(43) ProjectExecTransformer
Input [8]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X, n_nationkey#X, n_name#X]
Arguments: [n_name#X AS nation#X, year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) as decimal(27,4))) - promote_precision(cast(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(l_quantity#X)), DecimalType(25,4)) as decimal(27,4)))), DecimalType(27,4)) AS amount#X]

(44) FlushableHashAggregateExecTransformer
Input [3]: [nation#X, o_year#X, amount#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [partial_sum(amount#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [nation#X, o_year#X, sum#X, isEmpty#X]

(45) ProjectExecTransformer
Input [4]: [nation#X, o_year#X, sum#X, isEmpty#X]
Arguments: [hash(nation#X, o_year#X, 42) AS hash_partition_key#X, nation#X, o_year#X, sum#X, isEmpty#X]

(46) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, nation#X, o_year#X, sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project[expressions: (n23_4:INTEGER, hash_with_seed(42,"n22_3","n22_4")), (n23_5:VARCHAR, "n22_3"), (n23_6:INTEGER, "n22_4"), (n23_7:DECIMAL(37, 4), "n22_5"), (n23_8:BOOLEAN, "n22_6")] -> n23_4:INTEGER, n23_5:VARCHAR, n23_6:INTEGER, n23_7:DECIMAL(37, 4), n23_8:BOOLEAN
  -- Project[expressions: (n22_3:VARCHAR, "n20_8"), (n22_4:INTEGER, "n20_9"), (n22_5:DECIMAL(37, 4), "n21_2"["col_0"]), (n22_6:BOOLEAN, "n21_2"["col_1"])] -> n22_3:VARCHAR, n22_4:INTEGER, n22_5:DECIMAL(37, 4), n22_6:BOOLEAN
    -- Aggregation[PARTIAL [n20_8, n20_9] n21_2 := sum_partial("n20_10")] -> n20_8:VARCHAR, n20_9:INTEGER, n21_2:ROW<col_0:DECIMAL(37, 4),col_1:BOOLEAN>
      -- Project[expressions: (n20_8:VARCHAR, "n19_15"), (n20_9:INTEGER, year("n19_13")), (n20_10:DECIMAL(27, 4), try_cast subtract(try_cast multiply("n19_9",try_cast subtract(try_cast 1.00 as DECIMAL(1, 0),"n19_10") as DECIMAL(13, 2)) as DECIMAL(26, 4),try_cast multiply("n19_12","n19_8") as DECIMAL(25, 4)) as DECIMAL(27, 4))] -> n20_8:VARCHAR, n20_9:INTEGER, n20_10:DECIMAL(27, 4)
        -- Project[expressions: (n19_8:DECIMAL(12, 2), "n17_8"), (n19_9:DECIMAL(12, 2), "n17_9"), (n19_10:DECIMAL(12, 2), "n17_10"), (n19_11:BIGINT, "n17_11"), (n19_12:DECIMAL(12, 2), "n17_12"), (n19_13:DATE, "n17_13"), (n19_14:BIGINT, "n4_0"), (n19_15:VARCHAR, "n4_1")] -> n19_8:DECIMAL(12, 2), n19_9:DECIMAL(12, 2), n19_10:DECIMAL(12, 2), n19_11:BIGINT, n19_12:DECIMAL(12, 2), n19_13:DATE, n19_14:BIGINT, n19_15:VARCHAR
          -- HashJoin[INNER n17_11=n4_0] -> n17_8:DECIMAL(12, 2), n17_9:DECIMAL(12, 2), n17_10:DECIMAL(12, 2), n17_11:BIGINT, n17_12:DECIMAL(12, 2), n17_13:DATE, n4_0:BIGINT, n4_1:VARCHAR
            -- Project[expressions: (n17_8:DECIMAL(12, 2), "n16_9"), (n17_9:DECIMAL(12, 2), "n16_10"), (n17_10:DECIMAL(12, 2), "n16_11"), (n17_11:BIGINT, "n16_12"), (n17_12:DECIMAL(12, 2), "n16_13"), (n17_13:DATE, "n16_15")] -> n17_8:DECIMAL(12, 2), n17_9:DECIMAL(12, 2), n17_10:DECIMAL(12, 2), n17_11:BIGINT, n17_12:DECIMAL(12, 2), n17_13:DATE
              -- Project[expressions: (n16_8:BIGINT, "n14_10"), (n16_9:DECIMAL(12, 2), "n14_11"), (n16_10:DECIMAL(12, 2), "n14_12"), (n16_11:DECIMAL(12, 2), "n14_13"), (n16_12:BIGINT, "n14_14"), (n16_13:DECIMAL(12, 2), "n14_15"), (n16_14:BIGINT, "n3_0"), (n16_15:DATE, "n3_1")] -> n16_8:BIGINT, n16_9:DECIMAL(12, 2), n16_10:DECIMAL(12, 2), n16_11:DECIMAL(12, 2), n16_12:BIGINT, n16_13:DECIMAL(12, 2), n16_14:BIGINT, n16_15:DATE
                -- HashJoin[INNER n14_10=n3_0] -> n14_10:BIGINT, n14_11:DECIMAL(12, 2), n14_12:DECIMAL(12, 2), n14_13:DECIMAL(12, 2), n14_14:BIGINT, n14_15:DECIMAL(12, 2), n3_0:BIGINT, n3_1:DATE
                  -- Project[expressions: (n14_10:BIGINT, "n13_10"), (n14_11:DECIMAL(12, 2), "n13_13"), (n14_12:DECIMAL(12, 2), "n13_14"), (n14_13:DECIMAL(12, 2), "n13_15"), (n14_14:BIGINT, "n13_16"), (n14_15:DECIMAL(12, 2), "n13_19")] -> n14_10:BIGINT, n14_11:DECIMAL(12, 2), n14_12:DECIMAL(12, 2), n14_13:DECIMAL(12, 2), n14_14:BIGINT, n14_15:DECIMAL(12, 2)
                    -- Project[expressions: (n13_10:BIGINT, "n11_8"), (n13_11:BIGINT, "n11_9"), (n13_12:BIGINT, "n11_10"), (n13_13:DECIMAL(12, 2), "n11_11"), (n13_14:DECIMAL(12, 2), "n11_12"), (n13_15:DECIMAL(12, 2), "n11_13"), (n13_16:BIGINT, "n11_14"), (n13_17:BIGINT, "n2_0"), (n13_18:BIGINT, "n2_1"), (n13_19:DECIMAL(12, 2), "n2_2")] -> n13_10:BIGINT, n13_11:BIGINT, n13_12:BIGINT, n13_13:DECIMAL(12, 2), n13_14:DECIMAL(12, 2), n13_15:DECIMAL(12, 2), n13_16:BIGINT, n13_17:BIGINT, n13_18:BIGINT, n13_19:DECIMAL(12, 2)
                      -- HashJoin[INNER n11_9=n2_0 AND n11_10=n2_1] -> n11_8:BIGINT, n11_9:BIGINT, n11_10:BIGINT, n11_11:DECIMAL(12, 2), n11_12:DECIMAL(12, 2), n11_13:DECIMAL(12, 2), n11_14:BIGINT, n2_0:BIGINT, n2_1:BIGINT, n2_2:DECIMAL(12, 2)
                        -- Project[expressions: (n11_8:BIGINT, "n10_8"), (n11_9:BIGINT, "n10_9"), (n11_10:BIGINT, "n10_10"), (n11_11:DECIMAL(12, 2), "n10_11"), (n11_12:DECIMAL(12, 2), "n10_12"), (n11_13:DECIMAL(12, 2), "n10_13"), (n11_14:BIGINT, "n10_15")] -> n11_8:BIGINT, n11_9:BIGINT, n11_10:BIGINT, n11_11:DECIMAL(12, 2), n11_12:DECIMAL(12, 2), n11_13:DECIMAL(12, 2), n11_14:BIGINT
                          -- Project[expressions: (n10_8:BIGINT, "n8_7"), (n10_9:BIGINT, "n8_8"), (n10_10:BIGINT, "n8_9"), (n10_11:DECIMAL(12, 2), "n8_10"), (n10_12:DECIMAL(12, 2), "n8_11"), (n10_13:DECIMAL(12, 2), "n8_12"), (n10_14:BIGINT, "n1_0"), (n10_15:BIGINT, "n1_1")] -> n10_8:BIGINT, n10_9:BIGINT, n10_10:BIGINT, n10_11:DECIMAL(12, 2), n10_12:DECIMAL(12, 2), n10_13:DECIMAL(12, 2), n10_14:BIGINT, n10_15:BIGINT
                            -- HashJoin[INNER n8_9=n1_0] -> n8_7:BIGINT, n8_8:BIGINT, n8_9:BIGINT, n8_10:DECIMAL(12, 2), n8_11:DECIMAL(12, 2), n8_12:DECIMAL(12, 2), n1_0:BIGINT, n1_1:BIGINT
                              -- Project[expressions: (n8_7:BIGINT, "n7_8"), (n8_8:BIGINT, "n7_9"), (n8_9:BIGINT, "n7_10"), (n8_10:DECIMAL(12, 2), "n7_11"), (n8_11:DECIMAL(12, 2), "n7_12"), (n8_12:DECIMAL(12, 2), "n7_13")] -> n8_7:BIGINT, n8_8:BIGINT, n8_9:BIGINT, n8_10:DECIMAL(12, 2), n8_11:DECIMAL(12, 2), n8_12:DECIMAL(12, 2)
                                -- Project[expressions: (n7_7:BIGINT, "n0_0"), (n7_8:BIGINT, "n5_0"), (n7_9:BIGINT, "n5_1"), (n7_10:BIGINT, "n5_2"), (n7_11:DECIMAL(12, 2), "n5_3"), (n7_12:DECIMAL(12, 2), "n5_4"), (n7_13:DECIMAL(12, 2), "n5_5")] -> n7_7:BIGINT, n7_8:BIGINT, n7_9:BIGINT, n7_10:BIGINT, n7_11:DECIMAL(12, 2), n7_12:DECIMAL(12, 2), n7_13:DECIMAL(12, 2)
                                  -- HashJoin[INNER n5_1=n0_0] -> n5_0:BIGINT, n5_1:BIGINT, n5_2:BIGINT, n5_3:DECIMAL(12, 2), n5_4:DECIMAL(12, 2), n5_5:DECIMAL(12, 2), n0_0:BIGINT
                                    -- TableScan[table: hive_table, range filters: [(l_orderkey, Filter(IsNotNull, deterministic, null not allowed)), (l_partkey, Filter(IsNotNull, deterministic, null not allowed)), (l_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n5_0:BIGINT, n5_1:BIGINT, n5_2:BIGINT, n5_3:DECIMAL(12, 2), n5_4:DECIMAL(12, 2), n5_5:DECIMAL(12, 2)
                                    -- ValueStream[] -> n0_0:BIGINT
                              -- ValueStream[] -> n1_0:BIGINT, n1_1:BIGINT
                        -- ValueStream[] -> n2_0:BIGINT, n2_1:BIGINT, n2_2:DECIMAL(12, 2)
                  -- ValueStream[] -> n3_0:BIGINT, n3_1:DATE
            -- ValueStream[] -> n4_0:BIGINT, n4_1:VARCHAR

(47) ColumnarExchange
Input [5]: [hash_partition_key#X, nation#X, o_year#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(nation#X, o_year#X, 100), ENSURE_REQUIREMENTS, [nation#X, o_year#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(48) ShuffleQueryStage
Output [4]: [nation#X, o_year#X, sum#X, isEmpty#X]
Arguments: 5

(49) AQEShuffleRead
Input [4]: [nation#X, o_year#X, sum#X, isEmpty#X]
Arguments: coalesced

(50) InputIteratorTransformer
Input [4]: [nation#X, o_year#X, sum#X, isEmpty#X]

(51) RegularHashAggregateExecTransformer
Input [4]: [nation#X, o_year#X, sum#X, isEmpty#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [sum(amount#X)]
Aggregate Attributes [1]: [sum(amount#X)#X]
Results [3]: [nation#X, o_year#X, sum(amount#X)#X AS sum_profit#X]

(52) WholeStageCodegenTransformer (X)
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: false
Native Plan:
-- Project[expressions: (n3_3:VARCHAR, "n1_4"), (n3_4:INTEGER, "n1_5"), (n3_5:DECIMAL(37, 4), "n2_2")] -> n3_3:VARCHAR, n3_4:INTEGER, n3_5:DECIMAL(37, 4)
  -- Aggregation[SINGLE [n1_4, n1_5] n2_2 := sum_merge_extract("n1_6")] -> n1_4:VARCHAR, n1_5:INTEGER, n2_2:DECIMAL(37, 4)
    -- Project[expressions: (n1_4:VARCHAR, "n0_0"), (n1_5:INTEGER, "n0_1"), (n1_6:ROW<col_0:DECIMAL(37, 4),col_1:BOOLEAN>, row_constructor("n0_2","n0_3"))] -> n1_4:VARCHAR, n1_5:INTEGER, n1_6:ROW<col_0:DECIMAL(37, 4),col_1:BOOLEAN>
      -- ValueStream[] -> n0_0:VARCHAR, n0_1:INTEGER, n0_2:DECIMAL(37, 4), n0_3:BOOLEAN

(53) ColumnarExchange
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: rangepartitioning(nation#X ASC NULLS FIRST, o_year#X DESC NULLS LAST, 100), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(54) ShuffleQueryStage
Output [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: 6

(55) AQEShuffleRead
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: coalesced

(56) InputIteratorTransformer
Input [3]: [nation#X, o_year#X, sum_profit#X]

(57) SortExecTransformer
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: [nation#X ASC NULLS FIRST, o_year#X DESC NULLS LAST], true, 0

(58) WholeStageCodegenTransformer (X)
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: false
Native Plan:
-- OrderBy[n0_0 ASC NULLS FIRST, n0_1 DESC NULLS LAST] -> n0_0:VARCHAR, n0_1:INTEGER, n0_2:DECIMAL(37, 4)
  -- ValueStream[] -> n0_0:VARCHAR, n0_1:INTEGER, n0_2:DECIMAL(37, 4)

(59) VeloxColumnarToRowExec
Input [3]: [nation#X, o_year#X, sum_profit#X]

(60) Scan parquet default.part
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_name), StringContains(p_name,green), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(61) Filter
Input [2]: [p_partkey#X, p_name#X]
Condition : ((isnotnull(p_name#X) AND Contains(p_name#X, green)) AND isnotnull(p_partkey#X))

(62) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(63) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(64) Scan parquet default.lineitem
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(65) Filter
Input [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Condition : ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(66) BroadcastHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(67) Project
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Input [7]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]

(68) Scan parquet default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(69) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(70) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(71) BroadcastHashJoin
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(72) Project
Output [7]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [8]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(73) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(74) Filter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Condition : (isnotnull(ps_suppkey#X) AND isnotnull(ps_partkey#X))

(75) BroadcastExchange
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, bigint, false]),false), [plan_id=X]

(76) BroadcastHashJoin
Left keys [2]: [l_suppkey#X, l_partkey#X]
Right keys [2]: [ps_suppkey#X, ps_partkey#X]
Join condition: None

(77) Project
Output [6]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X]
Input [10]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_partkey#X, ps_suppkey#X, ps_supplycost#X]

(78) Scan parquet default.orders
Output [2]: [o_orderkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date>

(79) Filter
Input [2]: [o_orderkey#X, o_orderdate#X]
Condition : isnotnull(o_orderkey#X)

(80) BroadcastExchange
Input [2]: [o_orderkey#X, o_orderdate#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(81) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(82) Project
Output [6]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X]
Input [8]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderkey#X, o_orderdate#X]

(83) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(84) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : isnotnull(n_nationkey#X)

(85) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(86) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(87) Project
Output [3]: [n_name#X AS nation#X, year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) as decimal(27,4))) - promote_precision(cast(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(l_quantity#X)), DecimalType(25,4)) as decimal(27,4)))), DecimalType(27,4)) AS amount#X]
Input [8]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X, n_nationkey#X, n_name#X]

(88) HashAggregate
Input [3]: [nation#X, o_year#X, amount#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [partial_sum(amount#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [nation#X, o_year#X, sum#X, isEmpty#X]

(89) Exchange
Input [4]: [nation#X, o_year#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(nation#X, o_year#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(90) HashAggregate
Input [4]: [nation#X, o_year#X, sum#X, isEmpty#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [sum(amount#X)]
Aggregate Attributes [1]: [sum(amount#X)#X]
Results [3]: [nation#X, o_year#X, sum(amount#X)#X AS sum_profit#X]

(91) Exchange
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: rangepartitioning(nation#X ASC NULLS FIRST, o_year#X DESC NULLS LAST, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(92) Sort
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: [nation#X ASC NULLS FIRST, o_year#X DESC NULLS LAST], true, 0

(93) AdaptiveSparkPlan
Output [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: isFinalPlan=true
