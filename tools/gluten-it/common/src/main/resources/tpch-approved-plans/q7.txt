== Physical Plan ==
AdaptiveSparkPlan (88)
+- == Final Plan ==
   VeloxColumnarToRowExec (55)
   +- ^ SortExecTransformer (53)
      +- ^ InputIteratorTransformer (52)
         +- AQEShuffleRead (51)
            +- ShuffleQueryStage (50), Statistics(X)
               +- ColumnarExchange (49)
                  +- ^ RegularHashAggregateExecTransformer (47)
                     +- ^ InputIteratorTransformer (46)
                        +- AQEShuffleRead (45)
                           +- ShuffleQueryStage (44), Statistics(X)
                              +- ColumnarExchange (43)
                                 +- ^ ProjectExecTransformer (41)
                                    +- ^ FlushableHashAggregateExecTransformer (40)
                                       +- ^ ProjectExecTransformer (39)
                                          +- ^ GlutenBroadcastHashJoinExecTransformer Inner (38)
                                             :- ^ ProjectExecTransformer (34)
                                             :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (33)
                                             :     :- ^ ProjectExecTransformer (26)
                                             :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (25)
                                             :     :     :- ^ ProjectExecTransformer (18)
                                             :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (17)
                                             :     :     :     :- ^ ProjectExecTransformer (10)
                                             :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (9)
                                             :     :     :     :     :- ^ InputIteratorTransformer (6)
                                             :     :     :     :     :  +- BroadcastQueryStage (5), Statistics(X)
                                             :     :     :     :     :     +- ColumnarBroadcastExchange (4)
                                             :     :     :     :     :        +- ^ FilterExecTransformer (2)
                                             :     :     :     :     :           +- ^ Scan parquet spark_catalog.default.supplier (1)
                                             :     :     :     :     +- ^ FilterExecTransformer (8)
                                             :     :     :     :        +- ^ Scan parquet spark_catalog.default.lineitem (7)
                                             :     :     :     +- ^ InputIteratorTransformer (16)
                                             :     :     :        +- BroadcastQueryStage (15), Statistics(X)
                                             :     :     :           +- ColumnarBroadcastExchange (14)
                                             :     :     :              +- ^ FilterExecTransformer (12)
                                             :     :     :                 +- ^ Scan parquet spark_catalog.default.orders (11)
                                             :     :     +- ^ InputIteratorTransformer (24)
                                             :     :        +- BroadcastQueryStage (23), Statistics(X)
                                             :     :           +- ColumnarBroadcastExchange (22)
                                             :     :              +- ^ FilterExecTransformer (20)
                                             :     :                 +- ^ Scan parquet spark_catalog.default.customer (19)
                                             :     +- ^ InputIteratorTransformer (32)
                                             :        +- BroadcastQueryStage (31), Statistics(X)
                                             :           +- ColumnarBroadcastExchange (30)
                                             :              +- ^ FilterExecTransformer (28)
                                             :                 +- ^ Scan parquet spark_catalog.default.nation (27)
                                             +- ^ InputIteratorTransformer (37)
                                                +- BroadcastQueryStage (36), Statistics(X)
                                                   +- ReusedExchange (35)
+- == Initial Plan ==
   Sort (87)
   +- Exchange (86)
      +- HashAggregate (85)
         +- Exchange (84)
            +- HashAggregate (83)
               +- Project (82)
                  +- BroadcastHashJoin Inner BuildRight (81)
                     :- Project (77)
                     :  +- BroadcastHashJoin Inner BuildRight (76)
                     :     :- Project (72)
                     :     :  +- BroadcastHashJoin Inner BuildRight (71)
                     :     :     :- Project (67)
                     :     :     :  +- BroadcastHashJoin Inner BuildRight (66)
                     :     :     :     :- Project (62)
                     :     :     :     :  +- BroadcastHashJoin Inner BuildLeft (61)
                     :     :     :     :     :- BroadcastExchange (58)
                     :     :     :     :     :  +- Filter (57)
                     :     :     :     :     :     +- Scan parquet spark_catalog.default.supplier (56)
                     :     :     :     :     +- Filter (60)
                     :     :     :     :        +- Scan parquet spark_catalog.default.lineitem (59)
                     :     :     :     +- BroadcastExchange (65)
                     :     :     :        +- Filter (64)
                     :     :     :           +- Scan parquet spark_catalog.default.orders (63)
                     :     :     +- BroadcastExchange (70)
                     :     :        +- Filter (69)
                     :     :           +- Scan parquet spark_catalog.default.customer (68)
                     :     +- BroadcastExchange (75)
                     :        +- Filter (74)
                     :           +- Scan parquet spark_catalog.default.nation (73)
                     +- BroadcastExchange (80)
                        +- Filter (79)
                           +- Scan parquet spark_catalog.default.nation (78)


(1) Scan parquet spark_catalog.default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(2) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(3) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false
Native Plan:
-- TableScan

(4) ColumnarBroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(5) BroadcastQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: 0

(6) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(7) Scan parquet spark_catalog.default.lineitem
Output [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-01-01), LessThanOrEqual(l_shipdate,1996-12-31), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(8) FilterExecTransformer
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1995-01-01)) AND (l_shipdate#X <= 1996-12-31)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(9) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join type: Inner
Join condition: None

(10) ProjectExecTransformer
Input [7]: [s_suppkey#X, s_nationkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(11) Scan parquet spark_catalog.default.orders
Output [2]: [o_orderkey#X, o_custkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>

(12) FilterExecTransformer
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: (isnotnull(o_orderkey#X) AND isnotnull(o_custkey#X))

(13) WholeStageCodegenTransformer (X)
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: false
Native Plan:
-- TableScan

(14) ColumnarBroadcastExchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(15) BroadcastQueryStage
Output [2]: [o_orderkey#X, o_custkey#X]
Arguments: 1

(16) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_custkey#X]

(17) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join type: Inner
Join condition: None

(18) ProjectExecTransformer
Input [7]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_orderkey#X, o_custkey#X]
Arguments: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]

(19) Scan parquet spark_catalog.default.customer
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(20) FilterExecTransformer
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(21) WholeStageCodegenTransformer (X)
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: false
Native Plan:
-- TableScan

(22) ColumnarBroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(23) BroadcastQueryStage
Output [2]: [c_custkey#X, c_nationkey#X]
Arguments: 2

(24) InputIteratorTransformer
Input [2]: [c_custkey#X, c_nationkey#X]

(25) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join type: Inner
Join condition: None

(26) ProjectExecTransformer
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X, c_custkey#X, c_nationkey#X]
Arguments: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]

(27) Scan parquet spark_catalog.default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,FRANCE),EqualTo(n_name,GERMANY))]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(28) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: (isnotnull(n_nationkey#X) AND ((n_name#X = FRANCE) OR (n_name#X = GERMANY)))

(29) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_name#X]
Arguments: false
Native Plan:
-- TableScan

(30) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(31) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: 3

(32) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(33) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(34) ProjectExecTransformer
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_nationkey#X, n_name#X]
Arguments: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]

(35) ReusedExchange [Reuses operator id: 30]
Output [2]: [n_nationkey#X, n_name#X]

(36) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: 5

(37) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(38) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: (((n_name#X = FRANCE) AND (n_name#X = GERMANY)) OR ((n_name#X = GERMANY) AND (n_name#X = FRANCE)))

(39) ProjectExecTransformer
Input [7]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X, n_nationkey#X, n_name#X]
Arguments: [n_name#X AS supp_nation#X, n_name#X AS cust_nation#X, year(l_shipdate#X) AS l_year#X, (l_extendedprice#X * (1 - l_discount#X)) AS volume#X]

(40) FlushableHashAggregateExecTransformer
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, volume#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [partial_sum(volume#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(41) ProjectExecTransformer
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: [hash(supp_nation#X, cust_nation#X, l_year#X, 42) AS hash_partition_key#X, supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(42) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project
  -- Project
    -- Aggregation
      -- Project
        -- Project
          -- HashJoin
            -- Project
              -- Project
                -- HashJoin
                  -- Project
                    -- Project
                      -- HashJoin
                        -- Project
                          -- Project
                            -- HashJoin
                              -- Project
                                -- Project
                                  -- HashJoin
                                    -- TableScan
                                    -- ValueStream
                              -- ValueStream
                        -- ValueStream
                  -- ValueStream
            -- ValueStream

(43) ColumnarExchange
Input [6]: [hash_partition_key#X, supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(supp_nation#X, cust_nation#X, l_year#X, 100), ENSURE_REQUIREMENTS, [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(44) ShuffleQueryStage
Output [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: 6

(45) AQEShuffleRead
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: coalesced

(46) InputIteratorTransformer
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(47) RegularHashAggregateExecTransformer
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [sum(volume#X)]
Aggregate Attributes [1]: [sum(volume#X)#X]
Results [4]: [supp_nation#X, cust_nation#X, l_year#X, sum(volume#X)#X AS revenue#X]

(48) WholeStageCodegenTransformer (X)
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: false
Native Plan:
-- Project
  -- Aggregation
    -- Project
      -- ValueStream

(49) ColumnarExchange
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: rangepartitioning(supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(50) ShuffleQueryStage
Output [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: 7

(51) AQEShuffleRead
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: coalesced

(52) InputIteratorTransformer
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]

(53) SortExecTransformer
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: [supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST], true, 0

(54) WholeStageCodegenTransformer (X)
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: false
Native Plan:
-- OrderBy
  -- ValueStream

(55) VeloxColumnarToRowExec
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]

(56) Scan parquet spark_catalog.default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(57) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(58) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(59) Scan parquet spark_catalog.default.lineitem
Output [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-01-01), LessThanOrEqual(l_shipdate,1996-12-31), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(60) Filter
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Condition : ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1995-01-01)) AND (l_shipdate#X <= 1996-12-31)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(61) BroadcastHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join type: Inner
Join condition: None

(62) Project
Output [5]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Input [7]: [s_suppkey#X, s_nationkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(63) Scan parquet spark_catalog.default.orders
Output [2]: [o_orderkey#X, o_custkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>

(64) Filter
Input [2]: [o_orderkey#X, o_custkey#X]
Condition : (isnotnull(o_orderkey#X) AND isnotnull(o_custkey#X))

(65) BroadcastExchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(66) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join type: Inner
Join condition: None

(67) Project
Output [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]
Input [7]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_orderkey#X, o_custkey#X]

(68) Scan parquet spark_catalog.default.customer
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(69) Filter
Input [2]: [c_custkey#X, c_nationkey#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(70) BroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(71) BroadcastHashJoin
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join type: Inner
Join condition: None

(72) Project
Output [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X, c_custkey#X, c_nationkey#X]

(73) Scan parquet spark_catalog.default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,FRANCE),EqualTo(n_name,GERMANY))]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(74) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : (isnotnull(n_nationkey#X) AND ((n_name#X = FRANCE) OR (n_name#X = GERMANY)))

(75) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(76) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(77) Project
Output [5]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_nationkey#X, n_name#X]

(78) Scan parquet spark_catalog.default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,GERMANY),EqualTo(n_name,FRANCE))]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(79) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : (isnotnull(n_nationkey#X) AND ((n_name#X = GERMANY) OR (n_name#X = FRANCE)))

(80) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(81) BroadcastHashJoin
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: (((n_name#X = FRANCE) AND (n_name#X = GERMANY)) OR ((n_name#X = GERMANY) AND (n_name#X = FRANCE)))

(82) Project
Output [4]: [n_name#X AS supp_nation#X, n_name#X AS cust_nation#X, year(l_shipdate#X) AS l_year#X, (l_extendedprice#X * (1 - l_discount#X)) AS volume#X]
Input [7]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X, n_nationkey#X, n_name#X]

(83) HashAggregate
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, volume#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [partial_sum(volume#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(84) Exchange
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(supp_nation#X, cust_nation#X, l_year#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(85) HashAggregate
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [sum(volume#X)]
Aggregate Attributes [1]: [sum(volume#X)#X]
Results [4]: [supp_nation#X, cust_nation#X, l_year#X, sum(volume#X)#X AS revenue#X]

(86) Exchange
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: rangepartitioning(supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(87) Sort
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: [supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST], true, 0

(88) AdaptiveSparkPlan
Output [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: isFinalPlan=true
