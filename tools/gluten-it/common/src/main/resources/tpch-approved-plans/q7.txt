== Physical Plan ==
AdaptiveSparkPlan (88)
+- == Final Plan ==
   VeloxColumnarToRowExec (55)
   +- ^ SortExecTransformer (53)
      +- ^ InputIteratorTransformer (52)
         +- AQEShuffleRead (51)
            +- ShuffleQueryStage (50), Statistics(X)
               +- ColumnarExchange (49)
                  +- ^ RegularHashAggregateExecTransformer (47)
                     +- ^ InputIteratorTransformer (46)
                        +- AQEShuffleRead (45)
                           +- ShuffleQueryStage (44), Statistics(X)
                              +- ColumnarExchange (43)
                                 +- ^ ProjectExecTransformer (41)
                                    +- ^ FlushableHashAggregateExecTransformer (40)
                                       +- ^ ProjectExecTransformer (39)
                                          +- ^ GlutenBroadcastHashJoinExecTransformer Inner (38)
                                             :- ^ ProjectExecTransformer (34)
                                             :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (33)
                                             :     :- ^ ProjectExecTransformer (26)
                                             :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (25)
                                             :     :     :- ^ ProjectExecTransformer (18)
                                             :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (17)
                                             :     :     :     :- ^ ProjectExecTransformer (10)
                                             :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (9)
                                             :     :     :     :     :- ^ InputIteratorTransformer (6)
                                             :     :     :     :     :  +- BroadcastQueryStage (5), Statistics(X)
                                             :     :     :     :     :     +- ColumnarBroadcastExchange (4)
                                             :     :     :     :     :        +- ^ FilterExecTransformer (2)
                                             :     :     :     :     :           +- ^ Scan parquet default.supplier (1)
                                             :     :     :     :     +- ^ FilterExecTransformer (8)
                                             :     :     :     :        +- ^ Scan parquet default.lineitem (7)
                                             :     :     :     +- ^ InputIteratorTransformer (16)
                                             :     :     :        +- BroadcastQueryStage (15), Statistics(X)
                                             :     :     :           +- ColumnarBroadcastExchange (14)
                                             :     :     :              +- ^ FilterExecTransformer (12)
                                             :     :     :                 +- ^ Scan parquet default.orders (11)
                                             :     :     +- ^ InputIteratorTransformer (24)
                                             :     :        +- BroadcastQueryStage (23), Statistics(X)
                                             :     :           +- ColumnarBroadcastExchange (22)
                                             :     :              +- ^ FilterExecTransformer (20)
                                             :     :                 +- ^ Scan parquet default.customer (19)
                                             :     +- ^ InputIteratorTransformer (32)
                                             :        +- BroadcastQueryStage (31), Statistics(X)
                                             :           +- ColumnarBroadcastExchange (30)
                                             :              +- ^ FilterExecTransformer (28)
                                             :                 +- ^ Scan parquet default.nation (27)
                                             +- ^ InputIteratorTransformer (37)
                                                +- BroadcastQueryStage (36), Statistics(X)
                                                   +- ReusedExchange (35)
+- == Initial Plan ==
   Sort (87)
   +- Exchange (86)
      +- HashAggregate (85)
         +- Exchange (84)
            +- HashAggregate (83)
               +- Project (82)
                  +- BroadcastHashJoin Inner BuildRight (81)
                     :- Project (77)
                     :  +- BroadcastHashJoin Inner BuildRight (76)
                     :     :- Project (72)
                     :     :  +- BroadcastHashJoin Inner BuildRight (71)
                     :     :     :- Project (67)
                     :     :     :  +- BroadcastHashJoin Inner BuildRight (66)
                     :     :     :     :- Project (62)
                     :     :     :     :  +- BroadcastHashJoin Inner BuildLeft (61)
                     :     :     :     :     :- BroadcastExchange (58)
                     :     :     :     :     :  +- Filter (57)
                     :     :     :     :     :     +- Scan parquet default.supplier (56)
                     :     :     :     :     +- Filter (60)
                     :     :     :     :        +- Scan parquet default.lineitem (59)
                     :     :     :     +- BroadcastExchange (65)
                     :     :     :        +- Filter (64)
                     :     :     :           +- Scan parquet default.orders (63)
                     :     :     +- BroadcastExchange (70)
                     :     :        +- Filter (69)
                     :     :           +- Scan parquet default.customer (68)
                     :     +- BroadcastExchange (75)
                     :        +- Filter (74)
                     :           +- Scan parquet default.nation (73)
                     +- BroadcastExchange (80)
                        +- Filter (79)
                           +- Scan parquet default.nation (78)


(1) Scan parquet default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(2) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(3) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(s_nationkey, Filter(IsNotNull, deterministic, null not allowed)), (s_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT

(4) ColumnarBroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(5) BroadcastQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: 0

(6) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(7) Scan parquet default.lineitem
Output [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-01-01), LessThanOrEqual(l_shipdate,1996-12-31), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(8) FilterExecTransformer
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1995-01-01)) AND (l_shipdate#X <= 1996-12-31)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(9) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(10) ProjectExecTransformer
Input [7]: [s_suppkey#X, s_nationkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(11) Scan parquet default.orders
Output [2]: [o_orderkey#X, o_custkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>

(12) FilterExecTransformer
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: (isnotnull(o_orderkey#X) AND isnotnull(o_custkey#X))

(13) WholeStageCodegenTransformer (X)
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(o_custkey, Filter(IsNotNull, deterministic, null not allowed)), (o_orderkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT

(14) ColumnarBroadcastExchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(15) BroadcastQueryStage
Output [2]: [o_orderkey#X, o_custkey#X]
Arguments: 1

(16) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_custkey#X]

(17) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(18) ProjectExecTransformer
Input [7]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_orderkey#X, o_custkey#X]
Arguments: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]

(19) Scan parquet default.customer
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(20) FilterExecTransformer
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(21) WholeStageCodegenTransformer (X)
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(c_custkey, Filter(IsNotNull, deterministic, null not allowed)), (c_nationkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n0_0:BIGINT, n0_1:BIGINT

(22) ColumnarBroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(23) BroadcastQueryStage
Output [2]: [c_custkey#X, c_nationkey#X]
Arguments: 2

(24) InputIteratorTransformer
Input [2]: [c_custkey#X, c_nationkey#X]

(25) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(26) ProjectExecTransformer
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X, c_custkey#X, c_nationkey#X]
Arguments: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]

(27) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,FRANCE),EqualTo(n_name,GERMANY))]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(28) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: (isnotnull(n_nationkey#X) AND ((n_name#X = FRANCE) OR (n_name#X = GERMANY)))

(29) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_name#X]
Arguments: false
Native Plan:
-- TableScan[table: hive_table, range filters: [(n_nationkey, Filter(IsNotNull, deterministic, null not allowed))], remaining filter: (or(equalto("n_name","FRANCE"),equalto("n_name","GERMANY")))] -> n0_0:BIGINT, n0_1:VARCHAR

(30) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(31) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: 3

(32) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(33) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(34) ProjectExecTransformer
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_nationkey#X, n_name#X]
Arguments: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]

(35) ReusedExchange [Reuses operator id: 30]
Output [2]: [n_nationkey#X, n_name#X]

(36) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: 5

(37) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(38) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: (((n_name#X = FRANCE) AND (n_name#X = GERMANY)) OR ((n_name#X = GERMANY) AND (n_name#X = FRANCE)))

(39) ProjectExecTransformer
Input [7]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X, n_nationkey#X, n_name#X]
Arguments: [n_name#X AS supp_nation#X, n_name#X AS cust_nation#X, year(l_shipdate#X) AS l_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) AS volume#X]

(40) FlushableHashAggregateExecTransformer
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, volume#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [partial_sum(volume#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(41) ProjectExecTransformer
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: [hash(supp_nation#X, cust_nation#X, l_year#X, 42) AS hash_partition_key#X, supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(42) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project[expressions: (n23_5:INTEGER, hash_with_seed(42,"n22_4","n22_5","n22_6")), (n23_6:VARCHAR, "n22_4"), (n23_7:VARCHAR, "n22_5"), (n23_8:INTEGER, "n22_6"), (n23_9:DECIMAL(36, 4), "n22_7"), (n23_10:BOOLEAN, "n22_8")] -> n23_5:INTEGER, n23_6:VARCHAR, n23_7:VARCHAR, n23_8:INTEGER, n23_9:DECIMAL(36, 4), n23_10:BOOLEAN
  -- Project[expressions: (n22_4:VARCHAR, "n20_7"), (n22_5:VARCHAR, "n20_8"), (n22_6:INTEGER, "n20_9"), (n22_7:DECIMAL(36, 4), "n21_3"["col_0"]), (n22_8:BOOLEAN, "n21_3"["col_1"])] -> n22_4:VARCHAR, n22_5:VARCHAR, n22_6:INTEGER, n22_7:DECIMAL(36, 4), n22_8:BOOLEAN
    -- Aggregation[PARTIAL [n20_7, n20_8, n20_9] n21_3 := sum_partial("n20_10")] -> n20_7:VARCHAR, n20_8:VARCHAR, n20_9:INTEGER, n21_3:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>
      -- Project[expressions: (n20_7:VARCHAR, "n19_11"), (n20_8:VARCHAR, "n19_13"), (n20_9:INTEGER, year("n19_9")), (n20_10:DECIMAL(26, 4), try_cast multiply("n19_7",try_cast subtract(try_cast 1.00 as DECIMAL(1, 0),"n19_8") as DECIMAL(13, 2)) as DECIMAL(26, 4))] -> n20_7:VARCHAR, n20_8:VARCHAR, n20_9:INTEGER, n20_10:DECIMAL(26, 4)
        -- Project[expressions: (n19_7:DECIMAL(12, 2), "n17_7"), (n19_8:DECIMAL(12, 2), "n17_8"), (n19_9:DATE, "n17_9"), (n19_10:BIGINT, "n17_10"), (n19_11:VARCHAR, "n17_11"), (n19_12:BIGINT, "n4_0"), (n19_13:VARCHAR, "n4_1")] -> n19_7:DECIMAL(12, 2), n19_8:DECIMAL(12, 2), n19_9:DATE, n19_10:BIGINT, n19_11:VARCHAR, n19_12:BIGINT, n19_13:VARCHAR
          -- HashJoin[INNER n17_10=n4_0, filter: or(and(equalto("n17_11","FRANCE"),equalto("n4_1","GERMANY")),and(equalto("n17_11","GERMANY"),equalto("n4_1","FRANCE")))] -> n17_7:DECIMAL(12, 2), n17_8:DECIMAL(12, 2), n17_9:DATE, n17_10:BIGINT, n17_11:VARCHAR, n4_0:BIGINT, n4_1:VARCHAR
            -- Project[expressions: (n17_7:DECIMAL(12, 2), "n16_8"), (n17_8:DECIMAL(12, 2), "n16_9"), (n17_9:DATE, "n16_10"), (n17_10:BIGINT, "n16_11"), (n17_11:VARCHAR, "n16_13")] -> n17_7:DECIMAL(12, 2), n17_8:DECIMAL(12, 2), n17_9:DATE, n17_10:BIGINT, n17_11:VARCHAR
              -- Project[expressions: (n16_7:BIGINT, "n14_7"), (n16_8:DECIMAL(12, 2), "n14_8"), (n16_9:DECIMAL(12, 2), "n14_9"), (n16_10:DATE, "n14_10"), (n16_11:BIGINT, "n14_11"), (n16_12:BIGINT, "n3_0"), (n16_13:VARCHAR, "n3_1")] -> n16_7:BIGINT, n16_8:DECIMAL(12, 2), n16_9:DECIMAL(12, 2), n16_10:DATE, n16_11:BIGINT, n16_12:BIGINT, n16_13:VARCHAR
                -- HashJoin[INNER n14_7=n3_0] -> n14_7:BIGINT, n14_8:DECIMAL(12, 2), n14_9:DECIMAL(12, 2), n14_10:DATE, n14_11:BIGINT, n3_0:BIGINT, n3_1:VARCHAR
                  -- Project[expressions: (n14_7:BIGINT, "n13_7"), (n14_8:DECIMAL(12, 2), "n13_8"), (n14_9:DECIMAL(12, 2), "n13_9"), (n14_10:DATE, "n13_10"), (n14_11:BIGINT, "n13_13")] -> n14_7:BIGINT, n14_8:DECIMAL(12, 2), n14_9:DECIMAL(12, 2), n14_10:DATE, n14_11:BIGINT
                    -- Project[expressions: (n13_7:BIGINT, "n11_7"), (n13_8:DECIMAL(12, 2), "n11_8"), (n13_9:DECIMAL(12, 2), "n11_9"), (n13_10:DATE, "n11_10"), (n13_11:BIGINT, "n11_11"), (n13_12:BIGINT, "n2_0"), (n13_13:BIGINT, "n2_1")] -> n13_7:BIGINT, n13_8:DECIMAL(12, 2), n13_9:DECIMAL(12, 2), n13_10:DATE, n13_11:BIGINT, n13_12:BIGINT, n13_13:BIGINT
                      -- HashJoin[INNER n11_11=n2_0] -> n11_7:BIGINT, n11_8:DECIMAL(12, 2), n11_9:DECIMAL(12, 2), n11_10:DATE, n11_11:BIGINT, n2_0:BIGINT, n2_1:BIGINT
                        -- Project[expressions: (n11_7:BIGINT, "n10_7"), (n11_8:DECIMAL(12, 2), "n10_9"), (n11_9:DECIMAL(12, 2), "n10_10"), (n11_10:DATE, "n10_11"), (n11_11:BIGINT, "n10_13")] -> n11_7:BIGINT, n11_8:DECIMAL(12, 2), n11_9:DECIMAL(12, 2), n11_10:DATE, n11_11:BIGINT
                          -- Project[expressions: (n10_7:BIGINT, "n8_7"), (n10_8:BIGINT, "n8_8"), (n10_9:DECIMAL(12, 2), "n8_9"), (n10_10:DECIMAL(12, 2), "n8_10"), (n10_11:DATE, "n8_11"), (n10_12:BIGINT, "n1_0"), (n10_13:BIGINT, "n1_1")] -> n10_7:BIGINT, n10_8:BIGINT, n10_9:DECIMAL(12, 2), n10_10:DECIMAL(12, 2), n10_11:DATE, n10_12:BIGINT, n10_13:BIGINT
                            -- HashJoin[INNER n8_8=n1_0] -> n8_7:BIGINT, n8_8:BIGINT, n8_9:DECIMAL(12, 2), n8_10:DECIMAL(12, 2), n8_11:DATE, n1_0:BIGINT, n1_1:BIGINT
                              -- Project[expressions: (n8_7:BIGINT, "n7_8"), (n8_8:BIGINT, "n7_9"), (n8_9:DECIMAL(12, 2), "n7_11"), (n8_10:DECIMAL(12, 2), "n7_12"), (n8_11:DATE, "n7_13")] -> n8_7:BIGINT, n8_8:BIGINT, n8_9:DECIMAL(12, 2), n8_10:DECIMAL(12, 2), n8_11:DATE
                                -- Project[expressions: (n7_7:BIGINT, "n0_0"), (n7_8:BIGINT, "n0_1"), (n7_9:BIGINT, "n5_0"), (n7_10:BIGINT, "n5_1"), (n7_11:DECIMAL(12, 2), "n5_2"), (n7_12:DECIMAL(12, 2), "n5_3"), (n7_13:DATE, "n5_4")] -> n7_7:BIGINT, n7_8:BIGINT, n7_9:BIGINT, n7_10:BIGINT, n7_11:DECIMAL(12, 2), n7_12:DECIMAL(12, 2), n7_13:DATE
                                  -- HashJoin[INNER n5_1=n0_0] -> n5_0:BIGINT, n5_1:BIGINT, n5_2:DECIMAL(12, 2), n5_3:DECIMAL(12, 2), n5_4:DATE, n0_0:BIGINT, n0_1:BIGINT
                                    -- TableScan[table: hive_table, range filters: [(l_orderkey, Filter(IsNotNull, deterministic, null not allowed)), (l_shipdate, BigintRange: [9131, 9861] no nulls), (l_suppkey, Filter(IsNotNull, deterministic, null not allowed))]] -> n5_0:BIGINT, n5_1:BIGINT, n5_2:DECIMAL(12, 2), n5_3:DECIMAL(12, 2), n5_4:DATE
                                    -- ValueStream[] -> n0_0:BIGINT, n0_1:BIGINT
                              -- ValueStream[] -> n1_0:BIGINT, n1_1:BIGINT
                        -- ValueStream[] -> n2_0:BIGINT, n2_1:BIGINT
                  -- ValueStream[] -> n3_0:BIGINT, n3_1:VARCHAR
            -- ValueStream[] -> n4_0:BIGINT, n4_1:VARCHAR

(43) ColumnarExchange
Input [6]: [hash_partition_key#X, supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(supp_nation#X, cust_nation#X, l_year#X, 100), ENSURE_REQUIREMENTS, [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(44) ShuffleQueryStage
Output [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: 6

(45) AQEShuffleRead
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: coalesced

(46) InputIteratorTransformer
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(47) RegularHashAggregateExecTransformer
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [sum(volume#X)]
Aggregate Attributes [1]: [sum(volume#X)#X]
Results [4]: [supp_nation#X, cust_nation#X, l_year#X, sum(volume#X)#X AS revenue#X]

(48) WholeStageCodegenTransformer (X)
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: false
Native Plan:
-- Project[expressions: (n3_4:VARCHAR, "n1_5"), (n3_5:VARCHAR, "n1_6"), (n3_6:INTEGER, "n1_7"), (n3_7:DECIMAL(36, 4), "n2_3")] -> n3_4:VARCHAR, n3_5:VARCHAR, n3_6:INTEGER, n3_7:DECIMAL(36, 4)
  -- Aggregation[SINGLE [n1_5, n1_6, n1_7] n2_3 := sum_merge_extract("n1_8")] -> n1_5:VARCHAR, n1_6:VARCHAR, n1_7:INTEGER, n2_3:DECIMAL(36, 4)
    -- Project[expressions: (n1_5:VARCHAR, "n0_0"), (n1_6:VARCHAR, "n0_1"), (n1_7:INTEGER, "n0_2"), (n1_8:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>, row_constructor("n0_3","n0_4"))] -> n1_5:VARCHAR, n1_6:VARCHAR, n1_7:INTEGER, n1_8:ROW<col_0:DECIMAL(36, 4),col_1:BOOLEAN>
      -- ValueStream[] -> n0_0:VARCHAR, n0_1:VARCHAR, n0_2:INTEGER, n0_3:DECIMAL(36, 4), n0_4:BOOLEAN

(49) ColumnarExchange
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: rangepartitioning(supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(50) ShuffleQueryStage
Output [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: 7

(51) AQEShuffleRead
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: coalesced

(52) InputIteratorTransformer
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]

(53) SortExecTransformer
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: [supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST], true, 0

(54) WholeStageCodegenTransformer (X)
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: false
Native Plan:
-- OrderBy[n0_0 ASC NULLS FIRST, n0_1 ASC NULLS FIRST, n0_2 ASC NULLS FIRST] -> n0_0:VARCHAR, n0_1:VARCHAR, n0_2:INTEGER, n0_3:DECIMAL(36, 4)
  -- ValueStream[] -> n0_0:VARCHAR, n0_1:VARCHAR, n0_2:INTEGER, n0_3:DECIMAL(36, 4)

(55) VeloxColumnarToRowExec
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]

(56) Scan parquet default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(57) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(58) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(59) Scan parquet default.lineitem
Output [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-01-01), LessThanOrEqual(l_shipdate,1996-12-31), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(60) Filter
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Condition : ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1995-01-01)) AND (l_shipdate#X <= 1996-12-31)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(61) BroadcastHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(62) Project
Output [5]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Input [7]: [s_suppkey#X, s_nationkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(63) Scan parquet default.orders
Output [2]: [o_orderkey#X, o_custkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>

(64) Filter
Input [2]: [o_orderkey#X, o_custkey#X]
Condition : (isnotnull(o_orderkey#X) AND isnotnull(o_custkey#X))

(65) BroadcastExchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(66) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(67) Project
Output [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]
Input [7]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_orderkey#X, o_custkey#X]

(68) Scan parquet default.customer
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(69) Filter
Input [2]: [c_custkey#X, c_nationkey#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(70) BroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(71) BroadcastHashJoin
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(72) Project
Output [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X, c_custkey#X, c_nationkey#X]

(73) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,FRANCE),EqualTo(n_name,GERMANY))]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(74) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : (isnotnull(n_nationkey#X) AND ((n_name#X = FRANCE) OR (n_name#X = GERMANY)))

(75) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(76) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(77) Project
Output [5]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_nationkey#X, n_name#X]

(78) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,GERMANY),EqualTo(n_name,FRANCE))]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(79) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : (isnotnull(n_nationkey#X) AND ((n_name#X = GERMANY) OR (n_name#X = FRANCE)))

(80) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(81) BroadcastHashJoin
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: (((n_name#X = FRANCE) AND (n_name#X = GERMANY)) OR ((n_name#X = GERMANY) AND (n_name#X = FRANCE)))

(82) Project
Output [4]: [n_name#X AS supp_nation#X, n_name#X AS cust_nation#X, year(l_shipdate#X) AS l_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) AS volume#X]
Input [7]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X, n_nationkey#X, n_name#X]

(83) HashAggregate
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, volume#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [partial_sum(volume#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(84) Exchange
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(supp_nation#X, cust_nation#X, l_year#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(85) HashAggregate
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [sum(volume#X)]
Aggregate Attributes [1]: [sum(volume#X)#X]
Results [4]: [supp_nation#X, cust_nation#X, l_year#X, sum(volume#X)#X AS revenue#X]

(86) Exchange
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: rangepartitioning(supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(87) Sort
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: [supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST], true, 0

(88) AdaptiveSparkPlan
Output [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: isFinalPlan=true
