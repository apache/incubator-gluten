== Physical Plan ==
AdaptiveSparkPlan (43)
+- == Final Plan ==
   VeloxColumnarToRowExec (28)
   +- ^ SortExecTransformer (26)
      +- ^ InputIteratorTransformer (25)
         +- AQEShuffleRead (24)
            +- ShuffleQueryStage (23), Statistics(X)
               +- ColumnarExchange (22)
                  +- ^ RegularHashAggregateExecTransformer (20)
                     +- ^ InputIteratorTransformer (19)
                        +- AQEShuffleRead (18)
                           +- ShuffleQueryStage (17), Statistics(X)
                              +- ColumnarExchange (16)
                                 +- ^ ProjectExecTransformer (14)
                                    +- ^ FlushableHashAggregateExecTransformer (13)
                                       +- ^ ProjectExecTransformer (12)
                                          +- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (11)
                                             :- ^ ProjectExecTransformer (3)
                                             :  +- ^ FilterExecTransformer (2)
                                             :     +- ^ Scan parquet default.orders (1)
                                             +- ^ InputIteratorTransformer (10)
                                                +- BroadcastQueryStage (9), Statistics(X)
                                                   +- ColumnarBroadcastExchange (8)
                                                      +- ^ ProjectExecTransformer (6)
                                                         +- ^ FilterExecTransformer (5)
                                                            +- ^ Scan parquet default.lineitem (4)
+- == Initial Plan ==
   Sort (42)
   +- Exchange (41)
      +- HashAggregate (40)
         +- Exchange (39)
            +- HashAggregate (38)
               +- Project (37)
                  +- BroadcastHashJoin LeftSemi BuildRight (36)
                     :- Project (31)
                     :  +- Filter (30)
                     :     +- Scan parquet default.orders (29)
                     +- BroadcastExchange (35)
                        +- Project (34)
                           +- Filter (33)
                              +- Scan parquet default.lineitem (32)


(1) Scan parquet default.orders
Output [3]: [o_orderkey#X, o_orderpriority#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1993-07-01), LessThan(o_orderdate,1993-10-01)]
ReadSchema: struct<o_orderkey:bigint,o_orderpriority:string,o_orderdate:date>

(2) FilterExecTransformer
Input [3]: [o_orderkey#X, o_orderpriority#X, o_orderdate#X]
Arguments: ((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1993-07-01)) AND (o_orderdate#X < 1993-10-01))

(3) ProjectExecTransformer
Input [3]: [o_orderkey#X, o_orderpriority#X, o_orderdate#X]
Arguments: [o_orderkey#X, o_orderpriority#X]

(4) Scan parquet default.lineitem
Output [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date>

(5) FilterExecTransformer
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND (l_commitdate#X < l_receiptdate#X))

(6) ProjectExecTransformer
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: [l_orderkey#X]

(7) WholeStageCodegenTransformer (X)
Input [1]: [l_orderkey#X]
Arguments: false
Native Plan:
-- Project[expressions: (n1_3:BIGINT, "n0_0")] -> n1_3:BIGINT
  -- TableScan[table: hive_table, range filters: [(l_commitdate, Filter(IsNotNull, deterministic, null not allowed)), (l_receiptdate, Filter(IsNotNull, deterministic, null not allowed))], remaining filter: (lessthan("l_commitdate","l_receiptdate"))] -> n0_0:BIGINT, n0_1:DATE, n0_2:DATE

(8) ColumnarBroadcastExchange
Input [1]: [l_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(9) BroadcastQueryStage
Output [1]: [l_orderkey#X]
Arguments: 0

(10) InputIteratorTransformer
Input [1]: [l_orderkey#X]

(11) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(12) ProjectExecTransformer
Input [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: [o_orderpriority#X]

(13) FlushableHashAggregateExecTransformer
Input [1]: [o_orderpriority#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [o_orderpriority#X, count#X]

(14) ProjectExecTransformer
Input [2]: [o_orderpriority#X, count#X]
Arguments: [hash(o_orderpriority#X, 42) AS hash_partition_key#X, o_orderpriority#X, count#X]

(15) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: false
Native Plan:
-- Project[expressions: (n7_2:INTEGER, hash_with_seed(42,"n5_2")), (n7_3:VARCHAR, "n5_2"), (n7_4:BIGINT, "n6_1")] -> n7_2:INTEGER, n7_3:VARCHAR, n7_4:BIGINT
  -- Aggregation[PARTIAL [n5_2] n6_1 := count_partial(1)] -> n5_2:VARCHAR, n6_1:BIGINT
    -- Project[expressions: (n5_2:VARCHAR, "n4_3")] -> n5_2:VARCHAR
      -- Project[expressions: (n4_2:BIGINT, "n2_3"), (n4_3:VARCHAR, "n2_4")] -> n4_2:BIGINT, n4_3:VARCHAR
        -- HashJoin[LEFT SEMI (FILTER) n2_3=n0_0] -> n2_3:BIGINT, n2_4:VARCHAR
          -- Project[expressions: (n2_3:BIGINT, "n1_0"), (n2_4:VARCHAR, "n1_1")] -> n2_3:BIGINT, n2_4:VARCHAR
            -- TableScan[table: hive_table, range filters: [(o_orderdate, BigintRange: [8582, 8673] no nulls)]] -> n1_0:BIGINT, n1_1:VARCHAR, n1_2:DATE
          -- ValueStream[] -> n0_0:BIGINT

(16) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: hashpartitioning(o_orderpriority#X, 100), ENSURE_REQUIREMENTS, [o_orderpriority#X, count#X], [plan_id=X], [id=#X]

(17) ShuffleQueryStage
Output [2]: [o_orderpriority#X, count#X]
Arguments: 1

(18) AQEShuffleRead
Input [2]: [o_orderpriority#X, count#X]
Arguments: coalesced

(19) InputIteratorTransformer
Input [2]: [o_orderpriority#X, count#X]

(20) RegularHashAggregateExecTransformer
Input [2]: [o_orderpriority#X, count#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [o_orderpriority#X, count(1)#X AS order_count#X]

(21) WholeStageCodegenTransformer (X)
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: false
Native Plan:
-- Project[expressions: (n2_2:VARCHAR, "n0_0"), (n2_3:BIGINT, "n1_1")] -> n2_2:VARCHAR, n2_3:BIGINT
  -- Aggregation[SINGLE [n0_0] n1_1 := count_merge_extract("n0_1")] -> n0_0:VARCHAR, n1_1:BIGINT
    -- ValueStream[] -> n0_0:VARCHAR, n0_1:BIGINT

(22) ColumnarExchange
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: rangepartitioning(o_orderpriority#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(23) ShuffleQueryStage
Output [2]: [o_orderpriority#X, order_count#X]
Arguments: 2

(24) AQEShuffleRead
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: coalesced

(25) InputIteratorTransformer
Input [2]: [o_orderpriority#X, order_count#X]

(26) SortExecTransformer
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: [o_orderpriority#X ASC NULLS FIRST], true, 0

(27) WholeStageCodegenTransformer (X)
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: false
Native Plan:
-- OrderBy[n0_0 ASC NULLS FIRST] -> n0_0:VARCHAR, n0_1:BIGINT
  -- ValueStream[] -> n0_0:VARCHAR, n0_1:BIGINT

(28) VeloxColumnarToRowExec
Input [2]: [o_orderpriority#X, order_count#X]

(29) Scan parquet default.orders
Output [3]: [o_orderkey#X, o_orderpriority#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1993-07-01), LessThan(o_orderdate,1993-10-01)]
ReadSchema: struct<o_orderkey:bigint,o_orderpriority:string,o_orderdate:date>

(30) Filter
Input [3]: [o_orderkey#X, o_orderpriority#X, o_orderdate#X]
Condition : ((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1993-07-01)) AND (o_orderdate#X < 1993-10-01))

(31) Project
Output [2]: [o_orderkey#X, o_orderpriority#X]
Input [3]: [o_orderkey#X, o_orderpriority#X, o_orderdate#X]

(32) Scan parquet default.lineitem
Output [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date>

(33) Filter
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND (l_commitdate#X < l_receiptdate#X))

(34) Project
Output [1]: [l_orderkey#X]
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]

(35) BroadcastExchange
Input [1]: [l_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(36) BroadcastHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(37) Project
Output [1]: [o_orderpriority#X]
Input [2]: [o_orderkey#X, o_orderpriority#X]

(38) HashAggregate
Input [1]: [o_orderpriority#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [o_orderpriority#X, count#X]

(39) Exchange
Input [2]: [o_orderpriority#X, count#X]
Arguments: hashpartitioning(o_orderpriority#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(40) HashAggregate
Input [2]: [o_orderpriority#X, count#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [o_orderpriority#X, count(1)#X AS order_count#X]

(41) Exchange
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: rangepartitioning(o_orderpriority#X ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(42) Sort
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: [o_orderpriority#X ASC NULLS FIRST], true, 0

(43) AdaptiveSparkPlan
Output [2]: [o_orderpriority#X, order_count#X]
Arguments: isFinalPlan=true
