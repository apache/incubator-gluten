== Physical Plan ==
AdaptiveSparkPlan (63)
+- == Final Plan ==
   VeloxColumnarToRowExec (42)
   +- ^ SortExecTransformer (40)
      +- ^ InputIteratorTransformer (39)
         +- AQEShuffleRead (38)
            +- ShuffleQueryStage (37), Statistics(***)
               +- ColumnarExchange (36)
                  +- ^ RegularHashAggregateExecTransformer (34)
                     +- ^ InputIteratorTransformer (33)
                        +- AQEShuffleRead (32)
                           +- ShuffleQueryStage (31), Statistics(***)
                              +- ColumnarExchange (30)
                                 +- ^ ProjectExecTransformer (28)
                                    +- ^ FlushableHashAggregateExecTransformer (27)
                                       +- ^ RegularHashAggregateExecTransformer (26)
                                          +- ^ InputIteratorTransformer (25)
                                             +- AQEShuffleRead (24)
                                                +- ShuffleQueryStage (23), Statistics(***)
                                                   +- ColumnarExchange (22)
                                                      +- ^ ProjectExecTransformer (20)
                                                         +- ^ FlushableHashAggregateExecTransformer (19)
                                                            +- ^ ProjectExecTransformer (18)
                                                               +- ^ GlutenBroadcastHashJoinExecTransformer Inner (17)
                                                                  :- ^ GlutenBroadcastHashJoinExecTransformer LeftAnti (10)
                                                                  :  :- ^ FilterExecTransformer (2)
                                                                  :  :  +- ^ Scan parquet default.partsupp (1)
                                                                  :  +- ^ InputIteratorTransformer (9)
                                                                  :     +- BroadcastQueryStage (8), Statistics(***)
                                                                  :        +- ColumnarBroadcastExchange (7)
                                                                  :           +- ^ ProjectExecTransformer (5)
                                                                  :              +- ^ FilterExecTransformer (4)
                                                                  :                 +- ^ Scan parquet default.supplier (3)
                                                                  +- ^ InputIteratorTransformer (16)
                                                                     +- BroadcastQueryStage (15), Statistics(***)
                                                                        +- ColumnarBroadcastExchange (14)
                                                                           +- ^ FilterExecTransformer (12)
                                                                              +- ^ Scan parquet default.part (11)
+- == Initial Plan ==
   Sort (62)
   +- Exchange (61)
      +- HashAggregate (60)
         +- Exchange (59)
            +- HashAggregate (58)
               +- HashAggregate (57)
                  +- Exchange (56)
                     +- HashAggregate (55)
                        +- Project (54)
                           +- BroadcastHashJoin Inner BuildRight (53)
                              :- BroadcastHashJoin LeftAnti BuildRight (49)
                              :  :- Filter (44)
                              :  :  +- Scan parquet default.partsupp (43)
                              :  +- BroadcastExchange (48)
                              :     +- Project (47)
                              :        +- Filter (46)
                              :           +- Scan parquet default.supplier (45)
                              +- BroadcastExchange (52)
                                 +- Filter (51)
                                    +- Scan parquet default.part (50)


(1) Scan parquet default.partsupp
Output [2]: [ps_partkey#***, ps_suppkey#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint>

(2) FilterExecTransformer
Input [2]: [ps_partkey#***, ps_suppkey#***]
Arguments: isnotnull(ps_partkey#***)

(3) Scan parquet default.supplier
Output [2]: [s_suppkey#***, s_comment#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_comment)]
ReadSchema: struct<s_suppkey:bigint,s_comment:string>

(4) FilterExecTransformer
Input [2]: [s_suppkey#***, s_comment#***]
Arguments: (isnotnull(s_comment#***) AND s_comment#*** LIKE %Customer%Complaints%)

(5) ProjectExecTransformer
Input [2]: [s_suppkey#***, s_comment#***]
Arguments: [s_suppkey#***]

(6) WholeStageCodegenTransformer (96)
Input [1]: [s_suppkey#***]
Arguments: false

(7) ColumnarBroadcastExchange
Input [1]: [s_suppkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),true), [plan_id=***]

(8) BroadcastQueryStage
Output [1]: [s_suppkey#***]
Arguments: 0

(9) InputIteratorTransformer
Input [1]: [s_suppkey#***]

(10) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_suppkey#***]
Right keys [1]: [s_suppkey#***]
Join condition: None

(11) Scan parquet default.part
Output [4]: [p_partkey#***, p_type#***, p_size#***, p_brand#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_type), Not(EqualTo(p_brand,Brand#***)), Not(StringStartsWith(p_type,MEDIUM POLISHED)), In(p_size, [14,19,23,3,36,45,49,9]), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string,p_size:int,p_brand:string>

(12) FilterExecTransformer
Input [4]: [p_partkey#***, p_type#***, p_size#***, p_brand#***]
Arguments: (((((isnotnull(p_brand#***) AND isnotnull(p_type#***)) AND NOT (p_brand#*** = Brand#***)) AND NOT StartsWith(p_type#***, MEDIUM POLISHED)) AND p_size#*** IN (49,14,23,45,19,3,36,9)) AND isnotnull(p_partkey#***))

(13) WholeStageCodegenTransformer (97)
Input [4]: [p_partkey#***, p_type#***, p_size#***, p_brand#***]
Arguments: false

(14) ColumnarBroadcastExchange
Input [4]: [p_partkey#***, p_type#***, p_size#***, p_brand#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(15) BroadcastQueryStage
Output [4]: [p_partkey#***, p_type#***, p_size#***, p_brand#***]
Arguments: 1

(16) InputIteratorTransformer
Input [4]: [p_partkey#***, p_type#***, p_size#***, p_brand#***]

(17) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_partkey#***]
Right keys [1]: [p_partkey#***]
Join condition: None

(18) ProjectExecTransformer
Input [6]: [ps_partkey#***, ps_suppkey#***, p_partkey#***, p_type#***, p_size#***, p_brand#***]
Arguments: [ps_suppkey#***, p_type#***, p_size#***, p_brand#***]

(19) FlushableHashAggregateExecTransformer
Input [4]: [ps_suppkey#***, p_type#***, p_size#***, p_brand#***]
Keys [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]

(20) ProjectExecTransformer
Input [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Arguments: [hash(p_brand#***, p_type#***, p_size#***, ps_suppkey#***, 42) AS hash_partition_key#***, p_brand#***, p_type#***, p_size#***, ps_suppkey#***]

(21) WholeStageCodegenTransformer (98)
Input [5]: [hash_partition_key#***, p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Arguments: false

(22) ColumnarExchange
Input [5]: [hash_partition_key#***, p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Arguments: hashpartitioning(p_brand#***, p_type#***, p_size#***, ps_suppkey#***, 100), ENSURE_REQUIREMENTS, [p_brand#***, p_type#***, p_size#***, ps_suppkey#***], [plan_id=***], [id=#***]

(23) ShuffleQueryStage
Output [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Arguments: 2

(24) AQEShuffleRead
Input [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Arguments: coalesced

(25) InputIteratorTransformer
Input [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]

(26) RegularHashAggregateExecTransformer
Input [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Keys [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]

(27) FlushableHashAggregateExecTransformer
Input [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Keys [3]: [p_brand#***, p_type#***, p_size#***]
Functions [1]: [partial_count(distinct ps_suppkey#***)]
Aggregate Attributes [1]: [count(ps_suppkey#***)#***]
Results [4]: [p_brand#***, p_type#***, p_size#***, count#***]

(28) ProjectExecTransformer
Input [4]: [p_brand#***, p_type#***, p_size#***, count#***]
Arguments: [hash(p_brand#***, p_type#***, p_size#***, 42) AS hash_partition_key#***, p_brand#***, p_type#***, p_size#***, count#***]

(29) WholeStageCodegenTransformer (99)
Input [5]: [hash_partition_key#***, p_brand#***, p_type#***, p_size#***, count#***]
Arguments: false

(30) ColumnarExchange
Input [5]: [hash_partition_key#***, p_brand#***, p_type#***, p_size#***, count#***]
Arguments: hashpartitioning(p_brand#***, p_type#***, p_size#***, 100), ENSURE_REQUIREMENTS, [p_brand#***, p_type#***, p_size#***, count#***], [plan_id=***], [id=#***]

(31) ShuffleQueryStage
Output [4]: [p_brand#***, p_type#***, p_size#***, count#***]
Arguments: 3

(32) AQEShuffleRead
Input [4]: [p_brand#***, p_type#***, p_size#***, count#***]
Arguments: coalesced

(33) InputIteratorTransformer
Input [4]: [p_brand#***, p_type#***, p_size#***, count#***]

(34) RegularHashAggregateExecTransformer
Input [4]: [p_brand#***, p_type#***, p_size#***, count#***]
Keys [3]: [p_brand#***, p_type#***, p_size#***]
Functions [1]: [count(distinct ps_suppkey#***)]
Aggregate Attributes [1]: [count(ps_suppkey#***)#***]
Results [4]: [p_brand#***, p_type#***, p_size#***, count(ps_suppkey#***)#*** AS supplier_cnt#***]

(35) WholeStageCodegenTransformer (100)
Input [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]
Arguments: false

(36) ColumnarExchange
Input [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]
Arguments: rangepartitioning(supplier_cnt#*** DESC NULLS LAST, p_brand#*** ASC NULLS FIRST, p_type#*** ASC NULLS FIRST, p_size#*** ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=***], [id=#***]

(37) ShuffleQueryStage
Output [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]
Arguments: 4

(38) AQEShuffleRead
Input [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]
Arguments: coalesced

(39) InputIteratorTransformer
Input [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]

(40) SortExecTransformer
Input [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]
Arguments: [supplier_cnt#*** DESC NULLS LAST, p_brand#*** ASC NULLS FIRST, p_type#*** ASC NULLS FIRST, p_size#*** ASC NULLS FIRST], true, 0

(41) WholeStageCodegenTransformer (101)
Input [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]
Arguments: false

(42) VeloxColumnarToRowExec
Input [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]

(43) Scan parquet default.partsupp
Output [2]: [ps_partkey#***, ps_suppkey#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint>

(44) Filter
Input [2]: [ps_partkey#***, ps_suppkey#***]
Condition : isnotnull(ps_partkey#***)

(45) Scan parquet default.supplier
Output [2]: [s_suppkey#***, s_comment#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_comment)]
ReadSchema: struct<s_suppkey:bigint,s_comment:string>

(46) Filter
Input [2]: [s_suppkey#***, s_comment#***]
Condition : (isnotnull(s_comment#***) AND s_comment#*** LIKE %Customer%Complaints%)

(47) Project
Output [1]: [s_suppkey#***]
Input [2]: [s_suppkey#***, s_comment#***]

(48) BroadcastExchange
Input [1]: [s_suppkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),true), [plan_id=***]

(49) BroadcastHashJoin
Left keys [1]: [ps_suppkey#***]
Right keys [1]: [s_suppkey#***]
Join condition: None

(50) Scan parquet default.part
Output [4]: [p_partkey#***, p_type#***, p_size#***, p_brand#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_type), Not(EqualTo(p_brand,Brand#***)), Not(StringStartsWith(p_type,MEDIUM POLISHED)), In(p_size, [14,19,23,3,36,45,49,9]), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string,p_size:int,p_brand:string>

(51) Filter
Input [4]: [p_partkey#***, p_type#***, p_size#***, p_brand#***]
Condition : (((((isnotnull(p_brand#***) AND isnotnull(p_type#***)) AND NOT (p_brand#*** = Brand#***)) AND NOT StartsWith(p_type#***, MEDIUM POLISHED)) AND p_size#*** IN (49,14,23,45,19,3,36,9)) AND isnotnull(p_partkey#***))

(52) BroadcastExchange
Input [4]: [p_partkey#***, p_type#***, p_size#***, p_brand#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(53) BroadcastHashJoin
Left keys [1]: [ps_partkey#***]
Right keys [1]: [p_partkey#***]
Join condition: None

(54) Project
Output [4]: [ps_suppkey#***, p_type#***, p_size#***, p_brand#***]
Input [6]: [ps_partkey#***, ps_suppkey#***, p_partkey#***, p_type#***, p_size#***, p_brand#***]

(55) HashAggregate
Input [4]: [ps_suppkey#***, p_type#***, p_size#***, p_brand#***]
Keys [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]

(56) Exchange
Input [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Arguments: hashpartitioning(p_brand#***, p_type#***, p_size#***, ps_suppkey#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(57) HashAggregate
Input [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Keys [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]

(58) HashAggregate
Input [4]: [p_brand#***, p_type#***, p_size#***, ps_suppkey#***]
Keys [3]: [p_brand#***, p_type#***, p_size#***]
Functions [1]: [partial_count(distinct ps_suppkey#***)]
Aggregate Attributes [1]: [count(ps_suppkey#***)#***]
Results [4]: [p_brand#***, p_type#***, p_size#***, count#***]

(59) Exchange
Input [4]: [p_brand#***, p_type#***, p_size#***, count#***]
Arguments: hashpartitioning(p_brand#***, p_type#***, p_size#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(60) HashAggregate
Input [4]: [p_brand#***, p_type#***, p_size#***, count#***]
Keys [3]: [p_brand#***, p_type#***, p_size#***]
Functions [1]: [count(distinct ps_suppkey#***)]
Aggregate Attributes [1]: [count(ps_suppkey#***)#***]
Results [4]: [p_brand#***, p_type#***, p_size#***, count(ps_suppkey#***)#*** AS supplier_cnt#***]

(61) Exchange
Input [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]
Arguments: rangepartitioning(supplier_cnt#*** DESC NULLS LAST, p_brand#*** ASC NULLS FIRST, p_type#*** ASC NULLS FIRST, p_size#*** ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(62) Sort
Input [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]
Arguments: [supplier_cnt#*** DESC NULLS LAST, p_brand#*** ASC NULLS FIRST, p_type#*** ASC NULLS FIRST, p_size#*** ASC NULLS FIRST], true, 0

(63) AdaptiveSparkPlan
Output [4]: [p_brand#***, p_type#***, p_size#***, supplier_cnt#***]
Arguments: isFinalPlan=true
