== Physical Plan ==
AdaptiveSparkPlan (132)
+- == Final Plan ==
   VeloxColumnarToRowExec (80)
   +- TakeOrderedAndProjectExecTransformer (79)
      +- ^ ProjectExecTransformer (77)
         +- ^ GlutenBroadcastHashJoinExecTransformer Inner (76)
            :- ^ ProjectExecTransformer (72)
            :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (71)
            :     :- ^ ProjectExecTransformer (64)
            :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (63)
            :     :     :- ^ ProjectExecTransformer (56)
            :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (55)
            :     :     :     :- ^ InputIteratorTransformer (18)
            :     :     :     :  +- BroadcastQueryStage (17), Statistics(X)
            :     :     :     :     +- ColumnarBroadcastExchange (16)
            :     :     :     :        +- AQEShuffleRead (15)
            :     :     :     :           +- ShuffleQueryStage (14), Statistics(X)
            :     :     :     :              +- ColumnarExchange (13)
            :     :     :     :                 +- ^ ProjectExecTransformer (11)
            :     :     :     :                    +- ^ GlutenBroadcastHashJoinExecTransformer Inner (10)
            :     :     :     :                       :- ^ InputIteratorTransformer (7)
            :     :     :     :                       :  +- BroadcastQueryStage (6), Statistics(X)
            :     :     :     :                       :     +- ColumnarBroadcastExchange (5)
            :     :     :     :                       :        +- ^ ProjectExecTransformer (3)
            :     :     :     :                       :           +- ^ FilterExecTransformer (2)
            :     :     :     :                       :              +- ^ Scan parquet default.part (1)
            :     :     :     :                       +- ^ FilterExecTransformer (9)
            :     :     :     :                          +- ^ Scan parquet default.partsupp (8)
            :     :     :     +- ^ FilterExecTransformer (54)
            :     :     :        +- ^ RegularHashAggregateExecTransformer (53)
            :     :     :           +- ^ InputIteratorTransformer (52)
            :     :     :              +- AQEShuffleRead (51)
            :     :     :                 +- ShuffleQueryStage (50), Statistics(X)
            :     :     :                    +- ColumnarExchange (49)
            :     :     :                       +- ^ ProjectExecTransformer (47)
            :     :     :                          +- ^ FlushableHashAggregateExecTransformer (46)
            :     :     :                             +- ^ ProjectExecTransformer (45)
            :     :     :                                +- ^ GlutenBroadcastHashJoinExecTransformer Inner (44)
            :     :     :                                   :- ^ ProjectExecTransformer (36)
            :     :     :                                   :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (35)
            :     :     :                                   :     :- ^ ProjectExecTransformer (28)
            :     :     :                                   :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (27)
            :     :     :                                   :     :     :- ^ FilterExecTransformer (20)
            :     :     :                                   :     :     :  +- ^ Scan parquet default.partsupp (19)
            :     :     :                                   :     :     +- ^ InputIteratorTransformer (26)
            :     :     :                                   :     :        +- BroadcastQueryStage (25), Statistics(X)
            :     :     :                                   :     :           +- ColumnarBroadcastExchange (24)
            :     :     :                                   :     :              +- ^ FilterExecTransformer (22)
            :     :     :                                   :     :                 +- ^ Scan parquet default.supplier (21)
            :     :     :                                   :     +- ^ InputIteratorTransformer (34)
            :     :     :                                   :        +- BroadcastQueryStage (33), Statistics(X)
            :     :     :                                   :           +- ColumnarBroadcastExchange (32)
            :     :     :                                   :              +- ^ FilterExecTransformer (30)
            :     :     :                                   :                 +- ^ Scan parquet default.nation (29)
            :     :     :                                   +- ^ InputIteratorTransformer (43)
            :     :     :                                      +- BroadcastQueryStage (42), Statistics(X)
            :     :     :                                         +- ColumnarBroadcastExchange (41)
            :     :     :                                            +- ^ ProjectExecTransformer (39)
            :     :     :                                               +- ^ FilterExecTransformer (38)
            :     :     :                                                  +- ^ Scan parquet default.region (37)
            :     :     +- ^ InputIteratorTransformer (62)
            :     :        +- BroadcastQueryStage (61), Statistics(X)
            :     :           +- ColumnarBroadcastExchange (60)
            :     :              +- ^ FilterExecTransformer (58)
            :     :                 +- ^ Scan parquet default.supplier (57)
            :     +- ^ InputIteratorTransformer (70)
            :        +- BroadcastQueryStage (69), Statistics(X)
            :           +- ColumnarBroadcastExchange (68)
            :              +- ^ FilterExecTransformer (66)
            :                 +- ^ Scan parquet default.nation (65)
            +- ^ InputIteratorTransformer (75)
               +- BroadcastQueryStage (74), Statistics(X)
                  +- ReusedExchange (73)
+- == Initial Plan ==
   TakeOrderedAndProject (131)
   +- Project (130)
      +- BroadcastHashJoin Inner BuildRight (129)
         :- Project (124)
         :  +- BroadcastHashJoin Inner BuildRight (123)
         :     :- Project (119)
         :     :  +- BroadcastHashJoin Inner BuildRight (118)
         :     :     :- Project (114)
         :     :     :  +- ShuffledHashJoin Inner BuildLeft (113)
         :     :     :     :- Exchange (89)
         :     :     :     :  +- Project (88)
         :     :     :     :     +- BroadcastHashJoin Inner BuildLeft (87)
         :     :     :     :        :- BroadcastExchange (84)
         :     :     :     :        :  +- Project (83)
         :     :     :     :        :     +- Filter (82)
         :     :     :     :        :        +- Scan parquet default.part (81)
         :     :     :     :        +- Filter (86)
         :     :     :     :           +- Scan parquet default.partsupp (85)
         :     :     :     +- Exchange (112)
         :     :     :        +- Filter (111)
         :     :     :           +- HashAggregate (110)
         :     :     :              +- Exchange (109)
         :     :     :                 +- HashAggregate (108)
         :     :     :                    +- Project (107)
         :     :     :                       +- BroadcastHashJoin Inner BuildRight (106)
         :     :     :                          :- Project (101)
         :     :     :                          :  +- BroadcastHashJoin Inner BuildRight (100)
         :     :     :                          :     :- Project (96)
         :     :     :                          :     :  +- BroadcastHashJoin Inner BuildRight (95)
         :     :     :                          :     :     :- Filter (91)
         :     :     :                          :     :     :  +- Scan parquet default.partsupp (90)
         :     :     :                          :     :     +- BroadcastExchange (94)
         :     :     :                          :     :        +- Filter (93)
         :     :     :                          :     :           +- Scan parquet default.supplier (92)
         :     :     :                          :     +- BroadcastExchange (99)
         :     :     :                          :        +- Filter (98)
         :     :     :                          :           +- Scan parquet default.nation (97)
         :     :     :                          +- BroadcastExchange (105)
         :     :     :                             +- Project (104)
         :     :     :                                +- Filter (103)
         :     :     :                                   +- Scan parquet default.region (102)
         :     :     +- BroadcastExchange (117)
         :     :        +- Filter (116)
         :     :           +- Scan parquet default.supplier (115)
         :     +- BroadcastExchange (122)
         :        +- Filter (121)
         :           +- Scan parquet default.nation (120)
         +- BroadcastExchange (128)
            +- Project (127)
               +- Filter (126)
                  +- Scan parquet default.region (125)


(1) Scan parquet default.part
Output [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,15), StringEndsWith(p_type,BRASS), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>

(2) FilterExecTransformer
Input [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]
Arguments: ((((isnotnull(p_size#X) AND isnotnull(p_type#X)) AND (p_size#X = 15)) AND EndsWith(p_type#X, BRASS)) AND isnotnull(p_partkey#X))

(3) ProjectExecTransformer
Input [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]
Arguments: [p_partkey#X, p_mfgr#X]

(4) WholeStageCodegenTransformer (X)
Input [2]: [p_partkey#X, p_mfgr#X]
Arguments: false

(5) ColumnarBroadcastExchange
Input [2]: [p_partkey#X, p_mfgr#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(6) BroadcastQueryStage
Output [2]: [p_partkey#X, p_mfgr#X]
Arguments: 0

(7) InputIteratorTransformer
Input [2]: [p_partkey#X, p_mfgr#X]

(8) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(9) FilterExecTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: ((isnotnull(ps_partkey#X) AND isnotnull(ps_supplycost#X)) AND isnotnull(ps_suppkey#X))

(10) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [ps_partkey#X]
Join condition: None

(11) ProjectExecTransformer
Input [5]: [p_partkey#X, p_mfgr#X, ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: [hash(ps_supplycost#X, p_partkey#X, 42) AS hash_partition_key#X, p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]

(12) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: false

(13) ColumnarExchange
Input [5]: [hash_partition_key#X, p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_supplycost#X, p_partkey#X, 100), ENSURE_REQUIREMENTS, [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: 8

(15) AQEShuffleRead
Input [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: local

(16) ColumnarBroadcastExchange
Input [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: HashedRelationBroadcastMode(List(input[3, decimal(12,2), true], input[0, bigint, true]),false), [plan_id=X]

(17) BroadcastQueryStage
Output [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: 10

(18) InputIteratorTransformer
Input [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]

(19) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(20) FilterExecTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: (isnotnull(ps_suppkey#X) AND isnotnull(ps_partkey#X))

(21) Scan parquet default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(22) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(23) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false

(24) ColumnarBroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(25) BroadcastQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: 1

(26) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(27) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(28) ProjectExecTransformer
Input [5]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]
Arguments: [ps_partkey#X, ps_supplycost#X, s_nationkey#X]

(29) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(30) FilterExecTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(31) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: false

(32) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(33) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_regionkey#X]
Arguments: 2

(34) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]

(35) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(36) ProjectExecTransformer
Input [5]: [ps_partkey#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X, n_regionkey#X]
Arguments: [ps_partkey#X, ps_supplycost#X, n_regionkey#X]

(37) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(38) FilterExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: ((isnotnull(r_name#X) AND (r_name#X = EUROPE)) AND isnotnull(r_regionkey#X))

(39) ProjectExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: [r_regionkey#X]

(40) WholeStageCodegenTransformer (X)
Input [1]: [r_regionkey#X]
Arguments: false

(41) ColumnarBroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(42) BroadcastQueryStage
Output [1]: [r_regionkey#X]
Arguments: 3

(43) InputIteratorTransformer
Input [1]: [r_regionkey#X]

(44) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(45) ProjectExecTransformer
Input [4]: [ps_partkey#X, ps_supplycost#X, n_regionkey#X, r_regionkey#X]
Arguments: [ps_partkey#X, ps_supplycost#X]

(46) FlushableHashAggregateExecTransformer
Input [2]: [ps_partkey#X, ps_supplycost#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [partial_min(ps_supplycost#X)]
Aggregate Attributes [1]: [min#X]
Results [2]: [ps_partkey#X, min#X]

(47) ProjectExecTransformer
Input [2]: [ps_partkey#X, min#X]
Arguments: [hash(ps_partkey#X, 42) AS hash_partition_key#X, ps_partkey#X, min#X]

(48) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, ps_partkey#X, min#X]
Arguments: false

(49) ColumnarExchange
Input [3]: [hash_partition_key#X, ps_partkey#X, min#X]
Arguments: hashpartitioning(ps_partkey#X, 100), ENSURE_REQUIREMENTS, [ps_partkey#X, min#X], [plan_id=X], [id=#X]

(50) ShuffleQueryStage
Output [2]: [ps_partkey#X, min#X]
Arguments: 9

(51) AQEShuffleRead
Input [2]: [ps_partkey#X, min#X]
Arguments: coalesced

(52) InputIteratorTransformer
Input [2]: [ps_partkey#X, min#X]

(53) RegularHashAggregateExecTransformer
Input [2]: [ps_partkey#X, min#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [min(ps_supplycost#X)]
Aggregate Attributes [1]: [min(ps_supplycost#X)#X]
Results [2]: [min(ps_supplycost#X)#X AS min(ps_supplycost)#X, ps_partkey#X]

(54) FilterExecTransformer
Input [2]: [min(ps_supplycost)#X, ps_partkey#X]
Arguments: isnotnull(min(ps_supplycost)#X)

(55) GlutenBroadcastHashJoinExecTransformer
Left keys [2]: [ps_supplycost#X, p_partkey#X]
Right keys [2]: [min(ps_supplycost)#X, ps_partkey#X]
Join condition: None

(56) ProjectExecTransformer
Input [6]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X, min(ps_supplycost)#X, ps_partkey#X]
Arguments: [p_partkey#X, p_mfgr#X, ps_suppkey#X]

(57) Scan parquet default.supplier
Output [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint,s_phone:string,s_acctbal:decimal(12,2),s_comment:string>

(58) FilterExecTransformer
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(59) WholeStageCodegenTransformer (X)
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: false

(60) ColumnarBroadcastExchange
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(61) BroadcastQueryStage
Output [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: 4

(62) InputIteratorTransformer
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]

(63) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(64) ProjectExecTransformer
Input [10]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]

(65) Scan parquet default.nation
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(66) FilterExecTransformer
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: ((isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X)) AND might_contain(Subquery subquery#X, [id=#X], xxhash64(n_regionkey#X, 42)))

(67) WholeStageCodegenTransformer (X)
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: false

(68) ColumnarBroadcastExchange
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(69) BroadcastQueryStage
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: 5

(70) InputIteratorTransformer
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]

(71) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(72) ProjectExecTransformer
Input [11]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X, n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_phone#X, s_acctbal#X, s_comment#X, n_name#X, n_regionkey#X]

(73) ReusedExchange [Reuses operator id: 41]
Output [1]: [r_regionkey#X]

(74) BroadcastQueryStage
Output [1]: [r_regionkey#X]
Arguments: 7

(75) InputIteratorTransformer
Input [1]: [r_regionkey#X]

(76) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(77) ProjectExecTransformer
Input [10]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_phone#X, s_acctbal#X, s_comment#X, n_name#X, n_regionkey#X, r_regionkey#X]
Arguments: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]

(78) WholeStageCodegenTransformer (X)
Input [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]
Arguments: false

(79) TakeOrderedAndProjectExecTransformer
Input [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]
Arguments: 100, [s_acctbal#X DESC NULLS LAST, n_name#X ASC NULLS FIRST, s_name#X ASC NULLS FIRST, p_partkey#X ASC NULLS FIRST], [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]

(80) VeloxColumnarToRowExec
Input [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]

(81) Scan parquet default.part
Output [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,15), StringEndsWith(p_type,BRASS), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>

(82) Filter
Input [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]
Condition : ((((isnotnull(p_size#X) AND isnotnull(p_type#X)) AND (p_size#X = 15)) AND EndsWith(p_type#X, BRASS)) AND isnotnull(p_partkey#X))

(83) Project
Output [2]: [p_partkey#X, p_mfgr#X]
Input [4]: [p_partkey#X, p_mfgr#X, p_type#X, p_size#X]

(84) BroadcastExchange
Input [2]: [p_partkey#X, p_mfgr#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(85) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(86) Filter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Condition : ((isnotnull(ps_partkey#X) AND isnotnull(ps_supplycost#X)) AND isnotnull(ps_suppkey#X))

(87) BroadcastHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [ps_partkey#X]
Join condition: None

(88) Project
Output [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Input [5]: [p_partkey#X, p_mfgr#X, ps_partkey#X, ps_suppkey#X, ps_supplycost#X]

(89) Exchange
Input [4]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_supplycost#X, p_partkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(90) Scan parquet default.partsupp
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(91) Filter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Condition : (isnotnull(ps_suppkey#X) AND isnotnull(ps_partkey#X))

(92) Scan parquet default.supplier
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(93) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(94) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(95) BroadcastHashJoin
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(96) Project
Output [3]: [ps_partkey#X, ps_supplycost#X, s_nationkey#X]
Input [5]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]

(97) Scan parquet default.nation
Output [2]: [n_nationkey#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(98) Filter
Input [2]: [n_nationkey#X, n_regionkey#X]
Condition : (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(99) BroadcastExchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(100) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(101) Project
Output [3]: [ps_partkey#X, ps_supplycost#X, n_regionkey#X]
Input [5]: [ps_partkey#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X, n_regionkey#X]

(102) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(103) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = EUROPE)) AND isnotnull(r_regionkey#X))

(104) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(105) BroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(106) BroadcastHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(107) Project
Output [2]: [ps_partkey#X, ps_supplycost#X]
Input [4]: [ps_partkey#X, ps_supplycost#X, n_regionkey#X, r_regionkey#X]

(108) HashAggregate
Input [2]: [ps_partkey#X, ps_supplycost#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [partial_min(ps_supplycost#X)]
Aggregate Attributes [1]: [min#X]
Results [2]: [ps_partkey#X, min#X]

(109) Exchange
Input [2]: [ps_partkey#X, min#X]
Arguments: hashpartitioning(ps_partkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(110) HashAggregate
Input [2]: [ps_partkey#X, min#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [min(ps_supplycost#X)]
Aggregate Attributes [1]: [min(ps_supplycost#X)#X]
Results [2]: [min(ps_supplycost#X)#X AS min(ps_supplycost)#X, ps_partkey#X]

(111) Filter
Input [2]: [min(ps_supplycost)#X, ps_partkey#X]
Condition : isnotnull(min(ps_supplycost)#X)

(112) Exchange
Input [2]: [min(ps_supplycost)#X, ps_partkey#X]
Arguments: hashpartitioning(min(ps_supplycost)#X, ps_partkey#X, 100), ENSURE_REQUIREMENTS, [plan_id=X]

(113) ShuffledHashJoin
Left keys [2]: [ps_supplycost#X, p_partkey#X]
Right keys [2]: [min(ps_supplycost)#X, ps_partkey#X]
Join condition: None

(114) Project
Output [3]: [p_partkey#X, p_mfgr#X, ps_suppkey#X]
Input [6]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, ps_supplycost#X, min(ps_supplycost)#X, ps_partkey#X]

(115) Scan parquet default.supplier
Output [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint,s_phone:string,s_acctbal:decimal(12,2),s_comment:string>

(116) Filter
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(117) BroadcastExchange
Input [7]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(118) BroadcastHashJoin
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(119) Project
Output [8]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]
Input [10]: [p_partkey#X, p_mfgr#X, ps_suppkey#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X]

(120) Scan parquet default.nation
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(121) Filter
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Condition : ((isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X)) AND might_contain(Subquery subquery#X, [id=#X], xxhash64(n_regionkey#X, 42)))

(122) BroadcastExchange
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(123) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(124) Project
Output [9]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_phone#X, s_acctbal#X, s_comment#X, n_name#X, n_regionkey#X]
Input [11]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_nationkey#X, s_phone#X, s_acctbal#X, s_comment#X, n_nationkey#X, n_name#X, n_regionkey#X]

(125) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(126) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = EUROPE)) AND isnotnull(r_regionkey#X))

(127) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(128) BroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(129) BroadcastHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(130) Project
Output [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]
Input [10]: [p_partkey#X, p_mfgr#X, s_name#X, s_address#X, s_phone#X, s_acctbal#X, s_comment#X, n_name#X, n_regionkey#X, r_regionkey#X]

(131) TakeOrderedAndProject
Input [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]
Arguments: 100, [s_acctbal#X DESC NULLS LAST, n_name#X ASC NULLS FIRST, s_name#X ASC NULLS FIRST, p_partkey#X ASC NULLS FIRST], [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]

(132) AdaptiveSparkPlan
Output [8]: [s_acctbal#X, s_name#X, n_name#X, p_partkey#X, p_mfgr#X, s_address#X, s_phone#X, s_comment#X]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 66 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (150)
+- == Final Plan ==
   VeloxColumnarToRowExec (143)
   +- ^ RegularHashAggregateExecTransformer (141)
      +- ^ InputIteratorTransformer (140)
         +- ShuffleQueryStage (139), Statistics(X)
            +- ColumnarExchange (138)
               +- ^ FlushableHashAggregateExecTransformer (136)
                  +- ^ ProjectExecTransformer (135)
                     +- ^ FilterExecTransformer (134)
                        +- ^ Scan parquet default.region (133)
+- == Initial Plan ==
   ObjectHashAggregate (149)
   +- Exchange (148)
      +- ObjectHashAggregate (147)
         +- Project (146)
            +- Filter (145)
               +- Scan parquet default.region (144)


(133) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(134) FilterExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: ((isnotnull(r_name#X) AND (r_name#X = EUROPE)) AND isnotnull(r_regionkey#X))

(135) ProjectExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: [r_regionkey#X]

(136) FlushableHashAggregateExecTransformer
Input [1]: [r_regionkey#X]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#X]
Results [1]: [buf#X]

(137) WholeStageCodegenTransformer (X)
Input [1]: [buf#X]
Arguments: false

(138) ColumnarExchange
Input [1]: [buf#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(139) ShuffleQueryStage
Output [1]: [buf#X]
Arguments: 0

(140) InputIteratorTransformer
Input [1]: [buf#X]

(141) RegularHashAggregateExecTransformer
Input [1]: [buf#X]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)#X]
Results [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)#X AS bloomFilter#X]

(142) WholeStageCodegenTransformer (X)
Input [1]: [bloomFilter#X]
Arguments: false

(143) VeloxColumnarToRowExec
Input [1]: [bloomFilter#X]

(144) Scan parquet default.region
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,EUROPE), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(145) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = EUROPE)) AND isnotnull(r_regionkey#X))

(146) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(147) ObjectHashAggregate
Input [1]: [r_regionkey#X]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#X]
Results [1]: [buf#X]

(148) Exchange
Input [1]: [buf#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X]

(149) ObjectHashAggregate
Input [1]: [buf#X]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)#X]
Results [1]: [bloom_filter_agg(xxhash64(r_regionkey#X, 42), 1000000, 8388608, 0, 0)#X AS bloomFilter#X]

(150) AdaptiveSparkPlan
Output [1]: [bloomFilter#X]
Arguments: isFinalPlan=true

Subquery:2 Hosting operator id = 65 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (150)
+- == Final Plan ==
   VeloxColumnarToRowExec (143)
   +- ^ RegularHashAggregateExecTransformer (141)
      +- ^ InputIteratorTransformer (140)
         +- ShuffleQueryStage (139), Statistics(X)
            +- ColumnarExchange (138)
               +- ^ FlushableHashAggregateExecTransformer (136)
                  +- ^ ProjectExecTransformer (135)
                     +- ^ FilterExecTransformer (134)
                        +- ^ Scan parquet default.region (133)
+- == Initial Plan ==
   ObjectHashAggregate (149)
   +- Exchange (148)
      +- ObjectHashAggregate (147)
         +- Project (146)
            +- Filter (145)
               +- Scan parquet default.region (144)
