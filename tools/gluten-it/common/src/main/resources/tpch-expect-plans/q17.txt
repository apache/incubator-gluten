== Physical Plan ==
AdaptiveSparkPlan (46)
+- == Final Plan ==
   * HashAggregate (28)
   +- ShuffleQueryStage (27), Statistics(***)
      +- Exchange (26)
         +- * HashAggregate (25)
            +- * Project (24)
               +- * BroadcastHashJoin Inner BuildRight (23)
                  :- * Project (11)
                  :  +- * BroadcastHashJoin Inner BuildRight (10)
                  :     :- * Filter (3)
                  :     :  +- * ColumnarToRow (2)
                  :     :     +- Scan parquet default.lineitem (1)
                  :     +- BroadcastQueryStage (9), Statistics(***)
                  :        +- BroadcastExchange (8)
                  :           +- * Project (7)
                  :              +- * Filter (6)
                  :                 +- * ColumnarToRow (5)
                  :                    +- Scan parquet default.part (4)
                  +- BroadcastQueryStage (22), Statistics(***)
                     +- BroadcastExchange (21)
                        +- * Filter (20)
                           +- * HashAggregate (19)
                              +- AQEShuffleRead (18)
                                 +- ShuffleQueryStage (17), Statistics(***)
                                    +- Exchange (16)
                                       +- * HashAggregate (15)
                                          +- * Filter (14)
                                             +- * ColumnarToRow (13)
                                                +- Scan parquet default.lineitem (12)
+- == Initial Plan ==
   HashAggregate (45)
   +- Exchange (44)
      +- HashAggregate (43)
         +- Project (42)
            +- BroadcastHashJoin Inner BuildRight (41)
               :- Project (34)
               :  +- BroadcastHashJoin Inner BuildRight (33)
               :     :- Filter (29)
               :     :  +- Scan parquet default.lineitem (1)
               :     +- BroadcastExchange (32)
               :        +- Project (31)
               :           +- Filter (30)
               :              +- Scan parquet default.part (4)
               +- BroadcastExchange (40)
                  +- Filter (39)
                     +- HashAggregate (38)
                        +- Exchange (37)
                           +- HashAggregate (36)
                              +- Filter (35)
                                 +- Scan parquet default.lineitem (12)


(1) Scan parquet default.lineitem
Output [3]: [l_partkey#***, l_quantity#***, l_extendedprice#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_quantity)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2)>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [l_partkey#***, l_quantity#***, l_extendedprice#***]

(3) Filter [codegen id : 4]
Input [3]: [l_partkey#***, l_quantity#***, l_extendedprice#***]
Condition : (isnotnull(l_partkey#***) AND isnotnull(l_quantity#***))

(4) Scan parquet default.part
Output [3]: [p_partkey#***, p_container#***, p_brand#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_container), EqualTo(p_brand,Brand#***), EqualTo(p_container,MED BOX), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_container:string,p_brand:string>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [p_partkey#***, p_container#***, p_brand#***]

(6) Filter [codegen id : 1]
Input [3]: [p_partkey#***, p_container#***, p_brand#***]
Condition : ((((isnotnull(p_brand#***) AND isnotnull(p_container#***)) AND (p_brand#*** = Brand#***)) AND (p_container#*** = MED BOX)) AND isnotnull(p_partkey#***))

(7) Project [codegen id : 1]
Output [1]: [p_partkey#***]
Input [3]: [p_partkey#***, p_container#***, p_brand#***]

(8) BroadcastExchange
Input [1]: [p_partkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(9) BroadcastQueryStage
Output [1]: [p_partkey#***]
Arguments: 0

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [l_partkey#***]
Right keys [1]: [p_partkey#***]
Join condition: None

(11) Project [codegen id : 4]
Output [3]: [l_quantity#***, l_extendedprice#***, p_partkey#***]
Input [4]: [l_partkey#***, l_quantity#***, l_extendedprice#***, p_partkey#***]

(12) Scan parquet default.lineitem
Output [2]: [l_partkey#***, l_quantity#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2)>

(13) ColumnarToRow [codegen id : 2]
Input [2]: [l_partkey#***, l_quantity#***]

(14) Filter [codegen id : 2]
Input [2]: [l_partkey#***, l_quantity#***]
Condition : isnotnull(l_partkey#***)

(15) HashAggregate [codegen id : 2]
Input [2]: [l_partkey#***, l_quantity#***]
Keys [1]: [l_partkey#***]
Functions [1]: [partial_avg(l_quantity#***)]
Aggregate Attributes [2]: [sum#***, count#***]
Results [3]: [l_partkey#***, sum#***, count#***]

(16) Exchange
Input [3]: [l_partkey#***, sum#***, count#***]
Arguments: hashpartitioning(l_partkey#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(17) ShuffleQueryStage
Output [3]: [l_partkey#***, sum#***, count#***]
Arguments: 1

(18) AQEShuffleRead
Input [3]: [l_partkey#***, sum#***, count#***]
Arguments: coalesced

(19) HashAggregate [codegen id : 3]
Input [3]: [l_partkey#***, sum#***, count#***]
Keys [1]: [l_partkey#***]
Functions [1]: [avg(l_quantity#***)]
Aggregate Attributes [1]: [avg(l_quantity#***)#***]
Results [2]: [CheckOverflow((0.200000 * promote_precision(avg(l_quantity#***)#***)), DecimalType(18,7)) AS (0.2 * avg(l_quantity))#***, l_partkey#***]

(20) Filter [codegen id : 3]
Input [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Condition : isnotnull((0.2 * avg(l_quantity))#***)

(21) BroadcastExchange
Input [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=***]

(22) BroadcastQueryStage
Output [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Arguments: 2

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [p_partkey#***]
Right keys [1]: [l_partkey#***]
Join condition: (cast(l_quantity#*** as decimal(18,7)) < (0.2 * avg(l_quantity))#***)

(24) Project [codegen id : 4]
Output [1]: [l_extendedprice#***]
Input [5]: [l_quantity#***, l_extendedprice#***, p_partkey#***, (0.2 * avg(l_quantity))#***, l_partkey#***]

(25) HashAggregate [codegen id : 4]
Input [1]: [l_extendedprice#***]
Keys: []
Functions [1]: [partial_sum(l_extendedprice#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [2]: [sum#***, isEmpty#***]

(26) Exchange
Input [2]: [sum#***, isEmpty#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***]

(27) ShuffleQueryStage
Output [2]: [sum#***, isEmpty#***]
Arguments: 3

(28) HashAggregate [codegen id : 5]
Input [2]: [sum#***, isEmpty#***]
Keys: []
Functions [1]: [sum(l_extendedprice#***)]
Aggregate Attributes [1]: [sum(l_extendedprice#***)#***]
Results [1]: [CheckOverflow((promote_precision(sum(l_extendedprice#***)#***) / 7.00), DecimalType(27,6)) AS avg_yearly#***]

(29) Filter
Input [3]: [l_partkey#***, l_quantity#***, l_extendedprice#***]
Condition : (isnotnull(l_partkey#***) AND isnotnull(l_quantity#***))

(30) Filter
Input [3]: [p_partkey#***, p_container#***, p_brand#***]
Condition : ((((isnotnull(p_brand#***) AND isnotnull(p_container#***)) AND (p_brand#*** = Brand#***)) AND (p_container#*** = MED BOX)) AND isnotnull(p_partkey#***))

(31) Project
Output [1]: [p_partkey#***]
Input [3]: [p_partkey#***, p_container#***, p_brand#***]

(32) BroadcastExchange
Input [1]: [p_partkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(33) BroadcastHashJoin
Left keys [1]: [l_partkey#***]
Right keys [1]: [p_partkey#***]
Join condition: None

(34) Project
Output [3]: [l_quantity#***, l_extendedprice#***, p_partkey#***]
Input [4]: [l_partkey#***, l_quantity#***, l_extendedprice#***, p_partkey#***]

(35) Filter
Input [2]: [l_partkey#***, l_quantity#***]
Condition : isnotnull(l_partkey#***)

(36) HashAggregate
Input [2]: [l_partkey#***, l_quantity#***]
Keys [1]: [l_partkey#***]
Functions [1]: [partial_avg(l_quantity#***)]
Aggregate Attributes [2]: [sum#***, count#***]
Results [3]: [l_partkey#***, sum#***, count#***]

(37) Exchange
Input [3]: [l_partkey#***, sum#***, count#***]
Arguments: hashpartitioning(l_partkey#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(38) HashAggregate
Input [3]: [l_partkey#***, sum#***, count#***]
Keys [1]: [l_partkey#***]
Functions [1]: [avg(l_quantity#***)]
Aggregate Attributes [1]: [avg(l_quantity#***)#***]
Results [2]: [CheckOverflow((0.200000 * promote_precision(avg(l_quantity#***)#***)), DecimalType(18,7)) AS (0.2 * avg(l_quantity))#***, l_partkey#***]

(39) Filter
Input [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Condition : isnotnull((0.2 * avg(l_quantity))#***)

(40) BroadcastExchange
Input [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=***]

(41) BroadcastHashJoin
Left keys [1]: [p_partkey#***]
Right keys [1]: [l_partkey#***]
Join condition: (cast(l_quantity#*** as decimal(18,7)) < (0.2 * avg(l_quantity))#***)

(42) Project
Output [1]: [l_extendedprice#***]
Input [5]: [l_quantity#***, l_extendedprice#***, p_partkey#***, (0.2 * avg(l_quantity))#***, l_partkey#***]

(43) HashAggregate
Input [1]: [l_extendedprice#***]
Keys: []
Functions [1]: [partial_sum(l_extendedprice#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [2]: [sum#***, isEmpty#***]

(44) Exchange
Input [2]: [sum#***, isEmpty#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***]

(45) HashAggregate
Input [2]: [sum#***, isEmpty#***]
Keys: []
Functions [1]: [sum(l_extendedprice#***)]
Aggregate Attributes [1]: [sum(l_extendedprice#***)#***]
Results [1]: [CheckOverflow((promote_precision(sum(l_extendedprice#***)#***) / 7.00), DecimalType(27,6)) AS avg_yearly#***]

(46) AdaptiveSparkPlan
Output [1]: [avg_yearly#***]
Arguments: isFinalPlan=true
