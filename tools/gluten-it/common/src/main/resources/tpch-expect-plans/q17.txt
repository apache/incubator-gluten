== Physical Plan ==
AdaptiveSparkPlan (57)
+- == Final Plan ==
   VeloxColumnarToRowExec (36)
   +- ^ RegularHashAggregateExecTransformer (34)
      +- ^ InputIteratorTransformer (33)
         +- ShuffleQueryStage (32), Statistics(***)
            +- ColumnarExchange (31)
               +- ^ FlushableHashAggregateExecTransformer (29)
                  +- ^ ProjectExecTransformer (28)
                     +- ^ GlutenBroadcastHashJoinExecTransformer Inner (27)
                        :- ^ ProjectExecTransformer (11)
                        :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (10)
                        :     :- ^ FilterExecTransformer (2)
                        :     :  +- ^ Scan parquet default.lineitem (1)
                        :     +- ^ InputIteratorTransformer (9)
                        :        +- BroadcastQueryStage (8), Statistics(***)
                        :           +- ColumnarBroadcastExchange (7)
                        :              +- ^ ProjectExecTransformer (5)
                        :                 +- ^ FilterExecTransformer (4)
                        :                    +- ^ Scan parquet default.part (3)
                        +- ^ InputIteratorTransformer (26)
                           +- BroadcastQueryStage (25), Statistics(***)
                              +- ColumnarBroadcastExchange (24)
                                 +- ^ FilterExecTransformer (22)
                                    +- ^ RegularHashAggregateExecTransformer (21)
                                       +- ^ InputIteratorTransformer (20)
                                          +- AQEShuffleRead (19)
                                             +- ShuffleQueryStage (18), Statistics(***)
                                                +- ColumnarExchange (17)
                                                   +- ^ ProjectExecTransformer (15)
                                                      +- ^ FlushableHashAggregateExecTransformer (14)
                                                         +- ^ FilterExecTransformer (13)
                                                            +- ^ Scan parquet default.lineitem (12)
+- == Initial Plan ==
   HashAggregate (56)
   +- Exchange (55)
      +- HashAggregate (54)
         +- Project (53)
            +- BroadcastHashJoin Inner BuildRight (52)
               :- Project (44)
               :  +- BroadcastHashJoin Inner BuildRight (43)
               :     :- Filter (38)
               :     :  +- Scan parquet default.lineitem (37)
               :     +- BroadcastExchange (42)
               :        +- Project (41)
               :           +- Filter (40)
               :              +- Scan parquet default.part (39)
               +- BroadcastExchange (51)
                  +- Filter (50)
                     +- HashAggregate (49)
                        +- Exchange (48)
                           +- HashAggregate (47)
                              +- Filter (46)
                                 +- Scan parquet default.lineitem (45)


(1) Scan parquet default.lineitem
Output [3]: [l_partkey#***, l_quantity#***, l_extendedprice#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_quantity)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2)>

(2) FilterExecTransformer
Input [3]: [l_partkey#***, l_quantity#***, l_extendedprice#***]
Arguments: (isnotnull(l_partkey#***) AND isnotnull(l_quantity#***))

(3) Scan parquet default.part
Output [3]: [p_partkey#***, p_container#***, p_brand#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_container), EqualTo(p_brand,Brand#***), EqualTo(p_container,MED BOX), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_container:string,p_brand:string>

(4) FilterExecTransformer
Input [3]: [p_partkey#***, p_container#***, p_brand#***]
Arguments: ((((isnotnull(p_brand#***) AND isnotnull(p_container#***)) AND (p_brand#*** = Brand#***)) AND (p_container#*** = MED BOX)) AND isnotnull(p_partkey#***))

(5) ProjectExecTransformer
Input [3]: [p_partkey#***, p_container#***, p_brand#***]
Arguments: [p_partkey#***]

(6) WholeStageCodegenTransformer (102)
Input [1]: [p_partkey#***]
Arguments: false

(7) ColumnarBroadcastExchange
Input [1]: [p_partkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(8) BroadcastQueryStage
Output [1]: [p_partkey#***]
Arguments: 0

(9) InputIteratorTransformer
Input [1]: [p_partkey#***]

(10) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_partkey#***]
Right keys [1]: [p_partkey#***]
Join condition: None

(11) ProjectExecTransformer
Input [4]: [l_partkey#***, l_quantity#***, l_extendedprice#***, p_partkey#***]
Arguments: [l_quantity#***, l_extendedprice#***, p_partkey#***]

(12) Scan parquet default.lineitem
Output [2]: [l_partkey#***, l_quantity#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2)>

(13) FilterExecTransformer
Input [2]: [l_partkey#***, l_quantity#***]
Arguments: isnotnull(l_partkey#***)

(14) FlushableHashAggregateExecTransformer
Input [2]: [l_partkey#***, l_quantity#***]
Keys [1]: [l_partkey#***]
Functions [1]: [partial_avg(l_quantity#***)]
Aggregate Attributes [2]: [sum#***, count#***]
Results [3]: [l_partkey#***, sum#***, count#***]

(15) ProjectExecTransformer
Input [3]: [l_partkey#***, sum#***, count#***]
Arguments: [hash(l_partkey#***, 42) AS hash_partition_key#***, l_partkey#***, sum#***, count#***]

(16) WholeStageCodegenTransformer (103)
Input [4]: [hash_partition_key#***, l_partkey#***, sum#***, count#***]
Arguments: false

(17) ColumnarExchange
Input [4]: [hash_partition_key#***, l_partkey#***, sum#***, count#***]
Arguments: hashpartitioning(l_partkey#***, 100), ENSURE_REQUIREMENTS, [l_partkey#***, sum#***, count#***], [plan_id=***], [id=#***]

(18) ShuffleQueryStage
Output [3]: [l_partkey#***, sum#***, count#***]
Arguments: 1

(19) AQEShuffleRead
Input [3]: [l_partkey#***, sum#***, count#***]
Arguments: coalesced

(20) InputIteratorTransformer
Input [3]: [l_partkey#***, sum#***, count#***]

(21) RegularHashAggregateExecTransformer
Input [3]: [l_partkey#***, sum#***, count#***]
Keys [1]: [l_partkey#***]
Functions [1]: [avg(l_quantity#***)]
Aggregate Attributes [1]: [avg(l_quantity#***)#***]
Results [2]: [CheckOverflow((0.200000 * promote_precision(avg(l_quantity#***)#***)), DecimalType(18,7)) AS (0.2 * avg(l_quantity))#***, l_partkey#***]

(22) FilterExecTransformer
Input [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Arguments: isnotnull((0.2 * avg(l_quantity))#***)

(23) WholeStageCodegenTransformer (104)
Input [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Arguments: false

(24) ColumnarBroadcastExchange
Input [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=***]

(25) BroadcastQueryStage
Output [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Arguments: 2

(26) InputIteratorTransformer
Input [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]

(27) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [p_partkey#***]
Right keys [1]: [l_partkey#***]
Join condition: (cast(l_quantity#*** as decimal(18,7)) < (0.2 * avg(l_quantity))#***)

(28) ProjectExecTransformer
Input [5]: [l_quantity#***, l_extendedprice#***, p_partkey#***, (0.2 * avg(l_quantity))#***, l_partkey#***]
Arguments: [l_extendedprice#***]

(29) FlushableHashAggregateExecTransformer
Input [1]: [l_extendedprice#***]
Keys: []
Functions [1]: [partial_sum(l_extendedprice#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [2]: [sum#***, isEmpty#***]

(30) WholeStageCodegenTransformer (105)
Input [2]: [sum#***, isEmpty#***]
Arguments: false

(31) ColumnarExchange
Input [2]: [sum#***, isEmpty#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***], [id=#***]

(32) ShuffleQueryStage
Output [2]: [sum#***, isEmpty#***]
Arguments: 3

(33) InputIteratorTransformer
Input [2]: [sum#***, isEmpty#***]

(34) RegularHashAggregateExecTransformer
Input [2]: [sum#***, isEmpty#***]
Keys: []
Functions [1]: [sum(l_extendedprice#***)]
Aggregate Attributes [1]: [sum(l_extendedprice#***)#***]
Results [1]: [CheckOverflow((promote_precision(sum(l_extendedprice#***)#***) / 7.00), DecimalType(27,6)) AS avg_yearly#***]

(35) WholeStageCodegenTransformer (106)
Input [1]: [avg_yearly#***]
Arguments: false

(36) VeloxColumnarToRowExec
Input [1]: [avg_yearly#***]

(37) Scan parquet default.lineitem
Output [3]: [l_partkey#***, l_quantity#***, l_extendedprice#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_quantity)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2)>

(38) Filter
Input [3]: [l_partkey#***, l_quantity#***, l_extendedprice#***]
Condition : (isnotnull(l_partkey#***) AND isnotnull(l_quantity#***))

(39) Scan parquet default.part
Output [3]: [p_partkey#***, p_container#***, p_brand#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_container), EqualTo(p_brand,Brand#***), EqualTo(p_container,MED BOX), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_container:string,p_brand:string>

(40) Filter
Input [3]: [p_partkey#***, p_container#***, p_brand#***]
Condition : ((((isnotnull(p_brand#***) AND isnotnull(p_container#***)) AND (p_brand#*** = Brand#***)) AND (p_container#*** = MED BOX)) AND isnotnull(p_partkey#***))

(41) Project
Output [1]: [p_partkey#***]
Input [3]: [p_partkey#***, p_container#***, p_brand#***]

(42) BroadcastExchange
Input [1]: [p_partkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(43) BroadcastHashJoin
Left keys [1]: [l_partkey#***]
Right keys [1]: [p_partkey#***]
Join condition: None

(44) Project
Output [3]: [l_quantity#***, l_extendedprice#***, p_partkey#***]
Input [4]: [l_partkey#***, l_quantity#***, l_extendedprice#***, p_partkey#***]

(45) Scan parquet default.lineitem
Output [2]: [l_partkey#***, l_quantity#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2)>

(46) Filter
Input [2]: [l_partkey#***, l_quantity#***]
Condition : isnotnull(l_partkey#***)

(47) HashAggregate
Input [2]: [l_partkey#***, l_quantity#***]
Keys [1]: [l_partkey#***]
Functions [1]: [partial_avg(l_quantity#***)]
Aggregate Attributes [2]: [sum#***, count#***]
Results [3]: [l_partkey#***, sum#***, count#***]

(48) Exchange
Input [3]: [l_partkey#***, sum#***, count#***]
Arguments: hashpartitioning(l_partkey#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(49) HashAggregate
Input [3]: [l_partkey#***, sum#***, count#***]
Keys [1]: [l_partkey#***]
Functions [1]: [avg(l_quantity#***)]
Aggregate Attributes [1]: [avg(l_quantity#***)#***]
Results [2]: [CheckOverflow((0.200000 * promote_precision(avg(l_quantity#***)#***)), DecimalType(18,7)) AS (0.2 * avg(l_quantity))#***, l_partkey#***]

(50) Filter
Input [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Condition : isnotnull((0.2 * avg(l_quantity))#***)

(51) BroadcastExchange
Input [2]: [(0.2 * avg(l_quantity))#***, l_partkey#***]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=***]

(52) BroadcastHashJoin
Left keys [1]: [p_partkey#***]
Right keys [1]: [l_partkey#***]
Join condition: (cast(l_quantity#*** as decimal(18,7)) < (0.2 * avg(l_quantity))#***)

(53) Project
Output [1]: [l_extendedprice#***]
Input [5]: [l_quantity#***, l_extendedprice#***, p_partkey#***, (0.2 * avg(l_quantity))#***, l_partkey#***]

(54) HashAggregate
Input [1]: [l_extendedprice#***]
Keys: []
Functions [1]: [partial_sum(l_extendedprice#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [2]: [sum#***, isEmpty#***]

(55) Exchange
Input [2]: [sum#***, isEmpty#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***]

(56) HashAggregate
Input [2]: [sum#***, isEmpty#***]
Keys: []
Functions [1]: [sum(l_extendedprice#***)]
Aggregate Attributes [1]: [sum(l_extendedprice#***)#***]
Results [1]: [CheckOverflow((promote_precision(sum(l_extendedprice#***)#***) / 7.00), DecimalType(27,6)) AS avg_yearly#***]

(57) AdaptiveSparkPlan
Output [1]: [avg_yearly#***]
Arguments: isFinalPlan=true
