== Physical Plan ==
AdaptiveSparkPlan (76)
+- == Final Plan ==
   * Sort (48)
   +- AQEShuffleRead (47)
      +- ShuffleQueryStage (46), Statistics(***)
         +- Exchange (45)
            +- * HashAggregate (44)
               +- AQEShuffleRead (43)
                  +- ShuffleQueryStage (42), Statistics(***)
                     +- Exchange (41)
                        +- * HashAggregate (40)
                           +- * Project (39)
                              +- * BroadcastHashJoin Inner BuildRight (38)
                                 :- * Project (32)
                                 :  +- * BroadcastHashJoin Inner BuildRight (31)
                                 :     :- * Project (25)
                                 :     :  +- * BroadcastHashJoin Inner BuildRight (24)
                                 :     :     :- * Project (18)
                                 :     :     :  +- * BroadcastHashJoin Inner BuildRight (17)
                                 :     :     :     :- * Project (11)
                                 :     :     :     :  +- * BroadcastHashJoin Inner BuildLeft (10)
                                 :     :     :     :     :- BroadcastQueryStage (6), Statistics(***)
                                 :     :     :     :     :  +- BroadcastExchange (5)
                                 :     :     :     :     :     +- * Project (4)
                                 :     :     :     :     :        +- * Filter (3)
                                 :     :     :     :     :           +- * ColumnarToRow (2)
                                 :     :     :     :     :              +- Scan parquet default.part (1)
                                 :     :     :     :     +- * Filter (9)
                                 :     :     :     :        +- * ColumnarToRow (8)
                                 :     :     :     :           +- Scan parquet default.lineitem (7)
                                 :     :     :     +- BroadcastQueryStage (16), Statistics(***)
                                 :     :     :        +- BroadcastExchange (15)
                                 :     :     :           +- * Filter (14)
                                 :     :     :              +- * ColumnarToRow (13)
                                 :     :     :                 +- Scan parquet default.supplier (12)
                                 :     :     +- BroadcastQueryStage (23), Statistics(***)
                                 :     :        +- BroadcastExchange (22)
                                 :     :           +- * Filter (21)
                                 :     :              +- * ColumnarToRow (20)
                                 :     :                 +- Scan parquet default.partsupp (19)
                                 :     +- BroadcastQueryStage (30), Statistics(***)
                                 :        +- BroadcastExchange (29)
                                 :           +- * Filter (28)
                                 :              +- * ColumnarToRow (27)
                                 :                 +- Scan parquet default.orders (26)
                                 +- BroadcastQueryStage (37), Statistics(***)
                                    +- BroadcastExchange (36)
                                       +- * Filter (35)
                                          +- * ColumnarToRow (34)
                                             +- Scan parquet default.nation (33)
+- == Initial Plan ==
   Sort (75)
   +- Exchange (74)
      +- HashAggregate (73)
         +- Exchange (72)
            +- HashAggregate (71)
               +- Project (70)
                  +- BroadcastHashJoin Inner BuildRight (69)
                     :- Project (66)
                     :  +- BroadcastHashJoin Inner BuildRight (65)
                     :     :- Project (62)
                     :     :  +- BroadcastHashJoin Inner BuildRight (61)
                     :     :     :- Project (58)
                     :     :     :  +- BroadcastHashJoin Inner BuildRight (57)
                     :     :     :     :- Project (54)
                     :     :     :     :  +- BroadcastHashJoin Inner BuildLeft (53)
                     :     :     :     :     :- BroadcastExchange (51)
                     :     :     :     :     :  +- Project (50)
                     :     :     :     :     :     +- Filter (49)
                     :     :     :     :     :        +- Scan parquet default.part (1)
                     :     :     :     :     +- Filter (52)
                     :     :     :     :        +- Scan parquet default.lineitem (7)
                     :     :     :     +- BroadcastExchange (56)
                     :     :     :        +- Filter (55)
                     :     :     :           +- Scan parquet default.supplier (12)
                     :     :     +- BroadcastExchange (60)
                     :     :        +- Filter (59)
                     :     :           +- Scan parquet default.partsupp (19)
                     :     +- BroadcastExchange (64)
                     :        +- Filter (63)
                     :           +- Scan parquet default.orders (26)
                     +- BroadcastExchange (68)
                        +- Filter (67)
                           +- Scan parquet default.nation (33)


(1) Scan parquet default.part
Output [2]: [p_partkey#***, p_name#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_name), StringContains(p_name,green), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [p_partkey#***, p_name#***]

(3) Filter [codegen id : 1]
Input [2]: [p_partkey#***, p_name#***]
Condition : ((isnotnull(p_name#***) AND Contains(p_name#***, green)) AND isnotnull(p_partkey#***))

(4) Project [codegen id : 1]
Output [1]: [p_partkey#***]
Input [2]: [p_partkey#***, p_name#***]

(5) BroadcastExchange
Input [1]: [p_partkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(6) BroadcastQueryStage
Output [1]: [p_partkey#***]
Arguments: 0

(7) Scan parquet default.lineitem
Output [6]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(8) ColumnarToRow
Input [6]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***]

(9) Filter
Input [6]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***]
Condition : ((isnotnull(l_partkey#***) AND isnotnull(l_suppkey#***)) AND isnotnull(l_orderkey#***))

(10) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [p_partkey#***]
Right keys [1]: [l_partkey#***]
Join condition: None

(11) Project [codegen id : 6]
Output [6]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***]
Input [7]: [p_partkey#***, l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***]

(12) Scan parquet default.supplier
Output [2]: [s_suppkey#***, s_nationkey#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(13) ColumnarToRow [codegen id : 2]
Input [2]: [s_suppkey#***, s_nationkey#***]

(14) Filter [codegen id : 2]
Input [2]: [s_suppkey#***, s_nationkey#***]
Condition : (isnotnull(s_suppkey#***) AND isnotnull(s_nationkey#***))

(15) BroadcastExchange
Input [2]: [s_suppkey#***, s_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(16) BroadcastQueryStage
Output [2]: [s_suppkey#***, s_nationkey#***]
Arguments: 1

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [l_suppkey#***]
Right keys [1]: [s_suppkey#***]
Join condition: None

(18) Project [codegen id : 6]
Output [7]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***]
Input [8]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, s_suppkey#***, s_nationkey#***]

(19) Scan parquet default.partsupp
Output [3]: [ps_partkey#***, ps_suppkey#***, ps_supplycost#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(20) ColumnarToRow [codegen id : 3]
Input [3]: [ps_partkey#***, ps_suppkey#***, ps_supplycost#***]

(21) Filter [codegen id : 3]
Input [3]: [ps_partkey#***, ps_suppkey#***, ps_supplycost#***]
Condition : (isnotnull(ps_suppkey#***) AND isnotnull(ps_partkey#***))

(22) BroadcastExchange
Input [3]: [ps_partkey#***, ps_suppkey#***, ps_supplycost#***]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, bigint, false]),false), [plan_id=***]

(23) BroadcastQueryStage
Output [3]: [ps_partkey#***, ps_suppkey#***, ps_supplycost#***]
Arguments: 2

(24) BroadcastHashJoin [codegen id : 6]
Left keys [2]: [l_suppkey#***, l_partkey#***]
Right keys [2]: [ps_suppkey#***, ps_partkey#***]
Join condition: None

(25) Project [codegen id : 6]
Output [6]: [l_orderkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***, ps_supplycost#***]
Input [10]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***, ps_partkey#***, ps_suppkey#***, ps_supplycost#***]

(26) Scan parquet default.orders
Output [2]: [o_orderkey#***, o_orderdate#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date>

(27) ColumnarToRow [codegen id : 4]
Input [2]: [o_orderkey#***, o_orderdate#***]

(28) Filter [codegen id : 4]
Input [2]: [o_orderkey#***, o_orderdate#***]
Condition : isnotnull(o_orderkey#***)

(29) BroadcastExchange
Input [2]: [o_orderkey#***, o_orderdate#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(30) BroadcastQueryStage
Output [2]: [o_orderkey#***, o_orderdate#***]
Arguments: 3

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [l_orderkey#***]
Right keys [1]: [o_orderkey#***]
Join condition: None

(32) Project [codegen id : 6]
Output [6]: [l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***, ps_supplycost#***, o_orderdate#***]
Input [8]: [l_orderkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***, ps_supplycost#***, o_orderkey#***, o_orderdate#***]

(33) Scan parquet default.nation
Output [2]: [n_nationkey#***, n_name#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(34) ColumnarToRow [codegen id : 5]
Input [2]: [n_nationkey#***, n_name#***]

(35) Filter [codegen id : 5]
Input [2]: [n_nationkey#***, n_name#***]
Condition : isnotnull(n_nationkey#***)

(36) BroadcastExchange
Input [2]: [n_nationkey#***, n_name#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(37) BroadcastQueryStage
Output [2]: [n_nationkey#***, n_name#***]
Arguments: 4

(38) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [s_nationkey#***]
Right keys [1]: [n_nationkey#***]
Join condition: None

(39) Project [codegen id : 6]
Output [3]: [n_name#*** AS nation#***, year(o_orderdate#***) AS o_year#***, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) as decimal(27,4))) - promote_precision(cast(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(l_quantity#***)), DecimalType(25,4)) as decimal(27,4)))), DecimalType(27,4)) AS amount#***]
Input [8]: [l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***, ps_supplycost#***, o_orderdate#***, n_nationkey#***, n_name#***]

(40) HashAggregate [codegen id : 6]
Input [3]: [nation#***, o_year#***, amount#***]
Keys [2]: [nation#***, o_year#***]
Functions [1]: [partial_sum(amount#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [4]: [nation#***, o_year#***, sum#***, isEmpty#***]

(41) Exchange
Input [4]: [nation#***, o_year#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(nation#***, o_year#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(42) ShuffleQueryStage
Output [4]: [nation#***, o_year#***, sum#***, isEmpty#***]
Arguments: 5

(43) AQEShuffleRead
Input [4]: [nation#***, o_year#***, sum#***, isEmpty#***]
Arguments: coalesced

(44) HashAggregate [codegen id : 7]
Input [4]: [nation#***, o_year#***, sum#***, isEmpty#***]
Keys [2]: [nation#***, o_year#***]
Functions [1]: [sum(amount#***)]
Aggregate Attributes [1]: [sum(amount#***)#***]
Results [3]: [nation#***, o_year#***, sum(amount#***)#*** AS sum_profit#***]

(45) Exchange
Input [3]: [nation#***, o_year#***, sum_profit#***]
Arguments: rangepartitioning(nation#*** ASC NULLS FIRST, o_year#*** DESC NULLS LAST, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(46) ShuffleQueryStage
Output [3]: [nation#***, o_year#***, sum_profit#***]
Arguments: 6

(47) AQEShuffleRead
Input [3]: [nation#***, o_year#***, sum_profit#***]
Arguments: coalesced

(48) Sort [codegen id : 8]
Input [3]: [nation#***, o_year#***, sum_profit#***]
Arguments: [nation#*** ASC NULLS FIRST, o_year#*** DESC NULLS LAST], true, 0

(49) Filter
Input [2]: [p_partkey#***, p_name#***]
Condition : ((isnotnull(p_name#***) AND Contains(p_name#***, green)) AND isnotnull(p_partkey#***))

(50) Project
Output [1]: [p_partkey#***]
Input [2]: [p_partkey#***, p_name#***]

(51) BroadcastExchange
Input [1]: [p_partkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(52) Filter
Input [6]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***]
Condition : ((isnotnull(l_partkey#***) AND isnotnull(l_suppkey#***)) AND isnotnull(l_orderkey#***))

(53) BroadcastHashJoin
Left keys [1]: [p_partkey#***]
Right keys [1]: [l_partkey#***]
Join condition: None

(54) Project
Output [6]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***]
Input [7]: [p_partkey#***, l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***]

(55) Filter
Input [2]: [s_suppkey#***, s_nationkey#***]
Condition : (isnotnull(s_suppkey#***) AND isnotnull(s_nationkey#***))

(56) BroadcastExchange
Input [2]: [s_suppkey#***, s_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(57) BroadcastHashJoin
Left keys [1]: [l_suppkey#***]
Right keys [1]: [s_suppkey#***]
Join condition: None

(58) Project
Output [7]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***]
Input [8]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, s_suppkey#***, s_nationkey#***]

(59) Filter
Input [3]: [ps_partkey#***, ps_suppkey#***, ps_supplycost#***]
Condition : (isnotnull(ps_suppkey#***) AND isnotnull(ps_partkey#***))

(60) BroadcastExchange
Input [3]: [ps_partkey#***, ps_suppkey#***, ps_supplycost#***]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, bigint, false]),false), [plan_id=***]

(61) BroadcastHashJoin
Left keys [2]: [l_suppkey#***, l_partkey#***]
Right keys [2]: [ps_suppkey#***, ps_partkey#***]
Join condition: None

(62) Project
Output [6]: [l_orderkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***, ps_supplycost#***]
Input [10]: [l_orderkey#***, l_partkey#***, l_suppkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***, ps_partkey#***, ps_suppkey#***, ps_supplycost#***]

(63) Filter
Input [2]: [o_orderkey#***, o_orderdate#***]
Condition : isnotnull(o_orderkey#***)

(64) BroadcastExchange
Input [2]: [o_orderkey#***, o_orderdate#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(65) BroadcastHashJoin
Left keys [1]: [l_orderkey#***]
Right keys [1]: [o_orderkey#***]
Join condition: None

(66) Project
Output [6]: [l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***, ps_supplycost#***, o_orderdate#***]
Input [8]: [l_orderkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***, ps_supplycost#***, o_orderkey#***, o_orderdate#***]

(67) Filter
Input [2]: [n_nationkey#***, n_name#***]
Condition : isnotnull(n_nationkey#***)

(68) BroadcastExchange
Input [2]: [n_nationkey#***, n_name#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(69) BroadcastHashJoin
Left keys [1]: [s_nationkey#***]
Right keys [1]: [n_nationkey#***]
Join condition: None

(70) Project
Output [3]: [n_name#*** AS nation#***, year(o_orderdate#***) AS o_year#***, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) as decimal(27,4))) - promote_precision(cast(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(l_quantity#***)), DecimalType(25,4)) as decimal(27,4)))), DecimalType(27,4)) AS amount#***]
Input [8]: [l_quantity#***, l_extendedprice#***, l_discount#***, s_nationkey#***, ps_supplycost#***, o_orderdate#***, n_nationkey#***, n_name#***]

(71) HashAggregate
Input [3]: [nation#***, o_year#***, amount#***]
Keys [2]: [nation#***, o_year#***]
Functions [1]: [partial_sum(amount#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [4]: [nation#***, o_year#***, sum#***, isEmpty#***]

(72) Exchange
Input [4]: [nation#***, o_year#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(nation#***, o_year#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(73) HashAggregate
Input [4]: [nation#***, o_year#***, sum#***, isEmpty#***]
Keys [2]: [nation#***, o_year#***]
Functions [1]: [sum(amount#***)]
Aggregate Attributes [1]: [sum(amount#***)#***]
Results [3]: [nation#***, o_year#***, sum(amount#***)#*** AS sum_profit#***]

(74) Exchange
Input [3]: [nation#***, o_year#***, sum_profit#***]
Arguments: rangepartitioning(nation#*** ASC NULLS FIRST, o_year#*** DESC NULLS LAST, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(75) Sort
Input [3]: [nation#***, o_year#***, sum_profit#***]
Arguments: [nation#*** ASC NULLS FIRST, o_year#*** DESC NULLS LAST], true, 0

(76) AdaptiveSparkPlan
Output [3]: [nation#***, o_year#***, sum_profit#***]
Arguments: isFinalPlan=true
