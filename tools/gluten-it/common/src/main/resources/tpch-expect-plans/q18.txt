== Physical Plan ==
AdaptiveSparkPlan (82)
+- == Final Plan ==
   VeloxColumnarToRowExec (49)
   +- TakeOrderedAndProjectExecTransformer (48)
      +- ^ RegularHashAggregateExecTransformer (46)
         +- ^ InputIteratorTransformer (45)
            +- AQEShuffleRead (44)
               +- ShuffleQueryStage (43), Statistics(***)
                  +- ColumnarExchange (42)
                     +- ^ ProjectExecTransformer (40)
                        +- ^ FlushableHashAggregateExecTransformer (39)
                           +- ^ ProjectExecTransformer (38)
                              +- ^ GlutenBroadcastHashJoinExecTransformer Inner (37)
                                 :- ^ ProjectExecTransformer (26)
                                 :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (25)
                                 :     :- ^ InputIteratorTransformer (6)
                                 :     :  +- BroadcastQueryStage (5), Statistics(***)
                                 :     :     +- ColumnarBroadcastExchange (4)
                                 :     :        +- ^ FilterExecTransformer (2)
                                 :     :           +- ^ Scan parquet default.customer (1)
                                 :     +- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (24)
                                 :        :- ^ FilterExecTransformer (8)
                                 :        :  +- ^ Scan parquet default.orders (7)
                                 :        +- ^ InputIteratorTransformer (23)
                                 :           +- BroadcastQueryStage (22), Statistics(***)
                                 :              +- ColumnarBroadcastExchange (21)
                                 :                 +- ^ ProjectExecTransformer (19)
                                 :                    +- ^ FilterExecTransformer (18)
                                 :                       +- ^ RegularHashAggregateExecTransformer (17)
                                 :                          +- ^ InputIteratorTransformer (16)
                                 :                             +- AQEShuffleRead (15)
                                 :                                +- ShuffleQueryStage (14), Statistics(***)
                                 :                                   +- ColumnarExchange (13)
                                 :                                      +- ^ ProjectExecTransformer (11)
                                 :                                         +- ^ FlushableHashAggregateExecTransformer (10)
                                 :                                            +- ^ Scan parquet default.lineitem (9)
                                 +- ^ InputIteratorTransformer (36)
                                    +- BroadcastQueryStage (35), Statistics(***)
                                       +- ColumnarBroadcastExchange (34)
                                          +- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (32)
                                             :- ^ FilterExecTransformer (28)
                                             :  +- ^ Scan parquet default.lineitem (27)
                                             +- ^ InputIteratorTransformer (31)
                                                +- BroadcastQueryStage (30), Statistics(***)
                                                   +- ReusedExchange (29)
+- == Initial Plan ==
   TakeOrderedAndProject (81)
   +- HashAggregate (80)
      +- Exchange (79)
         +- HashAggregate (78)
            +- Project (77)
               +- BroadcastHashJoin Inner BuildRight (76)
                  :- Project (64)
                  :  +- BroadcastHashJoin Inner BuildLeft (63)
                  :     :- BroadcastExchange (52)
                  :     :  +- Filter (51)
                  :     :     +- Scan parquet default.customer (50)
                  :     +- BroadcastHashJoin LeftSemi BuildRight (62)
                  :        :- Filter (54)
                  :        :  +- Scan parquet default.orders (53)
                  :        +- BroadcastExchange (61)
                  :           +- Project (60)
                  :              +- Filter (59)
                  :                 +- HashAggregate (58)
                  :                    +- Exchange (57)
                  :                       +- HashAggregate (56)
                  :                          +- Scan parquet default.lineitem (55)
                  +- BroadcastExchange (75)
                     +- BroadcastHashJoin LeftSemi BuildRight (74)
                        :- Filter (66)
                        :  +- Scan parquet default.lineitem (65)
                        +- BroadcastExchange (73)
                           +- Project (72)
                              +- Filter (71)
                                 +- HashAggregate (70)
                                    +- Exchange (69)
                                       +- HashAggregate (68)
                                          +- Scan parquet default.lineitem (67)


(1) Scan parquet default.customer
Output [2]: [c_custkey#***, c_name#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey)]
ReadSchema: struct<c_custkey:bigint,c_name:string>

(2) FilterExecTransformer
Input [2]: [c_custkey#***, c_name#***]
Arguments: isnotnull(c_custkey#***)

(3) WholeStageCodegenTransformer (107)
Input [2]: [c_custkey#***, c_name#***]
Arguments: false

(4) ColumnarBroadcastExchange
Input [2]: [c_custkey#***, c_name#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(5) BroadcastQueryStage
Output [2]: [c_custkey#***, c_name#***]
Arguments: 0

(6) InputIteratorTransformer
Input [2]: [c_custkey#***, c_name#***]

(7) Scan parquet default.orders
Output [4]: [o_orderkey#***, o_custkey#***, o_totalprice#***, o_orderdate#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_totalprice:decimal(12,2),o_orderdate:date>

(8) FilterExecTransformer
Input [4]: [o_orderkey#***, o_custkey#***, o_totalprice#***, o_orderdate#***]
Arguments: (isnotnull(o_custkey#***) AND isnotnull(o_orderkey#***))

(9) Scan parquet default.lineitem
Output [2]: [l_orderkey#***, l_quantity#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(10) FlushableHashAggregateExecTransformer
Input [2]: [l_orderkey#***, l_quantity#***]
Keys [1]: [l_orderkey#***]
Functions [1]: [partial_sum(l_quantity#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [l_orderkey#***, sum#***, isEmpty#***]

(11) ProjectExecTransformer
Input [3]: [l_orderkey#***, sum#***, isEmpty#***]
Arguments: [hash(l_orderkey#***, 42) AS hash_partition_key#***, l_orderkey#***, sum#***, isEmpty#***]

(12) WholeStageCodegenTransformer (108)
Input [4]: [hash_partition_key#***, l_orderkey#***, sum#***, isEmpty#***]
Arguments: false

(13) ColumnarExchange
Input [4]: [hash_partition_key#***, l_orderkey#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(l_orderkey#***, 100), ENSURE_REQUIREMENTS, [l_orderkey#***, sum#***, isEmpty#***], [plan_id=***], [id=#***]

(14) ShuffleQueryStage
Output [3]: [l_orderkey#***, sum#***, isEmpty#***]
Arguments: 1

(15) AQEShuffleRead
Input [3]: [l_orderkey#***, sum#***, isEmpty#***]
Arguments: coalesced

(16) InputIteratorTransformer
Input [3]: [l_orderkey#***, sum#***, isEmpty#***]

(17) RegularHashAggregateExecTransformer
Input [3]: [l_orderkey#***, sum#***, isEmpty#***]
Keys [1]: [l_orderkey#***]
Functions [1]: [sum(l_quantity#***)]
Aggregate Attributes [1]: [sum(l_quantity#***)#***]
Results [2]: [l_orderkey#***, sum(l_quantity#***)#*** AS sum(l_quantity#***)#***]

(18) FilterExecTransformer
Input [2]: [l_orderkey#***, sum(l_quantity#***)#***]
Arguments: (isnotnull(sum(l_quantity#***)#***) AND (sum(l_quantity#***)#*** > 300.00))

(19) ProjectExecTransformer
Input [2]: [l_orderkey#***, sum(l_quantity#***)#***]
Arguments: [l_orderkey#***]

(20) WholeStageCodegenTransformer (110)
Input [1]: [l_orderkey#***]
Arguments: false

(21) ColumnarBroadcastExchange
Input [1]: [l_orderkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(22) BroadcastQueryStage
Output [1]: [l_orderkey#***]
Arguments: 4

(23) InputIteratorTransformer
Input [1]: [l_orderkey#***]

(24) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [o_orderkey#***]
Right keys [1]: [l_orderkey#***]
Join condition: None

(25) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [c_custkey#***]
Right keys [1]: [o_custkey#***]
Join condition: None

(26) ProjectExecTransformer
Input [6]: [c_custkey#***, c_name#***, o_orderkey#***, o_custkey#***, o_totalprice#***, o_orderdate#***]
Arguments: [c_custkey#***, c_name#***, o_orderkey#***, o_totalprice#***, o_orderdate#***]

(27) Scan parquet default.lineitem
Output [2]: [l_orderkey#***, l_quantity#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(28) FilterExecTransformer
Input [2]: [l_orderkey#***, l_quantity#***]
Arguments: isnotnull(l_orderkey#***)

(29) ReusedExchange [Reuses operator id: 21]
Output [1]: [l_orderkey#***]

(30) BroadcastQueryStage
Output [1]: [l_orderkey#***]
Arguments: 6

(31) InputIteratorTransformer
Input [1]: [l_orderkey#***]

(32) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#***]
Right keys [1]: [l_orderkey#***]
Join condition: None

(33) WholeStageCodegenTransformer (112)
Input [2]: [l_orderkey#***, l_quantity#***]
Arguments: false

(34) ColumnarBroadcastExchange
Input [2]: [l_orderkey#***, l_quantity#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(35) BroadcastQueryStage
Output [2]: [l_orderkey#***, l_quantity#***]
Arguments: 7

(36) InputIteratorTransformer
Input [2]: [l_orderkey#***, l_quantity#***]

(37) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [o_orderkey#***]
Right keys [1]: [l_orderkey#***]
Join condition: None

(38) ProjectExecTransformer
Input [7]: [c_custkey#***, c_name#***, o_orderkey#***, o_totalprice#***, o_orderdate#***, l_orderkey#***, l_quantity#***]
Arguments: [c_custkey#***, c_name#***, o_orderkey#***, o_totalprice#***, o_orderdate#***, l_quantity#***]

(39) FlushableHashAggregateExecTransformer
Input [6]: [c_custkey#***, c_name#***, o_orderkey#***, o_totalprice#***, o_orderdate#***, l_quantity#***]
Keys [5]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***]
Functions [1]: [partial_sum(l_quantity#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [7]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]

(40) ProjectExecTransformer
Input [7]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]
Arguments: [hash(c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, 42) AS hash_partition_key#***, c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]

(41) WholeStageCodegenTransformer (113)
Input [8]: [hash_partition_key#***, c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]
Arguments: false

(42) ColumnarExchange
Input [8]: [hash_partition_key#***, c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, 100), ENSURE_REQUIREMENTS, [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***], [plan_id=***], [id=#***]

(43) ShuffleQueryStage
Output [7]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]
Arguments: 8

(44) AQEShuffleRead
Input [7]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]
Arguments: coalesced

(45) InputIteratorTransformer
Input [7]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]

(46) RegularHashAggregateExecTransformer
Input [7]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]
Keys [5]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***]
Functions [1]: [sum(l_quantity#***)]
Aggregate Attributes [1]: [sum(l_quantity#***)#***]
Results [6]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum(l_quantity#***)#*** AS sum(l_quantity)#***]

(47) WholeStageCodegenTransformer (114)
Input [6]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum(l_quantity)#***]
Arguments: false

(48) TakeOrderedAndProjectExecTransformer
Input [6]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum(l_quantity)#***]
Arguments: 100, [o_totalprice#*** DESC NULLS LAST, o_orderdate#*** ASC NULLS FIRST], [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum(l_quantity)#***]

(49) VeloxColumnarToRowExec
Input [6]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum(l_quantity)#***]

(50) Scan parquet default.customer
Output [2]: [c_custkey#***, c_name#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey)]
ReadSchema: struct<c_custkey:bigint,c_name:string>

(51) Filter
Input [2]: [c_custkey#***, c_name#***]
Condition : isnotnull(c_custkey#***)

(52) BroadcastExchange
Input [2]: [c_custkey#***, c_name#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(53) Scan parquet default.orders
Output [4]: [o_orderkey#***, o_custkey#***, o_totalprice#***, o_orderdate#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_totalprice:decimal(12,2),o_orderdate:date>

(54) Filter
Input [4]: [o_orderkey#***, o_custkey#***, o_totalprice#***, o_orderdate#***]
Condition : (isnotnull(o_custkey#***) AND isnotnull(o_orderkey#***))

(55) Scan parquet default.lineitem
Output [2]: [l_orderkey#***, l_quantity#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(56) HashAggregate
Input [2]: [l_orderkey#***, l_quantity#***]
Keys [1]: [l_orderkey#***]
Functions [1]: [partial_sum(l_quantity#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [l_orderkey#***, sum#***, isEmpty#***]

(57) Exchange
Input [3]: [l_orderkey#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(l_orderkey#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(58) HashAggregate
Input [3]: [l_orderkey#***, sum#***, isEmpty#***]
Keys [1]: [l_orderkey#***]
Functions [1]: [sum(l_quantity#***)]
Aggregate Attributes [1]: [sum(l_quantity#***)#***]
Results [2]: [l_orderkey#***, sum(l_quantity#***)#*** AS sum(l_quantity#***)#***]

(59) Filter
Input [2]: [l_orderkey#***, sum(l_quantity#***)#***]
Condition : (isnotnull(sum(l_quantity#***)#***) AND (sum(l_quantity#***)#*** > 300.00))

(60) Project
Output [1]: [l_orderkey#***]
Input [2]: [l_orderkey#***, sum(l_quantity#***)#***]

(61) BroadcastExchange
Input [1]: [l_orderkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(62) BroadcastHashJoin
Left keys [1]: [o_orderkey#***]
Right keys [1]: [l_orderkey#***]
Join condition: None

(63) BroadcastHashJoin
Left keys [1]: [c_custkey#***]
Right keys [1]: [o_custkey#***]
Join condition: None

(64) Project
Output [5]: [c_custkey#***, c_name#***, o_orderkey#***, o_totalprice#***, o_orderdate#***]
Input [6]: [c_custkey#***, c_name#***, o_orderkey#***, o_custkey#***, o_totalprice#***, o_orderdate#***]

(65) Scan parquet default.lineitem
Output [2]: [l_orderkey#***, l_quantity#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(66) Filter
Input [2]: [l_orderkey#***, l_quantity#***]
Condition : isnotnull(l_orderkey#***)

(67) Scan parquet default.lineitem
Output [2]: [l_orderkey#***, l_quantity#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(68) HashAggregate
Input [2]: [l_orderkey#***, l_quantity#***]
Keys [1]: [l_orderkey#***]
Functions [1]: [partial_sum(l_quantity#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [l_orderkey#***, sum#***, isEmpty#***]

(69) Exchange
Input [3]: [l_orderkey#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(l_orderkey#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(70) HashAggregate
Input [3]: [l_orderkey#***, sum#***, isEmpty#***]
Keys [1]: [l_orderkey#***]
Functions [1]: [sum(l_quantity#***)]
Aggregate Attributes [1]: [sum(l_quantity#***)#***]
Results [2]: [l_orderkey#***, sum(l_quantity#***)#*** AS sum(l_quantity#***)#***]

(71) Filter
Input [2]: [l_orderkey#***, sum(l_quantity#***)#***]
Condition : (isnotnull(sum(l_quantity#***)#***) AND (sum(l_quantity#***)#*** > 300.00))

(72) Project
Output [1]: [l_orderkey#***]
Input [2]: [l_orderkey#***, sum(l_quantity#***)#***]

(73) BroadcastExchange
Input [1]: [l_orderkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(74) BroadcastHashJoin
Left keys [1]: [l_orderkey#***]
Right keys [1]: [l_orderkey#***]
Join condition: None

(75) BroadcastExchange
Input [2]: [l_orderkey#***, l_quantity#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(76) BroadcastHashJoin
Left keys [1]: [o_orderkey#***]
Right keys [1]: [l_orderkey#***]
Join condition: None

(77) Project
Output [6]: [c_custkey#***, c_name#***, o_orderkey#***, o_totalprice#***, o_orderdate#***, l_quantity#***]
Input [7]: [c_custkey#***, c_name#***, o_orderkey#***, o_totalprice#***, o_orderdate#***, l_orderkey#***, l_quantity#***]

(78) HashAggregate
Input [6]: [c_custkey#***, c_name#***, o_orderkey#***, o_totalprice#***, o_orderdate#***, l_quantity#***]
Keys [5]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***]
Functions [1]: [partial_sum(l_quantity#***)]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [7]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]

(79) Exchange
Input [7]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(80) HashAggregate
Input [7]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum#***, isEmpty#***]
Keys [5]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***]
Functions [1]: [sum(l_quantity#***)]
Aggregate Attributes [1]: [sum(l_quantity#***)#***]
Results [6]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum(l_quantity#***)#*** AS sum(l_quantity)#***]

(81) TakeOrderedAndProject
Input [6]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum(l_quantity)#***]
Arguments: 100, [o_totalprice#*** DESC NULLS LAST, o_orderdate#*** ASC NULLS FIRST], [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum(l_quantity)#***]

(82) AdaptiveSparkPlan
Output [6]: [c_name#***, c_custkey#***, o_orderkey#***, o_orderdate#***, o_totalprice#***, sum(l_quantity)#***]
Arguments: isFinalPlan=true
