== Physical Plan ==
AdaptiveSparkPlan (31)
+- == Final Plan ==
   VeloxColumnarToRowExec (19)
   +- ^ RegularHashAggregateExecTransformer (17)
      +- ^ InputIteratorTransformer (16)
         +- ShuffleQueryStage (15), Statistics(***)
            +- ColumnarExchange (14)
               +- ^ FlushableHashAggregateExecTransformer (12)
                  +- ^ ProjectExecTransformer (11)
                     +- ^ GlutenBroadcastHashJoinExecTransformer Inner (10)
                        :- ^ ProjectExecTransformer (3)
                        :  +- ^ FilterExecTransformer (2)
                        :     +- ^ Scan parquet default.lineitem (1)
                        +- ^ InputIteratorTransformer (9)
                           +- BroadcastQueryStage (8), Statistics(***)
                              +- ColumnarBroadcastExchange (7)
                                 +- ^ FilterExecTransformer (5)
                                    +- ^ Scan parquet default.part (4)
+- == Initial Plan ==
   HashAggregate (30)
   +- Exchange (29)
      +- HashAggregate (28)
         +- Project (27)
            +- BroadcastHashJoin Inner BuildRight (26)
               :- Project (22)
               :  +- Filter (21)
               :     +- Scan parquet default.lineitem (20)
               +- BroadcastExchange (25)
                  +- Filter (24)
                     +- Scan parquet default.part (23)


(1) Scan parquet default.lineitem
Output [6]: [l_partkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, l_shipinstruct#***, l_shipmode#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipinstruct), In(l_shipmode, [AIR,AIR REG]), EqualTo(l_shipinstruct,DELIVER IN PERSON), IsNotNull(l_partkey), Or(Or(And(GreaterThanOrEqual(l_quantity,1.00),LessThanOrEqual(l_quantity,11.00)),And(GreaterThanOrEqual(l_quantity,10.00),LessThanOrEqual(l_quantity,20.00))),And(GreaterThanOrEqual(l_quantity,20.00),LessThanOrEqual(l_quantity,30.00)))]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipinstruct:string,l_shipmode:string>

(2) FilterExecTransformer
Input [6]: [l_partkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, l_shipinstruct#***, l_shipmode#***]
Arguments: ((((isnotnull(l_shipinstruct#***) AND l_shipmode#*** IN (AIR,AIR REG)) AND (l_shipinstruct#*** = DELIVER IN PERSON)) AND isnotnull(l_partkey#***)) AND ((((l_quantity#*** >= 1.00) AND (l_quantity#*** <= 11.00)) OR ((l_quantity#*** >= 10.00) AND (l_quantity#*** <= 20.00))) OR ((l_quantity#*** >= 20.00) AND (l_quantity#*** <= 30.00))))

(3) ProjectExecTransformer
Input [6]: [l_partkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, l_shipinstruct#***, l_shipmode#***]
Arguments: [l_partkey#***, l_quantity#***, l_extendedprice#***, l_discount#***]

(4) Scan parquet default.part
Output [4]: [p_partkey#***, p_size#***, p_container#***, p_brand#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_size), GreaterThanOrEqual(p_size,1), IsNotNull(p_partkey), Or(Or(And(And(EqualTo(p_brand,Brand#***),In(p_container, [SM BOX,SM CASE,SM PACK,SM PKG])),LessThanOrEqual(p_size,5)),And(And(EqualTo(p_brand,Brand#***),In(p_container, [MED BAG,MED BOX,MED PACK,MED PKG])),LessThanOrEqual(p_size,10))),And(And(EqualTo(p_brand,Brand#***),In(p_container, [LG BOX,LG CASE,LG PACK,LG PKG])),LessThanOrEqual(p_size,15)))]
ReadSchema: struct<p_partkey:bigint,p_size:int,p_container:string,p_brand:string>

(5) FilterExecTransformer
Input [4]: [p_partkey#***, p_size#***, p_container#***, p_brand#***]
Arguments: (((isnotnull(p_size#***) AND (p_size#*** >= 1)) AND isnotnull(p_partkey#***)) AND (((((p_brand#*** = Brand#***) AND p_container#*** IN (SM CASE,SM BOX,SM PACK,SM PKG)) AND (p_size#*** <= 5)) OR (((p_brand#*** = Brand#***) AND p_container#*** IN (MED BAG,MED BOX,MED PKG,MED PACK)) AND (p_size#*** <= 10))) OR (((p_brand#*** = Brand#***) AND p_container#*** IN (LG CASE,LG BOX,LG PACK,LG PKG)) AND (p_size#*** <= 15))))

(6) WholeStageCodegenTransformer (116)
Input [4]: [p_partkey#***, p_size#***, p_container#***, p_brand#***]
Arguments: false

(7) ColumnarBroadcastExchange
Input [4]: [p_partkey#***, p_size#***, p_container#***, p_brand#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(8) BroadcastQueryStage
Output [4]: [p_partkey#***, p_size#***, p_container#***, p_brand#***]
Arguments: 0

(9) InputIteratorTransformer
Input [4]: [p_partkey#***, p_size#***, p_container#***, p_brand#***]

(10) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_partkey#***]
Right keys [1]: [p_partkey#***]
Join condition: (((((((p_brand#*** = Brand#***) AND p_container#*** IN (SM CASE,SM BOX,SM PACK,SM PKG)) AND (l_quantity#*** >= 1.00)) AND (l_quantity#*** <= 11.00)) AND (p_size#*** <= 5)) OR (((((p_brand#*** = Brand#***) AND p_container#*** IN (MED BAG,MED BOX,MED PKG,MED PACK)) AND (l_quantity#*** >= 10.00)) AND (l_quantity#*** <= 20.00)) AND (p_size#*** <= 10))) OR (((((p_brand#*** = Brand#***) AND p_container#*** IN (LG CASE,LG BOX,LG PACK,LG PKG)) AND (l_quantity#*** >= 20.00)) AND (l_quantity#*** <= 30.00)) AND (p_size#*** <= 15)))

(11) ProjectExecTransformer
Input [8]: [l_partkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, p_partkey#***, p_size#***, p_container#***, p_brand#***]
Arguments: [l_extendedprice#***, l_discount#***]

(12) FlushableHashAggregateExecTransformer
Input [2]: [l_extendedprice#***, l_discount#***]
Keys: []
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [2]: [sum#***, isEmpty#***]

(13) WholeStageCodegenTransformer (117)
Input [2]: [sum#***, isEmpty#***]
Arguments: false

(14) ColumnarExchange
Input [2]: [sum#***, isEmpty#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***], [id=#***]

(15) ShuffleQueryStage
Output [2]: [sum#***, isEmpty#***]
Arguments: 1

(16) InputIteratorTransformer
Input [2]: [sum#***, isEmpty#***]

(17) RegularHashAggregateExecTransformer
Input [2]: [sum#***, isEmpty#***]
Keys: []
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***]
Results [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** AS revenue#***]

(18) WholeStageCodegenTransformer (118)
Input [1]: [revenue#***]
Arguments: false

(19) VeloxColumnarToRowExec
Input [1]: [revenue#***]

(20) Scan parquet default.lineitem
Output [6]: [l_partkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, l_shipinstruct#***, l_shipmode#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipinstruct), In(l_shipmode, [AIR,AIR REG]), EqualTo(l_shipinstruct,DELIVER IN PERSON), IsNotNull(l_partkey), Or(Or(And(GreaterThanOrEqual(l_quantity,1.00),LessThanOrEqual(l_quantity,11.00)),And(GreaterThanOrEqual(l_quantity,10.00),LessThanOrEqual(l_quantity,20.00))),And(GreaterThanOrEqual(l_quantity,20.00),LessThanOrEqual(l_quantity,30.00)))]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipinstruct:string,l_shipmode:string>

(21) Filter
Input [6]: [l_partkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, l_shipinstruct#***, l_shipmode#***]
Condition : ((((isnotnull(l_shipinstruct#***) AND l_shipmode#*** IN (AIR,AIR REG)) AND (l_shipinstruct#*** = DELIVER IN PERSON)) AND isnotnull(l_partkey#***)) AND ((((l_quantity#*** >= 1.00) AND (l_quantity#*** <= 11.00)) OR ((l_quantity#*** >= 10.00) AND (l_quantity#*** <= 20.00))) OR ((l_quantity#*** >= 20.00) AND (l_quantity#*** <= 30.00))))

(22) Project
Output [4]: [l_partkey#***, l_quantity#***, l_extendedprice#***, l_discount#***]
Input [6]: [l_partkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, l_shipinstruct#***, l_shipmode#***]

(23) Scan parquet default.part
Output [4]: [p_partkey#***, p_size#***, p_container#***, p_brand#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_size), GreaterThanOrEqual(p_size,1), IsNotNull(p_partkey), Or(Or(And(And(EqualTo(p_brand,Brand#***),In(p_container, [SM BOX,SM CASE,SM PACK,SM PKG])),LessThanOrEqual(p_size,5)),And(And(EqualTo(p_brand,Brand#***),In(p_container, [MED BAG,MED BOX,MED PACK,MED PKG])),LessThanOrEqual(p_size,10))),And(And(EqualTo(p_brand,Brand#***),In(p_container, [LG BOX,LG CASE,LG PACK,LG PKG])),LessThanOrEqual(p_size,15)))]
ReadSchema: struct<p_partkey:bigint,p_size:int,p_container:string,p_brand:string>

(24) Filter
Input [4]: [p_partkey#***, p_size#***, p_container#***, p_brand#***]
Condition : (((isnotnull(p_size#***) AND (p_size#*** >= 1)) AND isnotnull(p_partkey#***)) AND (((((p_brand#*** = Brand#***) AND p_container#*** IN (SM CASE,SM BOX,SM PACK,SM PKG)) AND (p_size#*** <= 5)) OR (((p_brand#*** = Brand#***) AND p_container#*** IN (MED BAG,MED BOX,MED PKG,MED PACK)) AND (p_size#*** <= 10))) OR (((p_brand#*** = Brand#***) AND p_container#*** IN (LG CASE,LG BOX,LG PACK,LG PKG)) AND (p_size#*** <= 15))))

(25) BroadcastExchange
Input [4]: [p_partkey#***, p_size#***, p_container#***, p_brand#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(26) BroadcastHashJoin
Left keys [1]: [l_partkey#***]
Right keys [1]: [p_partkey#***]
Join condition: (((((((p_brand#*** = Brand#***) AND p_container#*** IN (SM CASE,SM BOX,SM PACK,SM PKG)) AND (l_quantity#*** >= 1.00)) AND (l_quantity#*** <= 11.00)) AND (p_size#*** <= 5)) OR (((((p_brand#*** = Brand#***) AND p_container#*** IN (MED BAG,MED BOX,MED PKG,MED PACK)) AND (l_quantity#*** >= 10.00)) AND (l_quantity#*** <= 20.00)) AND (p_size#*** <= 10))) OR (((((p_brand#*** = Brand#***) AND p_container#*** IN (LG CASE,LG BOX,LG PACK,LG PKG)) AND (l_quantity#*** >= 20.00)) AND (l_quantity#*** <= 30.00)) AND (p_size#*** <= 15)))

(27) Project
Output [2]: [l_extendedprice#***, l_discount#***]
Input [8]: [l_partkey#***, l_quantity#***, l_extendedprice#***, l_discount#***, p_partkey#***, p_size#***, p_container#***, p_brand#***]

(28) HashAggregate
Input [2]: [l_extendedprice#***, l_discount#***]
Keys: []
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [2]: [sum#***, isEmpty#***]

(29) Exchange
Input [2]: [sum#***, isEmpty#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***]

(30) HashAggregate
Input [2]: [sum#***, isEmpty#***]
Keys: []
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***]
Results [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** AS revenue#***]

(31) AdaptiveSparkPlan
Output [1]: [revenue#***]
Arguments: isFinalPlan=true
