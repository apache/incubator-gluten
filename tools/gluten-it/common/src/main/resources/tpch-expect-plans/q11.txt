== Physical Plan ==
AdaptiveSparkPlan (56)
+- == Final Plan ==
   VeloxColumnarToRowExec (36)
   +- ^ SortExecTransformer (34)
      +- ^ InputIteratorTransformer (33)
         +- AQEShuffleRead (32)
            +- ShuffleQueryStage (31), Statistics(***)
               +- ColumnarExchange (30)
                  +- ^ FilterExecTransformer (28)
                     +- ^ RegularHashAggregateExecTransformer (27)
                        +- ^ InputIteratorTransformer (26)
                           +- AQEShuffleRead (25)
                              +- ShuffleQueryStage (24), Statistics(***)
                                 +- ColumnarExchange (23)
                                    +- ^ ProjectExecTransformer (21)
                                       +- ^ FlushableHashAggregateExecTransformer (20)
                                          +- ^ ProjectExecTransformer (19)
                                             +- ^ GlutenBroadcastHashJoinExecTransformer Inner (18)
                                                :- ^ ProjectExecTransformer (10)
                                                :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (9)
                                                :     :- ^ FilterExecTransformer (2)
                                                :     :  +- ^ Scan parquet default.partsupp (1)
                                                :     +- ^ InputIteratorTransformer (8)
                                                :        +- BroadcastQueryStage (7), Statistics(***)
                                                :           +- ColumnarBroadcastExchange (6)
                                                :              +- ^ FilterExecTransformer (4)
                                                :                 +- ^ Scan parquet default.supplier (3)
                                                +- ^ InputIteratorTransformer (17)
                                                   +- BroadcastQueryStage (16), Statistics(***)
                                                      +- ColumnarBroadcastExchange (15)
                                                         +- ^ ProjectExecTransformer (13)
                                                            +- ^ FilterExecTransformer (12)
                                                               +- ^ Scan parquet default.nation (11)
+- == Initial Plan ==
   Sort (55)
   +- Exchange (54)
      +- Filter (53)
         +- HashAggregate (52)
            +- Exchange (51)
               +- HashAggregate (50)
                  +- Project (49)
                     +- BroadcastHashJoin Inner BuildRight (48)
                        :- Project (43)
                        :  +- BroadcastHashJoin Inner BuildRight (42)
                        :     :- Filter (38)
                        :     :  +- Scan parquet default.partsupp (37)
                        :     +- BroadcastExchange (41)
                        :        +- Filter (40)
                        :           +- Scan parquet default.supplier (39)
                        +- BroadcastExchange (47)
                           +- Project (46)
                              +- Filter (45)
                                 +- Scan parquet default.nation (44)


(1) Scan parquet default.partsupp
Output [4]: [ps_partkey#***, ps_suppkey#***, ps_availqty#***, ps_supplycost#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(2) FilterExecTransformer
Input [4]: [ps_partkey#***, ps_suppkey#***, ps_availqty#***, ps_supplycost#***]
Arguments: isnotnull(ps_suppkey#***)

(3) Scan parquet default.supplier
Output [2]: [s_suppkey#***, s_nationkey#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(4) FilterExecTransformer
Input [2]: [s_suppkey#***, s_nationkey#***]
Arguments: (isnotnull(s_suppkey#***) AND isnotnull(s_nationkey#***))

(5) WholeStageCodegenTransformer (69)
Input [2]: [s_suppkey#***, s_nationkey#***]
Arguments: false

(6) ColumnarBroadcastExchange
Input [2]: [s_suppkey#***, s_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(7) BroadcastQueryStage
Output [2]: [s_suppkey#***, s_nationkey#***]
Arguments: 0

(8) InputIteratorTransformer
Input [2]: [s_suppkey#***, s_nationkey#***]

(9) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_suppkey#***]
Right keys [1]: [s_suppkey#***]
Join condition: None

(10) ProjectExecTransformer
Input [6]: [ps_partkey#***, ps_suppkey#***, ps_availqty#***, ps_supplycost#***, s_suppkey#***, s_nationkey#***]
Arguments: [ps_partkey#***, ps_availqty#***, ps_supplycost#***, s_nationkey#***]

(11) Scan parquet default.nation
Output [2]: [n_nationkey#***, n_name#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,GERMANY), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(12) FilterExecTransformer
Input [2]: [n_nationkey#***, n_name#***]
Arguments: ((isnotnull(n_name#***) AND (n_name#*** = GERMANY)) AND isnotnull(n_nationkey#***))

(13) ProjectExecTransformer
Input [2]: [n_nationkey#***, n_name#***]
Arguments: [n_nationkey#***]

(14) WholeStageCodegenTransformer (70)
Input [1]: [n_nationkey#***]
Arguments: false

(15) ColumnarBroadcastExchange
Input [1]: [n_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(16) BroadcastQueryStage
Output [1]: [n_nationkey#***]
Arguments: 1

(17) InputIteratorTransformer
Input [1]: [n_nationkey#***]

(18) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#***]
Right keys [1]: [n_nationkey#***]
Join condition: None

(19) ProjectExecTransformer
Input [5]: [ps_partkey#***, ps_availqty#***, ps_supplycost#***, s_nationkey#***, n_nationkey#***]
Arguments: [ps_partkey#***, ps_availqty#***, ps_supplycost#***]

(20) FlushableHashAggregateExecTransformer
Input [3]: [ps_partkey#***, ps_availqty#***, ps_supplycost#***]
Keys [1]: [ps_partkey#***]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [ps_partkey#***, sum#***, isEmpty#***]

(21) ProjectExecTransformer
Input [3]: [ps_partkey#***, sum#***, isEmpty#***]
Arguments: [hash(ps_partkey#***, 42) AS hash_partition_key#***, ps_partkey#***, sum#***, isEmpty#***]

(22) WholeStageCodegenTransformer (71)
Input [4]: [hash_partition_key#***, ps_partkey#***, sum#***, isEmpty#***]
Arguments: false

(23) ColumnarExchange
Input [4]: [hash_partition_key#***, ps_partkey#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(ps_partkey#***, 100), ENSURE_REQUIREMENTS, [ps_partkey#***, sum#***, isEmpty#***], [plan_id=***], [id=#***]

(24) ShuffleQueryStage
Output [3]: [ps_partkey#***, sum#***, isEmpty#***]
Arguments: 2

(25) AQEShuffleRead
Input [3]: [ps_partkey#***, sum#***, isEmpty#***]
Arguments: coalesced

(26) InputIteratorTransformer
Input [3]: [ps_partkey#***, sum#***, isEmpty#***]

(27) RegularHashAggregateExecTransformer
Input [3]: [ps_partkey#***, sum#***, isEmpty#***]
Keys [1]: [ps_partkey#***]
Functions [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))#***]
Results [2]: [ps_partkey#***, sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))#*** AS value#***]

(28) FilterExecTransformer
Input [2]: [ps_partkey#***, value#***]
Arguments: (isnotnull(value#***) AND (cast(value#*** as decimal(38,6)) > Subquery subquery#***, [id=#***]))

(29) WholeStageCodegenTransformer (72)
Input [2]: [ps_partkey#***, value#***]
Arguments: false

(30) ColumnarExchange
Input [2]: [ps_partkey#***, value#***]
Arguments: rangepartitioning(value#*** DESC NULLS LAST, 100), ENSURE_REQUIREMENTS, [plan_id=***], [id=#***]

(31) ShuffleQueryStage
Output [2]: [ps_partkey#***, value#***]
Arguments: 3

(32) AQEShuffleRead
Input [2]: [ps_partkey#***, value#***]
Arguments: coalesced

(33) InputIteratorTransformer
Input [2]: [ps_partkey#***, value#***]

(34) SortExecTransformer
Input [2]: [ps_partkey#***, value#***]
Arguments: [value#*** DESC NULLS LAST], true, 0

(35) WholeStageCodegenTransformer (77)
Input [2]: [ps_partkey#***, value#***]
Arguments: false

(36) VeloxColumnarToRowExec
Input [2]: [ps_partkey#***, value#***]

(37) Scan parquet default.partsupp
Output [4]: [ps_partkey#***, ps_suppkey#***, ps_availqty#***, ps_supplycost#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(38) Filter
Input [4]: [ps_partkey#***, ps_suppkey#***, ps_availqty#***, ps_supplycost#***]
Condition : isnotnull(ps_suppkey#***)

(39) Scan parquet default.supplier
Output [2]: [s_suppkey#***, s_nationkey#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(40) Filter
Input [2]: [s_suppkey#***, s_nationkey#***]
Condition : (isnotnull(s_suppkey#***) AND isnotnull(s_nationkey#***))

(41) BroadcastExchange
Input [2]: [s_suppkey#***, s_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(42) BroadcastHashJoin
Left keys [1]: [ps_suppkey#***]
Right keys [1]: [s_suppkey#***]
Join condition: None

(43) Project
Output [4]: [ps_partkey#***, ps_availqty#***, ps_supplycost#***, s_nationkey#***]
Input [6]: [ps_partkey#***, ps_suppkey#***, ps_availqty#***, ps_supplycost#***, s_suppkey#***, s_nationkey#***]

(44) Scan parquet default.nation
Output [2]: [n_nationkey#***, n_name#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,GERMANY), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(45) Filter
Input [2]: [n_nationkey#***, n_name#***]
Condition : ((isnotnull(n_name#***) AND (n_name#*** = GERMANY)) AND isnotnull(n_nationkey#***))

(46) Project
Output [1]: [n_nationkey#***]
Input [2]: [n_nationkey#***, n_name#***]

(47) BroadcastExchange
Input [1]: [n_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(48) BroadcastHashJoin
Left keys [1]: [s_nationkey#***]
Right keys [1]: [n_nationkey#***]
Join condition: None

(49) Project
Output [3]: [ps_partkey#***, ps_availqty#***, ps_supplycost#***]
Input [5]: [ps_partkey#***, ps_availqty#***, ps_supplycost#***, s_nationkey#***, n_nationkey#***]

(50) HashAggregate
Input [3]: [ps_partkey#***, ps_availqty#***, ps_supplycost#***]
Keys [1]: [ps_partkey#***]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [ps_partkey#***, sum#***, isEmpty#***]

(51) Exchange
Input [3]: [ps_partkey#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(ps_partkey#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(52) HashAggregate
Input [3]: [ps_partkey#***, sum#***, isEmpty#***]
Keys [1]: [ps_partkey#***]
Functions [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))#***]
Results [2]: [ps_partkey#***, sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))#*** AS value#***]

(53) Filter
Input [2]: [ps_partkey#***, value#***]
Condition : (isnotnull(value#***) AND (cast(value#*** as decimal(38,6)) > Subquery subquery#***, [id=#***]))

(54) Exchange
Input [2]: [ps_partkey#***, value#***]
Arguments: rangepartitioning(value#*** DESC NULLS LAST, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(55) Sort
Input [2]: [ps_partkey#***, value#***]
Arguments: [value#*** DESC NULLS LAST], true, 0

(56) AdaptiveSparkPlan
Output [2]: [ps_partkey#***, value#***]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 28 Hosting Expression = Subquery subquery#***, [id=#***]
AdaptiveSparkPlan (93)
+- == Final Plan ==
   VeloxColumnarToRowExec (76)
   +- ^ RegularHashAggregateExecTransformer (74)
      +- ^ InputIteratorTransformer (73)
         +- ShuffleQueryStage (72), Statistics(***)
            +- ColumnarExchange (71)
               +- ^ FlushableHashAggregateExecTransformer (69)
                  +- ^ ProjectExecTransformer (68)
                     +- ^ GlutenBroadcastHashJoinExecTransformer Inner (67)
                        :- ^ ProjectExecTransformer (63)
                        :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (62)
                        :     :- ^ FilterExecTransformer (58)
                        :     :  +- ^ Scan parquet default.partsupp (57)
                        :     +- ^ InputIteratorTransformer (61)
                        :        +- BroadcastQueryStage (60), Statistics(***)
                        :           +- ReusedExchange (59)
                        +- ^ InputIteratorTransformer (66)
                           +- BroadcastQueryStage (65), Statistics(***)
                              +- ReusedExchange (64)
+- == Initial Plan ==
   HashAggregate (92)
   +- Exchange (91)
      +- HashAggregate (90)
         +- Project (89)
            +- BroadcastHashJoin Inner BuildRight (88)
               :- Project (83)
               :  +- BroadcastHashJoin Inner BuildRight (82)
               :     :- Filter (78)
               :     :  +- Scan parquet default.partsupp (77)
               :     +- BroadcastExchange (81)
               :        +- Filter (80)
               :           +- Scan parquet default.supplier (79)
               +- BroadcastExchange (87)
                  +- Project (86)
                     +- Filter (85)
                        +- Scan parquet default.nation (84)


(57) Scan parquet default.partsupp
Output [3]: [ps_suppkey#***, ps_availqty#***, ps_supplycost#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(58) FilterExecTransformer
Input [3]: [ps_suppkey#***, ps_availqty#***, ps_supplycost#***]
Arguments: isnotnull(ps_suppkey#***)

(59) ReusedExchange [Reuses operator id: 6]
Output [2]: [s_suppkey#***, s_nationkey#***]

(60) BroadcastQueryStage
Output [2]: [s_suppkey#***, s_nationkey#***]
Arguments: 1

(61) InputIteratorTransformer
Input [2]: [s_suppkey#***, s_nationkey#***]

(62) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_suppkey#***]
Right keys [1]: [s_suppkey#***]
Join condition: None

(63) ProjectExecTransformer
Input [5]: [ps_suppkey#***, ps_availqty#***, ps_supplycost#***, s_suppkey#***, s_nationkey#***]
Arguments: [ps_availqty#***, ps_supplycost#***, s_nationkey#***]

(64) ReusedExchange [Reuses operator id: 15]
Output [1]: [n_nationkey#***]

(65) BroadcastQueryStage
Output [1]: [n_nationkey#***]
Arguments: 3

(66) InputIteratorTransformer
Input [1]: [n_nationkey#***]

(67) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#***]
Right keys [1]: [n_nationkey#***]
Join condition: None

(68) ProjectExecTransformer
Input [4]: [ps_availqty#***, ps_supplycost#***, s_nationkey#***, n_nationkey#***]
Arguments: [ps_availqty#***, ps_supplycost#***]

(69) FlushableHashAggregateExecTransformer
Input [2]: [ps_availqty#***, ps_supplycost#***]
Keys: []
Functions [1]: [partial_sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [2]: [sum#***, isEmpty#***]

(70) WholeStageCodegenTransformer (75)
Input [2]: [sum#***, isEmpty#***]
Arguments: false

(71) ColumnarExchange
Input [2]: [sum#***, isEmpty#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***], [id=#***]

(72) ShuffleQueryStage
Output [2]: [sum#***, isEmpty#***]
Arguments: 4

(73) InputIteratorTransformer
Input [2]: [sum#***, isEmpty#***]

(74) RegularHashAggregateExecTransformer
Input [2]: [sum#***, isEmpty#***]
Keys: []
Functions [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))#***]
Results [1]: [CheckOverflow((promote_precision(cast(sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))#*** as decimal(38,10))) * 0.0001000000), DecimalType(38,6)) AS (sum((ps_supplycost * ps_availqty)) * 0.0001000000)#***]

(75) WholeStageCodegenTransformer (76)
Input [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#***]
Arguments: false

(76) VeloxColumnarToRowExec
Input [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#***]

(77) Scan parquet default.partsupp
Output [3]: [ps_suppkey#***, ps_availqty#***, ps_supplycost#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/partsupp]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(78) Filter
Input [3]: [ps_suppkey#***, ps_availqty#***, ps_supplycost#***]
Condition : isnotnull(ps_suppkey#***)

(79) Scan parquet default.supplier
Output [2]: [s_suppkey#***, s_nationkey#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(80) Filter
Input [2]: [s_suppkey#***, s_nationkey#***]
Condition : (isnotnull(s_suppkey#***) AND isnotnull(s_nationkey#***))

(81) BroadcastExchange
Input [2]: [s_suppkey#***, s_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(82) BroadcastHashJoin
Left keys [1]: [ps_suppkey#***]
Right keys [1]: [s_suppkey#***]
Join condition: None

(83) Project
Output [3]: [ps_availqty#***, ps_supplycost#***, s_nationkey#***]
Input [5]: [ps_suppkey#***, ps_availqty#***, ps_supplycost#***, s_suppkey#***, s_nationkey#***]

(84) Scan parquet default.nation
Output [2]: [n_nationkey#***, n_name#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,GERMANY), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(85) Filter
Input [2]: [n_nationkey#***, n_name#***]
Condition : ((isnotnull(n_name#***) AND (n_name#*** = GERMANY)) AND isnotnull(n_nationkey#***))

(86) Project
Output [1]: [n_nationkey#***]
Input [2]: [n_nationkey#***, n_name#***]

(87) BroadcastExchange
Input [1]: [n_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(88) BroadcastHashJoin
Left keys [1]: [s_nationkey#***]
Right keys [1]: [n_nationkey#***]
Join condition: None

(89) Project
Output [2]: [ps_availqty#***, ps_supplycost#***]
Input [4]: [ps_availqty#***, ps_supplycost#***, s_nationkey#***, n_nationkey#***]

(90) HashAggregate
Input [2]: [ps_availqty#***, ps_supplycost#***]
Keys: []
Functions [1]: [partial_sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [2]: [sum#***, isEmpty#***]

(91) Exchange
Input [2]: [sum#***, isEmpty#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***]

(92) HashAggregate
Input [2]: [sum#***, isEmpty#***]
Keys: []
Functions [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))#***]
Results [1]: [CheckOverflow((promote_precision(cast(sum(CheckOverflow((promote_precision(ps_supplycost#***) * promote_precision(cast(ps_availqty#*** as decimal(12,2)))), DecimalType(23,2)))#*** as decimal(38,10))) * 0.0001000000), DecimalType(38,6)) AS (sum((ps_supplycost * ps_availqty)) * 0.0001000000)#***]

(93) AdaptiveSparkPlan
Output [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#***]
Arguments: isFinalPlan=true
