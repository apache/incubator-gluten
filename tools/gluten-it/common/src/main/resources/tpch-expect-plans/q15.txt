== Physical Plan ==
AdaptiveSparkPlan (40)
+- == Final Plan ==
   VeloxColumnarToRowExec (25)
   +- AQEShuffleRead (24)
      +- ShuffleQueryStage (23), Statistics(***)
         +- ColumnarExchange (22)
            +- ^ ProjectExecTransformer (20)
               +- ^ GlutenBroadcastHashJoinExecTransformer Inner (19)
                  :- ^ InputIteratorTransformer (6)
                  :  +- BroadcastQueryStage (5), Statistics(***)
                  :     +- ColumnarBroadcastExchange (4)
                  :        +- ^ FilterExecTransformer (2)
                  :           +- ^ Scan parquet default.supplier (1)
                  +- ^ FilterExecTransformer (18)
                     +- ^ RegularHashAggregateExecTransformer (17)
                        +- ^ InputIteratorTransformer (16)
                           +- AQEShuffleRead (15)
                              +- ShuffleQueryStage (14), Statistics(***)
                                 +- ColumnarExchange (13)
                                    +- ^ ProjectExecTransformer (11)
                                       +- ^ FlushableHashAggregateExecTransformer (10)
                                          +- ^ ProjectExecTransformer (9)
                                             +- ^ FilterExecTransformer (8)
                                                +- ^ Scan parquet default.lineitem (7)
+- == Initial Plan ==
   Sort (39)
   +- Exchange (38)
      +- Project (37)
         +- BroadcastHashJoin Inner BuildLeft (36)
            :- BroadcastExchange (28)
            :  +- Filter (27)
            :     +- Scan parquet default.supplier (26)
            +- Filter (35)
               +- HashAggregate (34)
                  +- Exchange (33)
                     +- HashAggregate (32)
                        +- Project (31)
                           +- Filter (30)
                              +- Scan parquet default.lineitem (29)


(1) Scan parquet default.supplier
Output [4]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_phone:string>

(2) FilterExecTransformer
Input [4]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***]
Arguments: isnotnull(s_suppkey#***)

(3) WholeStageCodegenTransformer (90)
Input [4]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***]
Arguments: false

(4) ColumnarBroadcastExchange
Input [4]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(5) BroadcastQueryStage
Output [4]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***]
Arguments: 0

(6) InputIteratorTransformer
Input [4]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***]

(7) Scan parquet default.lineitem
Output [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01), IsNotNull(l_suppkey)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(8) FilterExecTransformer
Input [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Arguments: (((isnotnull(l_shipdate#***) AND (l_shipdate#*** >= 1996-01-01)) AND (l_shipdate#*** < 1996-04-01)) AND isnotnull(l_suppkey#***))

(9) ProjectExecTransformer
Input [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Arguments: [l_suppkey#***, l_extendedprice#***, l_discount#***]

(10) FlushableHashAggregateExecTransformer
Input [3]: [l_suppkey#***, l_extendedprice#***, l_discount#***]
Keys [1]: [l_suppkey#***]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [l_suppkey#***, sum#***, isEmpty#***]

(11) ProjectExecTransformer
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]
Arguments: [hash(l_suppkey#***, 42) AS hash_partition_key#***, l_suppkey#***, sum#***, isEmpty#***]

(12) WholeStageCodegenTransformer (91)
Input [4]: [hash_partition_key#***, l_suppkey#***, sum#***, isEmpty#***]
Arguments: false

(13) ColumnarExchange
Input [4]: [hash_partition_key#***, l_suppkey#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(l_suppkey#***, 100), ENSURE_REQUIREMENTS, [l_suppkey#***, sum#***, isEmpty#***], [plan_id=***], [id=#***]

(14) ShuffleQueryStage
Output [3]: [l_suppkey#***, sum#***, isEmpty#***]
Arguments: 1

(15) AQEShuffleRead
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]
Arguments: coalesced

(16) InputIteratorTransformer
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]

(17) RegularHashAggregateExecTransformer
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]
Keys [1]: [l_suppkey#***]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***]
Results [2]: [l_suppkey#*** AS supplier_no#***, sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** AS total_revenue#***]

(18) FilterExecTransformer
Input [2]: [supplier_no#***, total_revenue#***]
Arguments: (isnotnull(total_revenue#***) AND (total_revenue#*** = Subquery subquery#***, [id=#***]))

(19) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_suppkey#***]
Right keys [1]: [supplier_no#***]
Join condition: None

(20) ProjectExecTransformer
Input [6]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, supplier_no#***, total_revenue#***]
Arguments: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, total_revenue#***]

(21) WholeStageCodegenTransformer (92)
Input [5]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, total_revenue#***]
Arguments: false

(22) ColumnarExchange
Input [5]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, total_revenue#***]
Arguments: rangepartitioning(s_suppkey#*** ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=***], [id=#***]

(23) ShuffleQueryStage
Output [5]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, total_revenue#***]
Arguments: 2

(24) AQEShuffleRead
Input [5]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, total_revenue#***]
Arguments: local

(25) VeloxColumnarToRowExec
Input [5]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, total_revenue#***]

(26) Scan parquet default.supplier
Output [4]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_phone:string>

(27) Filter
Input [4]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***]
Condition : isnotnull(s_suppkey#***)

(28) BroadcastExchange
Input [4]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(29) Scan parquet default.lineitem
Output [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01), IsNotNull(l_suppkey)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(30) Filter
Input [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Condition : (((isnotnull(l_shipdate#***) AND (l_shipdate#*** >= 1996-01-01)) AND (l_shipdate#*** < 1996-04-01)) AND isnotnull(l_suppkey#***))

(31) Project
Output [3]: [l_suppkey#***, l_extendedprice#***, l_discount#***]
Input [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]

(32) HashAggregate
Input [3]: [l_suppkey#***, l_extendedprice#***, l_discount#***]
Keys [1]: [l_suppkey#***]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [l_suppkey#***, sum#***, isEmpty#***]

(33) Exchange
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(l_suppkey#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(34) HashAggregate
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]
Keys [1]: [l_suppkey#***]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***]
Results [2]: [l_suppkey#*** AS supplier_no#***, sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** AS total_revenue#***]

(35) Filter
Input [2]: [supplier_no#***, total_revenue#***]
Condition : (isnotnull(total_revenue#***) AND (total_revenue#*** = Subquery subquery#***, [id=#***]))

(36) BroadcastHashJoin
Left keys [1]: [s_suppkey#***]
Right keys [1]: [supplier_no#***]
Join condition: None

(37) Project
Output [5]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, total_revenue#***]
Input [6]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, supplier_no#***, total_revenue#***]

(38) Exchange
Input [5]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, total_revenue#***]
Arguments: rangepartitioning(s_suppkey#*** ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(39) Sort
Input [5]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, total_revenue#***]
Arguments: [s_suppkey#*** ASC NULLS FIRST], true, 0

(40) AdaptiveSparkPlan
Output [5]: [s_suppkey#***, s_name#***, s_address#***, s_phone#***, total_revenue#***]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 18 Hosting Expression = Subquery subquery#***, [id=#***]
AdaptiveSparkPlan (69)
+- == Final Plan ==
   VeloxColumnarToRowExec (59)
   +- ^ RegularHashAggregateExecTransformer (57)
      +- ^ InputIteratorTransformer (56)
         +- ShuffleQueryStage (55), Statistics(***)
            +- ColumnarExchange (54)
               +- ^ FlushableHashAggregateExecTransformer (52)
                  +- ^ RegularHashAggregateExecTransformer (51)
                     +- ^ InputIteratorTransformer (50)
                        +- AQEShuffleRead (49)
                           +- ShuffleQueryStage (48), Statistics(***)
                              +- ColumnarExchange (47)
                                 +- ^ ProjectExecTransformer (45)
                                    +- ^ FlushableHashAggregateExecTransformer (44)
                                       +- ^ ProjectExecTransformer (43)
                                          +- ^ FilterExecTransformer (42)
                                             +- ^ Scan parquet default.lineitem (41)
+- == Initial Plan ==
   HashAggregate (68)
   +- Exchange (67)
      +- HashAggregate (66)
         +- HashAggregate (65)
            +- Exchange (64)
               +- HashAggregate (63)
                  +- Project (62)
                     +- Filter (61)
                        +- Scan parquet default.lineitem (60)


(41) Scan parquet default.lineitem
Output [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(42) FilterExecTransformer
Input [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Arguments: ((isnotnull(l_shipdate#***) AND (l_shipdate#*** >= 1996-01-01)) AND (l_shipdate#*** < 1996-04-01))

(43) ProjectExecTransformer
Input [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Arguments: [l_suppkey#***, l_extendedprice#***, l_discount#***]

(44) FlushableHashAggregateExecTransformer
Input [3]: [l_suppkey#***, l_extendedprice#***, l_discount#***]
Keys [1]: [l_suppkey#***]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [l_suppkey#***, sum#***, isEmpty#***]

(45) ProjectExecTransformer
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]
Arguments: [hash(l_suppkey#***, 42) AS hash_partition_key#***, l_suppkey#***, sum#***, isEmpty#***]

(46) WholeStageCodegenTransformer (93)
Input [4]: [hash_partition_key#***, l_suppkey#***, sum#***, isEmpty#***]
Arguments: false

(47) ColumnarExchange
Input [4]: [hash_partition_key#***, l_suppkey#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(l_suppkey#***, 100), ENSURE_REQUIREMENTS, [l_suppkey#***, sum#***, isEmpty#***], [plan_id=***], [id=#***]

(48) ShuffleQueryStage
Output [3]: [l_suppkey#***, sum#***, isEmpty#***]
Arguments: 0

(49) AQEShuffleRead
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]
Arguments: coalesced

(50) InputIteratorTransformer
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]

(51) RegularHashAggregateExecTransformer
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]
Keys [1]: [l_suppkey#***]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***]
Results [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** AS total_revenue#***]

(52) FlushableHashAggregateExecTransformer
Input [1]: [total_revenue#***]
Keys: []
Functions [1]: [partial_max(total_revenue#***)]
Aggregate Attributes [1]: [max#***]
Results [1]: [max#***]

(53) WholeStageCodegenTransformer (94)
Input [1]: [max#***]
Arguments: false

(54) ColumnarExchange
Input [1]: [max#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***], [id=#***]

(55) ShuffleQueryStage
Output [1]: [max#***]
Arguments: 1

(56) InputIteratorTransformer
Input [1]: [max#***]

(57) RegularHashAggregateExecTransformer
Input [1]: [max#***]
Keys: []
Functions [1]: [max(total_revenue#***)]
Aggregate Attributes [1]: [max(total_revenue#***)#***]
Results [1]: [max(total_revenue#***)#*** AS max(total_revenue)#***]

(58) WholeStageCodegenTransformer (95)
Input [1]: [max(total_revenue)#***]
Arguments: false

(59) VeloxColumnarToRowExec
Input [1]: [max(total_revenue)#***]

(60) Scan parquet default.lineitem
Output [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(61) Filter
Input [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Condition : ((isnotnull(l_shipdate#***) AND (l_shipdate#*** >= 1996-01-01)) AND (l_shipdate#*** < 1996-04-01))

(62) Project
Output [3]: [l_suppkey#***, l_extendedprice#***, l_discount#***]
Input [4]: [l_suppkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]

(63) HashAggregate
Input [3]: [l_suppkey#***, l_extendedprice#***, l_discount#***]
Keys [1]: [l_suppkey#***]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [l_suppkey#***, sum#***, isEmpty#***]

(64) Exchange
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(l_suppkey#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(65) HashAggregate
Input [3]: [l_suppkey#***, sum#***, isEmpty#***]
Keys [1]: [l_suppkey#***]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***]
Results [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** AS total_revenue#***]

(66) HashAggregate
Input [1]: [total_revenue#***]
Keys: []
Functions [1]: [partial_max(total_revenue#***)]
Aggregate Attributes [1]: [max#***]
Results [1]: [max#***]

(67) Exchange
Input [1]: [max#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***]

(68) HashAggregate
Input [1]: [max#***]
Keys: []
Functions [1]: [max(total_revenue#***)]
Aggregate Attributes [1]: [max(total_revenue#***)#***]
Results [1]: [max(total_revenue#***)#*** AS max(total_revenue)#***]

(69) AdaptiveSparkPlan
Output [1]: [max(total_revenue)#***]
Arguments: isFinalPlan=true
