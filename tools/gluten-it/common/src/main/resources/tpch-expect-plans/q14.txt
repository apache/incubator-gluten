== Physical Plan ==
AdaptiveSparkPlan (25)
+- == Final Plan ==
   * HashAggregate (15)
   +- ShuffleQueryStage (14), Statistics(***)
      +- Exchange (13)
         +- * HashAggregate (12)
            +- * Project (11)
               +- * BroadcastHashJoin Inner BuildRight (10)
                  :- * Project (4)
                  :  +- * Filter (3)
                  :     +- * ColumnarToRow (2)
                  :        +- Scan parquet default.lineitem (1)
                  +- BroadcastQueryStage (9), Statistics(***)
                     +- BroadcastExchange (8)
                        +- * Filter (7)
                           +- * ColumnarToRow (6)
                              +- Scan parquet default.part (5)
+- == Initial Plan ==
   HashAggregate (24)
   +- Exchange (23)
      +- HashAggregate (22)
         +- Project (21)
            +- BroadcastHashJoin Inner BuildRight (20)
               :- Project (17)
               :  +- Filter (16)
               :     +- Scan parquet default.lineitem (1)
               +- BroadcastExchange (19)
                  +- Filter (18)
                     +- Scan parquet default.part (5)


(1) Scan parquet default.lineitem
Output [4]: [l_partkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-09-01), LessThan(l_shipdate,1995-10-01), IsNotNull(l_partkey)]
ReadSchema: struct<l_partkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [l_partkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]

(3) Filter [codegen id : 2]
Input [4]: [l_partkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Condition : (((isnotnull(l_shipdate#***) AND (l_shipdate#*** >= 1995-09-01)) AND (l_shipdate#*** < 1995-10-01)) AND isnotnull(l_partkey#***))

(4) Project [codegen id : 2]
Output [3]: [l_partkey#***, l_extendedprice#***, l_discount#***]
Input [4]: [l_partkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]

(5) Scan parquet default.part
Output [2]: [p_partkey#***, p_type#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/part]
PushedFilters: [IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string>

(6) ColumnarToRow [codegen id : 1]
Input [2]: [p_partkey#***, p_type#***]

(7) Filter [codegen id : 1]
Input [2]: [p_partkey#***, p_type#***]
Condition : isnotnull(p_partkey#***)

(8) BroadcastExchange
Input [2]: [p_partkey#***, p_type#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(9) BroadcastQueryStage
Output [2]: [p_partkey#***, p_type#***]
Arguments: 0

(10) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [l_partkey#***]
Right keys [1]: [p_partkey#***]
Join condition: None

(11) Project [codegen id : 2]
Output [3]: [l_extendedprice#***, l_discount#***, p_type#***]
Input [5]: [l_partkey#***, l_extendedprice#***, l_discount#***, p_partkey#***, p_type#***]

(12) HashAggregate [codegen id : 2]
Input [3]: [l_extendedprice#***, l_discount#***, p_type#***]
Keys: []
Functions [2]: [partial_sum(CASE WHEN StartsWith(p_type#***, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) ELSE 0.0000 END), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [4]: [sum#***, isEmpty#***, sum#***, isEmpty#***]
Results [4]: [sum#***, isEmpty#***, sum#***, isEmpty#***]

(13) Exchange
Input [4]: [sum#***, isEmpty#***, sum#***, isEmpty#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***]

(14) ShuffleQueryStage
Output [4]: [sum#***, isEmpty#***, sum#***, isEmpty#***]
Arguments: 1

(15) HashAggregate [codegen id : 3]
Input [4]: [sum#***, isEmpty#***, sum#***, isEmpty#***]
Keys: []
Functions [2]: [sum(CASE WHEN StartsWith(p_type#***, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) ELSE 0.0000 END), sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum(CASE WHEN StartsWith(p_type#***, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) ELSE 0.0000 END)#***, sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***]
Results [1]: [CheckOverflow((promote_precision(CheckOverflow((100.0000 * promote_precision(sum(CASE WHEN StartsWith(p_type#***, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) ELSE 0.0000 END)#***)), DecimalType(38,6))) / promote_precision(cast(sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** as decimal(38,6)))), DecimalType(38,6)) AS promo_revenue#***]

(16) Filter
Input [4]: [l_partkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]
Condition : (((isnotnull(l_shipdate#***) AND (l_shipdate#*** >= 1995-09-01)) AND (l_shipdate#*** < 1995-10-01)) AND isnotnull(l_partkey#***))

(17) Project
Output [3]: [l_partkey#***, l_extendedprice#***, l_discount#***]
Input [4]: [l_partkey#***, l_extendedprice#***, l_discount#***, l_shipdate#***]

(18) Filter
Input [2]: [p_partkey#***, p_type#***]
Condition : isnotnull(p_partkey#***)

(19) BroadcastExchange
Input [2]: [p_partkey#***, p_type#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(20) BroadcastHashJoin
Left keys [1]: [l_partkey#***]
Right keys [1]: [p_partkey#***]
Join condition: None

(21) Project
Output [3]: [l_extendedprice#***, l_discount#***, p_type#***]
Input [5]: [l_partkey#***, l_extendedprice#***, l_discount#***, p_partkey#***, p_type#***]

(22) HashAggregate
Input [3]: [l_extendedprice#***, l_discount#***, p_type#***]
Keys: []
Functions [2]: [partial_sum(CASE WHEN StartsWith(p_type#***, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) ELSE 0.0000 END), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [4]: [sum#***, isEmpty#***, sum#***, isEmpty#***]
Results [4]: [sum#***, isEmpty#***, sum#***, isEmpty#***]

(23) Exchange
Input [4]: [sum#***, isEmpty#***, sum#***, isEmpty#***]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=***]

(24) HashAggregate
Input [4]: [sum#***, isEmpty#***, sum#***, isEmpty#***]
Keys: []
Functions [2]: [sum(CASE WHEN StartsWith(p_type#***, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) ELSE 0.0000 END), sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum(CASE WHEN StartsWith(p_type#***, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) ELSE 0.0000 END)#***, sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***]
Results [1]: [CheckOverflow((promote_precision(CheckOverflow((100.0000 * promote_precision(sum(CASE WHEN StartsWith(p_type#***, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) ELSE 0.0000 END)#***)), DecimalType(38,6))) / promote_precision(cast(sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** as decimal(38,6)))), DecimalType(38,6)) AS promo_revenue#***]

(25) AdaptiveSparkPlan
Output [1]: [promo_revenue#***]
Arguments: isFinalPlan=true
