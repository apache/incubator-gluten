== Physical Plan ==
AdaptiveSparkPlan (21)
+- == Final Plan ==
   * Sort (13)
   +- AQEShuffleRead (12)
      +- ShuffleQueryStage (11), Statistics(***)
         +- Exchange (10)
            +- * HashAggregate (9)
               +- AQEShuffleRead (8)
                  +- ShuffleQueryStage (7), Statistics(***)
                     +- Exchange (6)
                        +- * HashAggregate (5)
                           +- * Project (4)
                              +- * Filter (3)
                                 +- * ColumnarToRow (2)
                                    +- Scan parquet default.lineitem (1)
+- == Initial Plan ==
   Sort (20)
   +- Exchange (19)
      +- HashAggregate (18)
         +- Exchange (17)
            +- HashAggregate (16)
               +- Project (15)
                  +- Filter (14)
                     +- Scan parquet default.lineitem (1)


(1) Scan parquet default.lineitem
Output [7]: [l_quantity#***, l_extendedprice#***, l_discount#***, l_tax#***, l_returnflag#***, l_linestatus#***, l_shipdate#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_shipdate), LessThanOrEqual(l_shipdate,1998-09-02)]
ReadSchema: struct<l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_tax:decimal(12,2),l_returnflag:string,l_linestatus:string,l_shipdate:date>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [l_quantity#***, l_extendedprice#***, l_discount#***, l_tax#***, l_returnflag#***, l_linestatus#***, l_shipdate#***]

(3) Filter [codegen id : 1]
Input [7]: [l_quantity#***, l_extendedprice#***, l_discount#***, l_tax#***, l_returnflag#***, l_linestatus#***, l_shipdate#***]
Condition : (isnotnull(l_shipdate#***) AND (l_shipdate#*** <= 1998-09-02))

(4) Project [codegen id : 1]
Output [6]: [l_quantity#***, l_extendedprice#***, l_discount#***, l_tax#***, l_returnflag#***, l_linestatus#***]
Input [7]: [l_quantity#***, l_extendedprice#***, l_discount#***, l_tax#***, l_returnflag#***, l_linestatus#***, l_shipdate#***]

(5) HashAggregate [codegen id : 1]
Input [6]: [l_quantity#***, l_extendedprice#***, l_discount#***, l_tax#***, l_returnflag#***, l_linestatus#***]
Keys [2]: [l_returnflag#***, l_linestatus#***]
Functions [8]: [partial_sum(l_quantity#***), partial_sum(l_extendedprice#***), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))), partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#*** as decimal(13,2)))), DecimalType(13,2)) as decimal(26,4)))), DecimalType(38,6))), partial_avg(l_quantity#***), partial_avg(l_extendedprice#***), partial_avg(l_discount#***), partial_count(1)]
Aggregate Attributes [15]: [sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, count#***, sum#***, count#***, sum#***, count#***, count#***]
Results [17]: [l_returnflag#***, l_linestatus#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, count#***, sum#***, count#***, sum#***, count#***, count#***]

(6) Exchange
Input [17]: [l_returnflag#***, l_linestatus#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, count#***, sum#***, count#***, sum#***, count#***, count#***]
Arguments: hashpartitioning(l_returnflag#***, l_linestatus#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(7) ShuffleQueryStage
Output [17]: [l_returnflag#***, l_linestatus#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, count#***, sum#***, count#***, sum#***, count#***, count#***]
Arguments: 0

(8) AQEShuffleRead
Input [17]: [l_returnflag#***, l_linestatus#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, count#***, sum#***, count#***, sum#***, count#***, count#***]
Arguments: coalesced

(9) HashAggregate [codegen id : 2]
Input [17]: [l_returnflag#***, l_linestatus#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, count#***, sum#***, count#***, sum#***, count#***, count#***]
Keys [2]: [l_returnflag#***, l_linestatus#***]
Functions [8]: [sum(l_quantity#***), sum(l_extendedprice#***), sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))), sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#*** as decimal(13,2)))), DecimalType(13,2)) as decimal(26,4)))), DecimalType(38,6))), avg(l_quantity#***), avg(l_extendedprice#***), avg(l_discount#***), count(1)]
Aggregate Attributes [8]: [sum(l_quantity#***)#***, sum(l_extendedprice#***)#***, sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#*** as decimal(13,2)))), DecimalType(13,2)) as decimal(26,4)))), DecimalType(38,6)))#***, avg(l_quantity#***)#***, avg(l_extendedprice#***)#***, avg(l_discount#***)#***, count(1)#***]
Results [10]: [l_returnflag#***, l_linestatus#***, sum(l_quantity#***)#*** AS sum_qty#***, sum(l_extendedprice#***)#*** AS sum_base_price#***, sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** AS sum_disc_price#***, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#*** as decimal(13,2)))), DecimalType(13,2)) as decimal(26,4)))), DecimalType(38,6)))#*** AS sum_charge#***, avg(l_quantity#***)#*** AS avg_qty#***, avg(l_extendedprice#***)#*** AS avg_price#***, avg(l_discount#***)#*** AS avg_disc#***, count(1)#*** AS count_order#***]

(10) Exchange
Input [10]: [l_returnflag#***, l_linestatus#***, sum_qty#***, sum_base_price#***, sum_disc_price#***, sum_charge#***, avg_qty#***, avg_price#***, avg_disc#***, count_order#***]
Arguments: rangepartitioning(l_returnflag#*** ASC NULLS FIRST, l_linestatus#*** ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(11) ShuffleQueryStage
Output [10]: [l_returnflag#***, l_linestatus#***, sum_qty#***, sum_base_price#***, sum_disc_price#***, sum_charge#***, avg_qty#***, avg_price#***, avg_disc#***, count_order#***]
Arguments: 1

(12) AQEShuffleRead
Input [10]: [l_returnflag#***, l_linestatus#***, sum_qty#***, sum_base_price#***, sum_disc_price#***, sum_charge#***, avg_qty#***, avg_price#***, avg_disc#***, count_order#***]
Arguments: coalesced

(13) Sort [codegen id : 3]
Input [10]: [l_returnflag#***, l_linestatus#***, sum_qty#***, sum_base_price#***, sum_disc_price#***, sum_charge#***, avg_qty#***, avg_price#***, avg_disc#***, count_order#***]
Arguments: [l_returnflag#*** ASC NULLS FIRST, l_linestatus#*** ASC NULLS FIRST], true, 0

(14) Filter
Input [7]: [l_quantity#***, l_extendedprice#***, l_discount#***, l_tax#***, l_returnflag#***, l_linestatus#***, l_shipdate#***]
Condition : (isnotnull(l_shipdate#***) AND (l_shipdate#*** <= 1998-09-02))

(15) Project
Output [6]: [l_quantity#***, l_extendedprice#***, l_discount#***, l_tax#***, l_returnflag#***, l_linestatus#***]
Input [7]: [l_quantity#***, l_extendedprice#***, l_discount#***, l_tax#***, l_returnflag#***, l_linestatus#***, l_shipdate#***]

(16) HashAggregate
Input [6]: [l_quantity#***, l_extendedprice#***, l_discount#***, l_tax#***, l_returnflag#***, l_linestatus#***]
Keys [2]: [l_returnflag#***, l_linestatus#***]
Functions [8]: [partial_sum(l_quantity#***), partial_sum(l_extendedprice#***), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))), partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#*** as decimal(13,2)))), DecimalType(13,2)) as decimal(26,4)))), DecimalType(38,6))), partial_avg(l_quantity#***), partial_avg(l_extendedprice#***), partial_avg(l_discount#***), partial_count(1)]
Aggregate Attributes [15]: [sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, count#***, sum#***, count#***, sum#***, count#***, count#***]
Results [17]: [l_returnflag#***, l_linestatus#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, count#***, sum#***, count#***, sum#***, count#***, count#***]

(17) Exchange
Input [17]: [l_returnflag#***, l_linestatus#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, count#***, sum#***, count#***, sum#***, count#***, count#***]
Arguments: hashpartitioning(l_returnflag#***, l_linestatus#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(18) HashAggregate
Input [17]: [l_returnflag#***, l_linestatus#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, isEmpty#***, sum#***, count#***, sum#***, count#***, sum#***, count#***, count#***]
Keys [2]: [l_returnflag#***, l_linestatus#***]
Functions [8]: [sum(l_quantity#***), sum(l_extendedprice#***), sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))), sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#*** as decimal(13,2)))), DecimalType(13,2)) as decimal(26,4)))), DecimalType(38,6))), avg(l_quantity#***), avg(l_extendedprice#***), avg(l_discount#***), count(1)]
Aggregate Attributes [8]: [sum(l_quantity#***)#***, sum(l_extendedprice#***)#***, sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#*** as decimal(13,2)))), DecimalType(13,2)) as decimal(26,4)))), DecimalType(38,6)))#***, avg(l_quantity#***)#***, avg(l_extendedprice#***)#***, avg(l_discount#***)#***, count(1)#***]
Results [10]: [l_returnflag#***, l_linestatus#***, sum(l_quantity#***)#*** AS sum_qty#***, sum(l_extendedprice#***)#*** AS sum_base_price#***, sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** AS sum_disc_price#***, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4))) * promote_precision(cast(CheckOverflow((1.00 + promote_precision(cast(l_tax#*** as decimal(13,2)))), DecimalType(13,2)) as decimal(26,4)))), DecimalType(38,6)))#*** AS sum_charge#***, avg(l_quantity#***)#*** AS avg_qty#***, avg(l_extendedprice#***)#*** AS avg_price#***, avg(l_discount#***)#*** AS avg_disc#***, count(1)#*** AS count_order#***]

(19) Exchange
Input [10]: [l_returnflag#***, l_linestatus#***, sum_qty#***, sum_base_price#***, sum_disc_price#***, sum_charge#***, avg_qty#***, avg_price#***, avg_disc#***, count_order#***]
Arguments: rangepartitioning(l_returnflag#*** ASC NULLS FIRST, l_linestatus#*** ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(20) Sort
Input [10]: [l_returnflag#***, l_linestatus#***, sum_qty#***, sum_base_price#***, sum_disc_price#***, sum_charge#***, avg_qty#***, avg_price#***, avg_disc#***, count_order#***]
Arguments: [l_returnflag#*** ASC NULLS FIRST, l_linestatus#*** ASC NULLS FIRST], true, 0

(21) AdaptiveSparkPlan
Output [10]: [l_returnflag#***, l_linestatus#***, sum_qty#***, sum_base_price#***, sum_disc_price#***, sum_charge#***, avg_qty#***, avg_price#***, avg_disc#***, count_order#***]
Arguments: isFinalPlan=true
