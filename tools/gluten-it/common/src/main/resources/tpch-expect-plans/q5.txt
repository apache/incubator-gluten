== Physical Plan ==
AdaptiveSparkPlan (78)
+- == Final Plan ==
   * Sort (49)
   +- AQEShuffleRead (48)
      +- ShuffleQueryStage (47), Statistics(***)
         +- Exchange (46)
            +- * HashAggregate (45)
               +- AQEShuffleRead (44)
                  +- ShuffleQueryStage (43), Statistics(***)
                     +- Exchange (42)
                        +- * HashAggregate (41)
                           +- * Project (40)
                              +- * BroadcastHashJoin Inner BuildRight (39)
                                 :- * Project (32)
                                 :  +- * BroadcastHashJoin Inner BuildRight (31)
                                 :     :- * Project (25)
                                 :     :  +- * BroadcastHashJoin Inner BuildRight (24)
                                 :     :     :- * Project (18)
                                 :     :     :  +- * BroadcastHashJoin Inner BuildRight (17)
                                 :     :     :     :- * Project (11)
                                 :     :     :     :  +- * BroadcastHashJoin Inner BuildLeft (10)
                                 :     :     :     :     :- BroadcastQueryStage (5), Statistics(***)
                                 :     :     :     :     :  +- BroadcastExchange (4)
                                 :     :     :     :     :     +- * Filter (3)
                                 :     :     :     :     :        +- * ColumnarToRow (2)
                                 :     :     :     :     :           +- Scan parquet default.customer (1)
                                 :     :     :     :     +- * Project (9)
                                 :     :     :     :        +- * Filter (8)
                                 :     :     :     :           +- * ColumnarToRow (7)
                                 :     :     :     :              +- Scan parquet default.orders (6)
                                 :     :     :     +- BroadcastQueryStage (16), Statistics(***)
                                 :     :     :        +- BroadcastExchange (15)
                                 :     :     :           +- * Filter (14)
                                 :     :     :              +- * ColumnarToRow (13)
                                 :     :     :                 +- Scan parquet default.lineitem (12)
                                 :     :     +- BroadcastQueryStage (23), Statistics(***)
                                 :     :        +- BroadcastExchange (22)
                                 :     :           +- * Filter (21)
                                 :     :              +- * ColumnarToRow (20)
                                 :     :                 +- Scan parquet default.supplier (19)
                                 :     +- BroadcastQueryStage (30), Statistics(***)
                                 :        +- BroadcastExchange (29)
                                 :           +- * Filter (28)
                                 :              +- * ColumnarToRow (27)
                                 :                 +- Scan parquet default.nation (26)
                                 +- BroadcastQueryStage (38), Statistics(***)
                                    +- BroadcastExchange (37)
                                       +- * Project (36)
                                          +- * Filter (35)
                                             +- * ColumnarToRow (34)
                                                +- Scan parquet default.region (33)
+- == Initial Plan ==
   Sort (77)
   +- Exchange (76)
      +- HashAggregate (75)
         +- Exchange (74)
            +- HashAggregate (73)
               +- Project (72)
                  +- BroadcastHashJoin Inner BuildRight (71)
                     :- Project (67)
                     :  +- BroadcastHashJoin Inner BuildRight (66)
                     :     :- Project (63)
                     :     :  +- BroadcastHashJoin Inner BuildRight (62)
                     :     :     :- Project (59)
                     :     :     :  +- BroadcastHashJoin Inner BuildRight (58)
                     :     :     :     :- Project (55)
                     :     :     :     :  +- BroadcastHashJoin Inner BuildLeft (54)
                     :     :     :     :     :- BroadcastExchange (51)
                     :     :     :     :     :  +- Filter (50)
                     :     :     :     :     :     +- Scan parquet default.customer (1)
                     :     :     :     :     +- Project (53)
                     :     :     :     :        +- Filter (52)
                     :     :     :     :           +- Scan parquet default.orders (6)
                     :     :     :     +- BroadcastExchange (57)
                     :     :     :        +- Filter (56)
                     :     :     :           +- Scan parquet default.lineitem (12)
                     :     :     +- BroadcastExchange (61)
                     :     :        +- Filter (60)
                     :     :           +- Scan parquet default.supplier (19)
                     :     +- BroadcastExchange (65)
                     :        +- Filter (64)
                     :           +- Scan parquet default.nation (26)
                     +- BroadcastExchange (70)
                        +- Project (69)
                           +- Filter (68)
                              +- Scan parquet default.region (33)


(1) Scan parquet default.customer
Output [2]: [c_custkey#***, c_nationkey#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/customer]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [c_custkey#***, c_nationkey#***]

(3) Filter [codegen id : 1]
Input [2]: [c_custkey#***, c_nationkey#***]
Condition : (isnotnull(c_custkey#***) AND isnotnull(c_nationkey#***))

(4) BroadcastExchange
Input [2]: [c_custkey#***, c_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(5) BroadcastQueryStage
Output [2]: [c_custkey#***, c_nationkey#***]
Arguments: 0

(6) Scan parquet default.orders
Output [3]: [o_orderkey#***, o_custkey#***, o_orderdate#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/orders]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1994-01-01), LessThan(o_orderdate,1995-01-01), IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(7) ColumnarToRow
Input [3]: [o_orderkey#***, o_custkey#***, o_orderdate#***]

(8) Filter
Input [3]: [o_orderkey#***, o_custkey#***, o_orderdate#***]
Condition : ((((isnotnull(o_orderdate#***) AND (o_orderdate#*** >= 1994-01-01)) AND (o_orderdate#*** < 1995-01-01)) AND isnotnull(o_custkey#***)) AND isnotnull(o_orderkey#***))

(9) Project
Output [2]: [o_orderkey#***, o_custkey#***]
Input [3]: [o_orderkey#***, o_custkey#***, o_orderdate#***]

(10) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_custkey#***]
Right keys [1]: [o_custkey#***]
Join condition: None

(11) Project [codegen id : 6]
Output [2]: [c_nationkey#***, o_orderkey#***]
Input [4]: [c_custkey#***, c_nationkey#***, o_orderkey#***, o_custkey#***]

(12) Scan parquet default.lineitem
Output [4]: [l_orderkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/lineitem]
PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(13) ColumnarToRow [codegen id : 2]
Input [4]: [l_orderkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]

(14) Filter [codegen id : 2]
Input [4]: [l_orderkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]
Condition : (isnotnull(l_orderkey#***) AND isnotnull(l_suppkey#***))

(15) BroadcastExchange
Input [4]: [l_orderkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(16) BroadcastQueryStage
Output [4]: [l_orderkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]
Arguments: 1

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [o_orderkey#***]
Right keys [1]: [l_orderkey#***]
Join condition: None

(18) Project [codegen id : 6]
Output [4]: [c_nationkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]
Input [6]: [c_nationkey#***, o_orderkey#***, l_orderkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]

(19) Scan parquet default.supplier
Output [2]: [s_suppkey#***, s_nationkey#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(20) ColumnarToRow [codegen id : 3]
Input [2]: [s_suppkey#***, s_nationkey#***]

(21) Filter [codegen id : 3]
Input [2]: [s_suppkey#***, s_nationkey#***]
Condition : (isnotnull(s_suppkey#***) AND isnotnull(s_nationkey#***))

(22) BroadcastExchange
Input [2]: [s_suppkey#***, s_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [plan_id=***]

(23) BroadcastQueryStage
Output [2]: [s_suppkey#***, s_nationkey#***]
Arguments: 2

(24) BroadcastHashJoin [codegen id : 6]
Left keys [2]: [l_suppkey#***, c_nationkey#***]
Right keys [2]: [s_suppkey#***, s_nationkey#***]
Join condition: None

(25) Project [codegen id : 6]
Output [3]: [l_extendedprice#***, l_discount#***, s_nationkey#***]
Input [6]: [c_nationkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***, s_suppkey#***, s_nationkey#***]

(26) Scan parquet default.nation
Output [3]: [n_nationkey#***, n_name#***, n_regionkey#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/nation]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(27) ColumnarToRow [codegen id : 4]
Input [3]: [n_nationkey#***, n_name#***, n_regionkey#***]

(28) Filter [codegen id : 4]
Input [3]: [n_nationkey#***, n_name#***, n_regionkey#***]
Condition : (isnotnull(n_nationkey#***) AND isnotnull(n_regionkey#***))

(29) BroadcastExchange
Input [3]: [n_nationkey#***, n_name#***, n_regionkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(30) BroadcastQueryStage
Output [3]: [n_nationkey#***, n_name#***, n_regionkey#***]
Arguments: 3

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [s_nationkey#***]
Right keys [1]: [n_nationkey#***]
Join condition: None

(32) Project [codegen id : 6]
Output [4]: [l_extendedprice#***, l_discount#***, n_name#***, n_regionkey#***]
Input [6]: [l_extendedprice#***, l_discount#***, s_nationkey#***, n_nationkey#***, n_name#***, n_regionkey#***]

(33) Scan parquet default.region
Output [2]: [r_regionkey#***, r_name#***]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-0.1/region]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(34) ColumnarToRow [codegen id : 5]
Input [2]: [r_regionkey#***, r_name#***]

(35) Filter [codegen id : 5]
Input [2]: [r_regionkey#***, r_name#***]
Condition : ((isnotnull(r_name#***) AND (r_name#*** = ASIA)) AND isnotnull(r_regionkey#***))

(36) Project [codegen id : 5]
Output [1]: [r_regionkey#***]
Input [2]: [r_regionkey#***, r_name#***]

(37) BroadcastExchange
Input [1]: [r_regionkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(38) BroadcastQueryStage
Output [1]: [r_regionkey#***]
Arguments: 4

(39) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [n_regionkey#***]
Right keys [1]: [r_regionkey#***]
Join condition: None

(40) Project [codegen id : 6]
Output [3]: [l_extendedprice#***, l_discount#***, n_name#***]
Input [5]: [l_extendedprice#***, l_discount#***, n_name#***, n_regionkey#***, r_regionkey#***]

(41) HashAggregate [codegen id : 6]
Input [3]: [l_extendedprice#***, l_discount#***, n_name#***]
Keys [1]: [n_name#***]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [n_name#***, sum#***, isEmpty#***]

(42) Exchange
Input [3]: [n_name#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(n_name#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(43) ShuffleQueryStage
Output [3]: [n_name#***, sum#***, isEmpty#***]
Arguments: 5

(44) AQEShuffleRead
Input [3]: [n_name#***, sum#***, isEmpty#***]
Arguments: coalesced

(45) HashAggregate [codegen id : 7]
Input [3]: [n_name#***, sum#***, isEmpty#***]
Keys [1]: [n_name#***]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***]
Results [2]: [n_name#***, sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** AS revenue#***]

(46) Exchange
Input [2]: [n_name#***, revenue#***]
Arguments: rangepartitioning(revenue#*** DESC NULLS LAST, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(47) ShuffleQueryStage
Output [2]: [n_name#***, revenue#***]
Arguments: 6

(48) AQEShuffleRead
Input [2]: [n_name#***, revenue#***]
Arguments: coalesced

(49) Sort [codegen id : 8]
Input [2]: [n_name#***, revenue#***]
Arguments: [revenue#*** DESC NULLS LAST], true, 0

(50) Filter
Input [2]: [c_custkey#***, c_nationkey#***]
Condition : (isnotnull(c_custkey#***) AND isnotnull(c_nationkey#***))

(51) BroadcastExchange
Input [2]: [c_custkey#***, c_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(52) Filter
Input [3]: [o_orderkey#***, o_custkey#***, o_orderdate#***]
Condition : ((((isnotnull(o_orderdate#***) AND (o_orderdate#*** >= 1994-01-01)) AND (o_orderdate#*** < 1995-01-01)) AND isnotnull(o_custkey#***)) AND isnotnull(o_orderkey#***))

(53) Project
Output [2]: [o_orderkey#***, o_custkey#***]
Input [3]: [o_orderkey#***, o_custkey#***, o_orderdate#***]

(54) BroadcastHashJoin
Left keys [1]: [c_custkey#***]
Right keys [1]: [o_custkey#***]
Join condition: None

(55) Project
Output [2]: [c_nationkey#***, o_orderkey#***]
Input [4]: [c_custkey#***, c_nationkey#***, o_orderkey#***, o_custkey#***]

(56) Filter
Input [4]: [l_orderkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]
Condition : (isnotnull(l_orderkey#***) AND isnotnull(l_suppkey#***))

(57) BroadcastExchange
Input [4]: [l_orderkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(58) BroadcastHashJoin
Left keys [1]: [o_orderkey#***]
Right keys [1]: [l_orderkey#***]
Join condition: None

(59) Project
Output [4]: [c_nationkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]
Input [6]: [c_nationkey#***, o_orderkey#***, l_orderkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***]

(60) Filter
Input [2]: [s_suppkey#***, s_nationkey#***]
Condition : (isnotnull(s_suppkey#***) AND isnotnull(s_nationkey#***))

(61) BroadcastExchange
Input [2]: [s_suppkey#***, s_nationkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [plan_id=***]

(62) BroadcastHashJoin
Left keys [2]: [l_suppkey#***, c_nationkey#***]
Right keys [2]: [s_suppkey#***, s_nationkey#***]
Join condition: None

(63) Project
Output [3]: [l_extendedprice#***, l_discount#***, s_nationkey#***]
Input [6]: [c_nationkey#***, l_suppkey#***, l_extendedprice#***, l_discount#***, s_suppkey#***, s_nationkey#***]

(64) Filter
Input [3]: [n_nationkey#***, n_name#***, n_regionkey#***]
Condition : (isnotnull(n_nationkey#***) AND isnotnull(n_regionkey#***))

(65) BroadcastExchange
Input [3]: [n_nationkey#***, n_name#***, n_regionkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=***]

(66) BroadcastHashJoin
Left keys [1]: [s_nationkey#***]
Right keys [1]: [n_nationkey#***]
Join condition: None

(67) Project
Output [4]: [l_extendedprice#***, l_discount#***, n_name#***, n_regionkey#***]
Input [6]: [l_extendedprice#***, l_discount#***, s_nationkey#***, n_nationkey#***, n_name#***, n_regionkey#***]

(68) Filter
Input [2]: [r_regionkey#***, r_name#***]
Condition : ((isnotnull(r_name#***) AND (r_name#*** = ASIA)) AND isnotnull(r_regionkey#***))

(69) Project
Output [1]: [r_regionkey#***]
Input [2]: [r_regionkey#***, r_name#***]

(70) BroadcastExchange
Input [1]: [r_regionkey#***]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=***]

(71) BroadcastHashJoin
Left keys [1]: [n_regionkey#***]
Right keys [1]: [r_regionkey#***]
Join condition: None

(72) Project
Output [3]: [l_extendedprice#***, l_discount#***, n_name#***]
Input [5]: [l_extendedprice#***, l_discount#***, n_name#***, n_regionkey#***, r_regionkey#***]

(73) HashAggregate
Input [3]: [l_extendedprice#***, l_discount#***, n_name#***]
Keys [1]: [n_name#***]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [2]: [sum#***, isEmpty#***]
Results [3]: [n_name#***, sum#***, isEmpty#***]

(74) Exchange
Input [3]: [n_name#***, sum#***, isEmpty#***]
Arguments: hashpartitioning(n_name#***, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(75) HashAggregate
Input [3]: [n_name#***, sum#***, isEmpty#***]
Keys [1]: [n_name#***]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#***]
Results [2]: [n_name#***, sum(CheckOverflow((promote_precision(cast(l_extendedprice#*** as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#*** as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)))#*** AS revenue#***]

(76) Exchange
Input [2]: [n_name#***, revenue#***]
Arguments: rangepartitioning(revenue#*** DESC NULLS LAST, 100), ENSURE_REQUIREMENTS, [plan_id=***]

(77) Sort
Input [2]: [n_name#***, revenue#***]
Arguments: [revenue#*** DESC NULLS LAST], true, 0

(78) AdaptiveSparkPlan
Output [2]: [n_name#***, revenue#***]
Arguments: isFinalPlan=true
