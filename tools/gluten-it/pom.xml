<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.apache.gluten</groupId>
  <artifactId>gluten-it</artifactId>
  <version>1.5.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <modules>
    <module>common</module>
    <module>package</module>
  </modules>

  <properties>
    <java.version>1.8</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <scala.version>2.12.17</scala.version>
    <scala.binary.version>2.12</scala.binary.version>
    <spark.version>3.4.4</spark.version>
    <spark.major.version>3</spark.major.version>
    <celeborn.version>0.6.0</celeborn.version>
    <uniffle.version>0.9.2</uniffle.version>
    <gluten.version>1.5.0-SNAPSHOT</gluten.version>
    <guava.version>32.0.1-jre</guava.version>
    <tpch.version>1.1</tpch.version>
    <tpcds.version>1.4</tpcds.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.gluten</groupId>
        <artifactId>gluten-package</artifactId>
        <version>${gluten.version}</version>
        <exclusions>
          <exclusion>
            <groupId>org.apache.gluten</groupId>
            <artifactId>gluten-substrait</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-core_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
        <exclusions>
          <exclusion>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro-mapred</artifactId>
          </exclusion>
          <exclusion>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-repl_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-catalyst_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-hive_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
        <exclusions>
          <exclusion>
            <groupId>jline</groupId>
            <artifactId>jline</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-core_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
        <type>test-jar</type>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-catalyst_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
        <type>test-jar</type>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-sql_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
        <exclusions>
          <exclusion>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-sql_${scala.binary.version}</artifactId>
        <version>${spark.version}</version>
        <type>test-jar</type>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>1.7.30</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <profiles>
    <profile>
      <id>java-8</id>
      <activation>
        <jdk>1.8</jdk>
      </activation>
      <properties>
        <java.version>1.8</java.version>
      </properties>
    </profile>
    <profile>
      <id>java-11</id>
      <activation>
        <jdk>11</jdk>
      </activation>
      <properties>
        <java.version>11</java.version>
      </properties>
    </profile>
    <profile>
      <id>java-17</id>
      <activation>
        <jdk>17</jdk>
      </activation>
      <properties>
        <java.version>17</java.version>
      </properties>
    </profile>
    <profile>
      <id>spark-3.2</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <spark.version>3.2.2</spark.version>
        <scala.version>2.12.15</scala.version>
        <scala.binary.version>2.12</scala.binary.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.gluten</groupId>
          <artifactId>spark-sql-columnar-shims-spark32</artifactId>
          <version>1.5.0-SNAPSHOT</version>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>spark-3.3</id>
      <properties>
        <spark.version>3.3.1</spark.version>
        <scala.version>2.12.15</scala.version>
        <scala.binary.version>2.12</scala.binary.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.gluten</groupId>
          <artifactId>spark-sql-columnar-shims-spark33</artifactId>
          <version>1.5.0-SNAPSHOT</version>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>spark-3.4</id>
      <properties>
        <spark.version>3.4.4</spark.version>
        <scala.version>2.12.17</scala.version>
        <scala.binary.version>2.12</scala.binary.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.gluten</groupId>
          <artifactId>spark-sql-columnar-shims-spark34</artifactId>
          <version>1.5.0-SNAPSHOT</version>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>spark-3.5</id>
      <properties>
        <spark.version>3.5.2</spark.version>
        <scala.version>2.12.18</scala.version>
        <scala.binary.version>2.12</scala.binary.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.gluten</groupId>
          <artifactId>spark-sql-columnar-shims-spark35</artifactId>
          <version>1.5.0-SNAPSHOT</version>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>spark-4.0</id>
      <properties>
        <spark.version>4.0.0</spark.version>
        <scala.version>2.13.8</scala.version>
        <scala.binary.version>2.13</scala.binary.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.gluten</groupId>
          <artifactId>spark-sql-columnar-shims-spark40</artifactId>
          <version>1.5.0-SNAPSHOT</version>
        </dependency>
      </dependencies>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>net.alchim31.maven</groupId>
              <artifactId>scala-maven-plugin</artifactId>
              <configuration>
                <compilerPlugins>
                  <compilerPlugin>
                    <groupId>org.wartremover</groupId>
                    <artifactId>wartremover_${scala.binary.version}</artifactId>
                    <version>3.0.6</version>
                  </compilerPlugin>
                </compilerPlugins>
                <dependencies>
                  <dependency>
                    <groupId>io.github.zhztheplayer.scalawarts</groupId>
                    <artifactId>scalawarts_${scala.binary.version}</artifactId>
                    <version>0.1.2</version>
                  </dependency>
                </dependencies>
                <recompileMode>${scala.recompile.mode}</recompileMode>
                <args>
                  <arg>-unchecked</arg>
                  <arg>-deprecation</arg>
                  <arg>-feature</arg>
                  <arg>-explaintypes</arg>
                  <arg>-target:jvm-1.8</arg>
                  <arg>-Wconf:cat=deprecation:wv,any:e</arg>
                  <arg>-Wunused:imports</arg>
                  <!--
                    TODO(SPARK-33805): Undo the corresponding deprecated usage suppression rule after fixed
                  -->
                  <arg>-Wconf:cat=scaladoc:wv</arg>
                  <arg>-Wconf:cat=lint-multiarg-infix:wv</arg>
                  <arg>-Wconf:cat=other-nullary-override:wv</arg>
                  <!--
                    SPARK-33775 Suppress compilation warnings that contain the following contents.
                    TODO(SPARK-33805): Undo the corresponding deprecated usage suppression rule after fixed.
                  -->
                  <arg>-Wconf:msg=^(?=.*?method|value|type|object|trait|inheritance)(?=.*?deprecated)(?=.*?since 2.13).+$:s</arg>
                  <arg>-Wconf:msg=^(?=.*?Widening conversion from)(?=.*?is deprecated because it loses precision).+$:s</arg>
                  <arg>-Wconf:msg=Auto-application to \`\(\)\` is deprecated:s</arg>
                  <arg>-Wconf:msg=method with a single empty parameter list overrides method without any parameter list:s</arg>
                  <arg>-Wconf:msg=method without a parameter list overrides a method with a single empty one:s</arg>
                  <!--
                    SPARK-35574 Prevent the recurrence of compilation warnings related to
                    `procedure syntax is deprecated`
                  -->
                  <arg>-Wconf:cat=deprecation&amp;msg=procedure syntax is deprecated:e</arg>
                  <!--
                    SPARK-35496 Upgrade Scala to 2.13.7 and suppress:
                    1. `The outer reference in this type test cannot be checked at run time`
                    2. `the type test for pattern TypeA cannot be checked at runtime because it
                     has type parameters eliminated by erasure`
                    3. `abstract type TypeA in type pattern Seq[TypeA] (the underlying of
                    Seq[TypeA]) is unchecked since it is eliminated by erasure`
                    4. `fruitless type test: a value of TypeA cannot also be a TypeB`
                  -->
                  <arg>-Wconf:cat=unchecked&amp;msg=outer reference:s</arg>
                  <arg>-Wconf:cat=unchecked&amp;msg=eliminated by erasure:s</arg>
                  <arg>-Wconf:msg=^(?=.*?a value of type)(?=.*?cannot also be).+$:s</arg>
                  <arg>-P:wartremover:traverser:io.github.zhztheplayer.scalawarts.InheritFromCaseClass</arg>
                </args>
              </configuration>
              <executions>
                <execution>
                  <id>scala-compile-first</id>
                  <phase>process-resources</phase>
                  <goals>
                    <goal>add-source</goal>
                    <goal>compile</goal>
                  </goals>
                </execution>
                <execution>
                  <id>scala-test-compile-first</id>
                  <phase>process-test-resources</phase>
                  <goals>
                    <goal>testCompile</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>
    <profile>
      <id>celeborn-0.4</id>
      <properties>
        <celeborn.version>0.4.3</celeborn.version>
      </properties>
    </profile>
    <profile>
      <id>celeborn-0.5</id>
      <properties>
        <celeborn.version>0.5.4</celeborn.version>
      </properties>
    </profile>
    <profile>
      <id>celeborn-0.6</id>
      <properties>
        <celeborn.version>0.6.0</celeborn.version>
      </properties>
    </profile>
  </profiles>
</project>
