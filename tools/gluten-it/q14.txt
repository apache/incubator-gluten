== Physical Plan ==
VeloxColumnarToRowExec (17)
+- ^ RegularHashAggregateExecTransformer (15)
   +- ^ InputIteratorTransformer (14)
      +- ColumnarExchange (13)
         +- ^ FlushableHashAggregateExecTransformer (11)
            +- ^ ProjectExecTransformer (10)
               +- ^ GlutenBroadcastHashJoinExecTransformer Inner (9)
                  :- ^ ProjectExecTransformer (3)
                  :  +- ^ FilterExecTransformer (2)
                  :     +- ^ Scan parquet spark_catalog.default.lineitem (1)
                  +- ^ InputIteratorTransformer (8)
                     +- ColumnarBroadcastExchange (7)
                        +- ^ FilterExecTransformer (5)
                           +- ^ Scan parquet spark_catalog.default.part (4)


(1) Scan parquet spark_catalog.default.lineitem
Output [4]: [l_partkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-09-01), LessThan(l_shipdate,1995-10-01), IsNotNull(l_partkey)]
ReadSchema: struct<l_partkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(2) FilterExecTransformer
Input [4]: [l_partkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: (((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1995-09-01)) AND (l_shipdate#X < 1995-10-01)) AND isnotnull(l_partkey#X))

(3) ProjectExecTransformer
Input [4]: [l_partkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: [l_partkey#X, l_extendedprice#X, l_discount#X]

(4) Scan parquet spark_catalog.default.part
Output [2]: [p_partkey#X, p_type#X]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/part]
PushedFilters: [IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string>

(5) FilterExecTransformer
Input [2]: [p_partkey#X, p_type#X]
Arguments: isnotnull(p_partkey#X)

(6) WholeStageCodegenTransformer (X)
Input [2]: [p_partkey#X, p_type#X]
Arguments: false
Native Plan:
-- TableScan

(7) ColumnarBroadcastExchange
Input [2]: [p_partkey#X, p_type#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(8) InputIteratorTransformer
Input [2]: [p_partkey#X, p_type#X]

(9) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join type: Inner
Join condition: None

(10) ProjectExecTransformer
Input [5]: [l_partkey#X, l_extendedprice#X, l_discount#X, p_partkey#X, p_type#X]
Arguments: [l_extendedprice#X, l_discount#X, p_type#X]

(11) FlushableHashAggregateExecTransformer
Input [3]: [l_extendedprice#X, l_discount#X, p_type#X]
Keys: []
Functions [2]: [partial_sum(CASE WHEN StartsWith(p_type#X, PROMO) THEN (l_extendedprice#X * (1 - l_discount#X)) ELSE 0.0000 END), partial_sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Results [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]

(12) WholeStageCodegenTransformer (X)
Input [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: false
Native Plan:
-- Project
  -- Aggregation
    -- Project
      -- Project
        -- Project
          -- HashJoin
            -- Project
              -- TableScan
            -- ValueStream

(13) ColumnarExchange
Input [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(14) InputIteratorTransformer
Input [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]

(15) RegularHashAggregateExecTransformer
Input [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Keys: []
Functions [2]: [sum(CASE WHEN StartsWith(p_type#X, PROMO) THEN (l_extendedprice#X * (1 - l_discount#X)) ELSE 0.0000 END), sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [2]: [sum(CASE WHEN StartsWith(p_type#X, PROMO) THEN (l_extendedprice#X * (1 - l_discount#X)) ELSE 0.0000 END)#X, sum((l_extendedprice#X * (1 - l_discount#X)))#X]
Results [1]: [((100.00 * sum(CASE WHEN StartsWith(p_type#X, PROMO) THEN (l_extendedprice#X * (1 - l_discount#X)) ELSE 0.0000 END)#X) / sum((l_extendedprice#X * (1 - l_discount#X)))#X) AS promo_revenue#X]

(16) WholeStageCodegenTransformer (X)
Input [1]: [promo_revenue#X]
Arguments: false
Native Plan:
-- Project
  -- Aggregation
    -- Project
      -- ValueStream

(17) VeloxColumnarToRowExec
Input [1]: [promo_revenue#X]

