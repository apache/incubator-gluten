== Physical Plan ==
VeloxColumnarToRowExec (26)
+- ^ SortExecTransformer (24)
   +- ^ InputIteratorTransformer (23)
      +- ColumnarExchange (22)
         +- ^ RegularHashAggregateExecTransformer (20)
            +- ^ InputIteratorTransformer (19)
               +- ColumnarExchange (18)
                  +- ^ ProjectExecTransformer (16)
                     +- ^ FlushableHashAggregateExecTransformer (15)
                        +- ^ ProjectExecTransformer (14)
                           +- ^ ShuffledHashJoinExecTransformer Inner (13)
                              :- ^ InputIteratorTransformer (6)
                              :  +- ColumnarExchange (5)
                              :     +- ^ ProjectExecTransformer (3)
                              :        +- ^ FilterExecTransformer (2)
                              :           +- ^ Scan parquet spark_catalog.default.orders (1)
                              +- ^ InputIteratorTransformer (12)
                                 +- ColumnarExchange (11)
                                    +- ^ ProjectExecTransformer (9)
                                       +- ^ FilterExecTransformer (8)
                                          +- ^ Scan parquet spark_catalog.default.lineitem (7)


(1) Scan parquet spark_catalog.default.orders
Output [2]: [o_orderkey#5430L, o_orderpriority#5434]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/orders]
PushedFilters: [IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderpriority:string>

(2) FilterExecTransformer
Input [2]: [o_orderkey#5430L, o_orderpriority#5434]
Arguments: isnotnull(o_orderkey#5430L)

(3) ProjectExecTransformer
Input [2]: [o_orderkey#5430L, o_orderpriority#5434]
Arguments: [hash(o_orderkey#5430L, 42) AS hash_partition_key#5548, hash(o_orderkey#5430L, 42) AS hash_partition_key#5545, o_orderkey#5430L, o_orderpriority#5434]

(4) WholeStageCodegenTransformer (96)
Input [4]: [hash_partition_key#5548, hash_partition_key#5545, o_orderkey#5430L, o_orderpriority#5434]
Arguments: false
Native Plan:
-- Project
  -- TableScan

(5) ColumnarExchange
Input [4]: [hash_partition_key#5548, hash_partition_key#5545, o_orderkey#5430L, o_orderpriority#5434]
Arguments: hashpartitioning(o_orderkey#5430L, 100), ENSURE_REQUIREMENTS, [hash_partition_key#5545, o_orderkey#5430L, o_orderpriority#5434], [plan_id=9124], [id=#9124]

(6) InputIteratorTransformer
Input [3]: [hash_partition_key#5545, o_orderkey#5430L, o_orderpriority#5434]

(7) Scan parquet spark_catalog.default.lineitem
Output [5]: [l_orderkey#5484L, l_commitdate#5494, l_receiptdate#5495, l_shipmode#5497, l_shipdate#5499]
Batched: true
Location: InMemoryFileIndex [file:/tmp/tpch-generated-1.0/lineitem]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate), IsNotNull(l_shipdate), In(l_shipmode, [MAIL,SHIP]), GreaterThanOrEqual(l_receiptdate,1994-01-01), LessThan(l_receiptdate,1995-01-01), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date,l_shipmode:string,l_shipdate:date>

(8) FilterExecTransformer
Input [5]: [l_orderkey#5484L, l_commitdate#5494, l_receiptdate#5495, l_shipmode#5497, l_shipdate#5499]
Arguments: ((((((((isnotnull(l_commitdate#5494) AND isnotnull(l_receiptdate#5495)) AND isnotnull(l_shipdate#5499)) AND l_shipmode#5497 IN (MAIL,SHIP)) AND (l_commitdate#5494 < l_receiptdate#5495)) AND (l_shipdate#5499 < l_commitdate#5494)) AND (l_receiptdate#5495 >= 1994-01-01)) AND (l_receiptdate#5495 < 1995-01-01)) AND isnotnull(l_orderkey#5484L))

(9) ProjectExecTransformer
Input [5]: [l_orderkey#5484L, l_commitdate#5494, l_receiptdate#5495, l_shipmode#5497, l_shipdate#5499]
Arguments: [hash(l_orderkey#5484L, 42) AS hash_partition_key#5549, hash(l_orderkey#5484L, 42) AS hash_partition_key#5546, l_orderkey#5484L, l_shipmode#5497]

(10) WholeStageCodegenTransformer (97)
Input [4]: [hash_partition_key#5549, hash_partition_key#5546, l_orderkey#5484L, l_shipmode#5497]
Arguments: false
Native Plan:
-- Project
  -- TableScan

(11) ColumnarExchange
Input [4]: [hash_partition_key#5549, hash_partition_key#5546, l_orderkey#5484L, l_shipmode#5497]
Arguments: hashpartitioning(l_orderkey#5484L, 100), ENSURE_REQUIREMENTS, [hash_partition_key#5546, l_orderkey#5484L, l_shipmode#5497], [plan_id=9128], [id=#9128]

(12) InputIteratorTransformer
Input [3]: [hash_partition_key#5546, l_orderkey#5484L, l_shipmode#5497]

(13) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#5430L]
Right keys [1]: [l_orderkey#5484L]
Join type: Inner
Join condition: None

(14) ProjectExecTransformer
Input [6]: [hash_partition_key#5545, o_orderkey#5430L, o_orderpriority#5434, hash_partition_key#5546, l_orderkey#5484L, l_shipmode#5497]
Arguments: [o_orderpriority#5434, l_shipmode#5497]

(15) FlushableHashAggregateExecTransformer
Input [2]: [o_orderpriority#5434, l_shipmode#5497]
Keys [1]: [l_shipmode#5497]
Functions [2]: [partial_sum(CASE WHEN ((o_orderpriority#5434 = 1-URGENT) OR (o_orderpriority#5434 = 2-HIGH)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (NOT (o_orderpriority#5434 = 1-URGENT) AND NOT (o_orderpriority#5434 = 2-HIGH)) THEN 1 ELSE 0 END)]
Aggregate Attributes [2]: [sum#5541L, sum#5542L]
Results [3]: [l_shipmode#5497, sum#5543L, sum#5544L]

(16) ProjectExecTransformer
Input [3]: [l_shipmode#5497, sum#5543L, sum#5544L]
Arguments: [hash(l_shipmode#5497, 42) AS hash_partition_key#5547, l_shipmode#5497, sum#5543L, sum#5544L]

(17) WholeStageCodegenTransformer (98)
Input [4]: [hash_partition_key#5547, l_shipmode#5497, sum#5543L, sum#5544L]
Arguments: false
Native Plan:
-- Project
  -- Aggregation
    -- Project
      -- Project
        -- Project
          -- HashJoin
            -- ValueStream
            -- ValueStream

(18) ColumnarExchange
Input [4]: [hash_partition_key#5547, l_shipmode#5497, sum#5543L, sum#5544L]
Arguments: hashpartitioning(l_shipmode#5497, 100), ENSURE_REQUIREMENTS, [l_shipmode#5497, sum#5543L, sum#5544L], [plan_id=9136], [id=#9136]

(19) InputIteratorTransformer
Input [3]: [l_shipmode#5497, sum#5543L, sum#5544L]

(20) RegularHashAggregateExecTransformer
Input [3]: [l_shipmode#5497, sum#5543L, sum#5544L]
Keys [1]: [l_shipmode#5497]
Functions [2]: [sum(CASE WHEN ((o_orderpriority#5434 = 1-URGENT) OR (o_orderpriority#5434 = 2-HIGH)) THEN 1 ELSE 0 END), sum(CASE WHEN (NOT (o_orderpriority#5434 = 1-URGENT) AND NOT (o_orderpriority#5434 = 2-HIGH)) THEN 1 ELSE 0 END)]
Aggregate Attributes [2]: [sum(CASE WHEN ((o_orderpriority#5434 = 1-URGENT) OR (o_orderpriority#5434 = 2-HIGH)) THEN 1 ELSE 0 END)#5534L, sum(CASE WHEN (NOT (o_orderpriority#5434 = 1-URGENT) AND NOT (o_orderpriority#5434 = 2-HIGH)) THEN 1 ELSE 0 END)#5535L]
Results [3]: [l_shipmode#5497, sum(CASE WHEN ((o_orderpriority#5434 = 1-URGENT) OR (o_orderpriority#5434 = 2-HIGH)) THEN 1 ELSE 0 END)#5534L AS high_line_count#5532L, sum(CASE WHEN (NOT (o_orderpriority#5434 = 1-URGENT) AND NOT (o_orderpriority#5434 = 2-HIGH)) THEN 1 ELSE 0 END)#5535L AS low_line_count#5533L]

(21) WholeStageCodegenTransformer (99)
Input [3]: [l_shipmode#5497, high_line_count#5532L, low_line_count#5533L]
Arguments: false
Native Plan:
-- Project
  -- Aggregation
    -- ValueStream

(22) ColumnarExchange
Input [3]: [l_shipmode#5497, high_line_count#5532L, low_line_count#5533L]
Arguments: rangepartitioning(l_shipmode#5497 ASC NULLS FIRST, 100), ENSURE_REQUIREMENTS, [plan_id=9141], [id=#9141]

(23) InputIteratorTransformer
Input [3]: [l_shipmode#5497, high_line_count#5532L, low_line_count#5533L]

(24) SortExecTransformer
Input [3]: [l_shipmode#5497, high_line_count#5532L, low_line_count#5533L]
Arguments: [l_shipmode#5497 ASC NULLS FIRST], true, 0

(25) WholeStageCodegenTransformer (100)
Input [3]: [l_shipmode#5497, high_line_count#5532L, low_line_count#5533L]
Arguments: false
Native Plan:
-- OrderBy
  -- ValueStream

(26) VeloxColumnarToRowExec
Input [3]: [l_shipmode#5497, high_line_count#5532L, low_line_count#5533L]

