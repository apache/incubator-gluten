== Physical Plan ==
AdaptiveSparkPlan (49)
+- == Final Plan ==
   VeloxColumnarToRowExec (34)
   +- ^ SortExecTransformer (32)
      +- ^ InputIteratorTransformer (31)
         +- ^ InputAdapter (30)
            +- ^ ShuffleQueryStage (29)
               +- ColumnarExchange (28)
                  +- ^ ProjectExecTransformer (26)
                     +- ^ RegularHashAggregateExecTransformer (25)
                        +- ^ InputIteratorTransformer (24)
                           +- ^ InputAdapter (23)
                              +- ^ ShuffleQueryStage (22)
                                 +- ColumnarExchange (21)
                                    +- ^ ProjectExecTransformer (19)
                                       +- ^ FlushableHashAggregateExecTransformer (18)
                                          +- ^ ProjectExecTransformer (17)
                                             +- ^ InputIteratorTransformer (16)
                                                +- ^ InputAdapter (15)
                                                   +- ^ RowToVeloxColumnar (14)
                                                      +- * BroadcastHashJoin LeftSemi BuildRight (13)
                                                         :- VeloxColumnarToRowExec (5)
                                                         :  +- ^ ProjectExecTransformer (3)
                                                         :     +- ^ FilterExecTransformer (2)
                                                         :        +- ^ Scan parquet (1)
                                                         +- VeloxColumnarToRowExec (12)
                                                            +- BroadcastQueryStage (11)
                                                               +- ColumnarBroadcastExchange (10)
                                                                  +- ^ ProjectExecTransformer (8)
                                                                     +- ^ FilterExecTransformer (7)
                                                                        +- ^ Scan parquet (6)
+- == Initial Plan ==
   Sort (48)
   +- Exchange (47)
      +- HashAggregate (46)
         +- Exchange (45)
            +- HashAggregate (44)
               +- Project (43)
                  +- BroadcastHashJoin LeftSemi BuildRight (42)
                     :- Project (37)
                     :  +- Filter (36)
                     :     +- Scan parquet (35)
                     +- BroadcastExchange (41)
                        +- Project (40)
                           +- Filter (39)
                              +- Scan parquet (38)


(1) Scan parquet
Output [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1993-07-01), LessThan(o_orderdate,1993-10-01)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date,o_orderpriority:string>

(2) FilterExecTransformer
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Arguments: ((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1993-07-01)) AND (o_orderdate#X < 1993-10-01))

(3) ProjectExecTransformer
Output [2]: [o_orderkey#X, o_orderpriority#X]
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]

(4) WholeStageCodegenTransformer (X)
Input [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: false

(5) VeloxColumnarToRowExec
Input [2]: [o_orderkey#X, o_orderpriority#X]

(6) Scan parquet
Output [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date>

(7) FilterExecTransformer
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND (l_commitdate#X < l_receiptdate#X))

(8) ProjectExecTransformer
Output [1]: [l_orderkey#X]
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]

(9) WholeStageCodegenTransformer (X)
Input [1]: [l_orderkey#X]
Arguments: false

(10) ColumnarBroadcastExchange
Input [1]: [l_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(11) BroadcastQueryStage
Output [1]: [l_orderkey#X]
Arguments: 0

(12) VeloxColumnarToRowExec
Input [1]: [l_orderkey#X]

(13) BroadcastHashJoin [codegen id : 1]
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(14) RowToVeloxColumnar
Input [2]: [o_orderkey#X, o_orderpriority#X]

(15) InputAdapter
Input [2]: [o_orderkey#X, o_orderpriority#X]

(16) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_orderpriority#X]

(17) ProjectExecTransformer
Output [1]: [o_orderpriority#X]
Input [2]: [o_orderkey#X, o_orderpriority#X]

(18) FlushableHashAggregateExecTransformer
Input [1]: [o_orderpriority#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [o_orderpriority#X, count#X]

(19) ProjectExecTransformer
Output [3]: [hash(o_orderpriority#X, 42) AS hash_partition_key#X, o_orderpriority#X, count#X]
Input [2]: [o_orderpriority#X, count#X]

(20) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: false

(21) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: hashpartitioning(o_orderpriority#X, 1), ENSURE_REQUIREMENTS, [o_orderpriority#X, count#X], [plan_id=X], [id=#X]

(22) ShuffleQueryStage
Output [2]: [o_orderpriority#X, count#X]
Arguments: 1

(23) InputAdapter
Input [2]: [o_orderpriority#X, count#X]

(24) InputIteratorTransformer
Input [2]: [o_orderpriority#X, count#X]

(25) RegularHashAggregateExecTransformer
Input [2]: [o_orderpriority#X, count#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [o_orderpriority#X, count(1)#X]

(26) ProjectExecTransformer
Output [2]: [o_orderpriority#X, count(1)#X AS order_count#X]
Input [2]: [o_orderpriority#X, count(1)#X]

(27) WholeStageCodegenTransformer (X)
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: false

(28) ColumnarExchange
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: rangepartitioning(o_orderpriority#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(29) ShuffleQueryStage
Output [2]: [o_orderpriority#X, order_count#X]
Arguments: 2

(30) InputAdapter
Input [2]: [o_orderpriority#X, order_count#X]

(31) InputIteratorTransformer
Input [2]: [o_orderpriority#X, order_count#X]

(32) SortExecTransformer
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: [o_orderpriority#X ASC NULLS FIRST], true, 0

(33) WholeStageCodegenTransformer (X)
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: false

(34) VeloxColumnarToRowExec
Input [2]: [o_orderpriority#X, order_count#X]

(35) Scan parquet
Output [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1993-07-01), LessThan(o_orderdate,1993-10-01)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date,o_orderpriority:string>

(36) Filter
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Condition : ((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1993-07-01)) AND (o_orderdate#X < 1993-10-01))

(37) Project
Output [2]: [o_orderkey#X, o_orderpriority#X]
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]

(38) Scan parquet
Output [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date>

(39) Filter
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND (l_commitdate#X < l_receiptdate#X))

(40) Project
Output [1]: [l_orderkey#X]
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]

(41) BroadcastExchange
Input [1]: [l_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(42) BroadcastHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(43) Project
Output [1]: [o_orderpriority#X]
Input [2]: [o_orderkey#X, o_orderpriority#X]

(44) HashAggregate
Input [1]: [o_orderpriority#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [o_orderpriority#X, count#X]

(45) Exchange
Input [2]: [o_orderpriority#X, count#X]
Arguments: hashpartitioning(o_orderpriority#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(46) HashAggregate
Input [2]: [o_orderpriority#X, count#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [o_orderpriority#X, count(1)#X AS order_count#X]

(47) Exchange
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: rangepartitioning(o_orderpriority#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(48) Sort
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: [o_orderpriority#X ASC NULLS FIRST], true, 0

(49) AdaptiveSparkPlan
Output [2]: [o_orderpriority#X, order_count#X]
Arguments: isFinalPlan=true