== Physical Plan ==
AdaptiveSparkPlan (121)
+- == Final Plan ==
   VeloxColumnarToRowExec (84)
   +- ^ SortExecTransformer (82)
      +- ^ InputIteratorTransformer (81)
         +- ^ InputAdapter (80)
            +- ^ ShuffleQueryStage (79)
               +- ColumnarExchange (78)
                  +- ^ ProjectExecTransformer (76)
                     +- ^ InputIteratorTransformer (75)
                        +- ^ InputAdapter (74)
                           +- ^ RowToVeloxColumnar (73)
                              +- * BroadcastHashJoin Inner BuildRight (72)
                                 :- VeloxColumnarToRowExec (64)
                                 :  +- ^ ProjectExecTransformer (62)
                                 :     +- ^ InputIteratorTransformer (61)
                                 :        +- ^ InputAdapter (60)
                                 :           +- ^ RowToVeloxColumnar (59)
                                 :              +- * BroadcastHashJoin LeftSemi BuildRight (58)
                                 :                 :- VeloxColumnarToRowExec (8)
                                 :                 :  +- AQEShuffleRead (7)
                                 :                 :     +- ShuffleQueryStage (6)
                                 :                 :        +- ColumnarExchange (5)
                                 :                 :           +- ^ ProjectExecTransformer (3)
                                 :                 :              +- ^ FilterExecTransformer (2)
                                 :                 :                 +- ^ Scan parquet (1)
                                 :                 +- VeloxColumnarToRowExec (57)
                                 :                    +- BroadcastQueryStage (56)
                                 :                       +- ColumnarBroadcastExchange (55)
                                 :                          +- ^ ProjectExecTransformer (53)
                                 :                             +- ^ InputIteratorTransformer (52)
                                 :                                +- ^ InputAdapter (51)
                                 :                                   +- ^ RowToVeloxColumnar (50)
                                 :                                      +- * BroadcastHashJoin Inner BuildLeft (49)
                                 :                                         :- VeloxColumnarToRowExec (24)
                                 :                                         :  +- BroadcastQueryStage (23)
                                 :                                         :     +- ColumnarBroadcastExchange (22)
                                 :                                         :        +- RowToVeloxColumnar (21)
                                 :                                         :           +- * BroadcastHashJoin LeftSemi BuildRight (20)
                                 :                                         :              :- VeloxColumnarToRowExec (12)
                                 :                                         :              :  +- ^ FilterExecTransformer (10)
                                 :                                         :              :     +- ^ Scan parquet (9)
                                 :                                         :              +- VeloxColumnarToRowExec (19)
                                 :                                         :                 +- BroadcastQueryStage (18)
                                 :                                         :                    +- ColumnarBroadcastExchange (17)
                                 :                                         :                       +- ^ ProjectExecTransformer (15)
                                 :                                         :                          +- ^ FilterExecTransformer (14)
                                 :                                         :                             +- ^ Scan parquet (13)
                                 :                                         +- VeloxColumnarToRowExec (48)
                                 :                                            +- ^ FilterExecTransformer (46)
                                 :                                               +- ^ ProjectExecTransformer (45)
                                 :                                                  +- ^ RegularHashAggregateExecTransformer (44)
                                 :                                                     +- ^ InputIteratorTransformer (43)
                                 :                                                        +- ^ InputAdapter (42)
                                 :                                                           +- ^ ShuffleQueryStage (41)
                                 :                                                              +- ColumnarExchange (40)
                                 :                                                                 +- ^ ProjectExecTransformer (38)
                                 :                                                                    +- ^ FlushableHashAggregateExecTransformer (37)
                                 :                                                                       +- ^ InputIteratorTransformer (36)
                                 :                                                                          +- ^ InputAdapter (35)
                                 :                                                                             +- ^ RowToVeloxColumnar (34)
                                 :                                                                                +- * BroadcastHashJoin LeftSemi BuildRight (33)
                                 :                                                                                   :- VeloxColumnarToRowExec (29)
                                 :                                                                                   :  +- ^ ProjectExecTransformer (27)
                                 :                                                                                   :     +- ^ FilterExecTransformer (26)
                                 :                                                                                   :        +- ^ Scan parquet (25)
                                 :                                                                                   +- VeloxColumnarToRowExec (32)
                                 :                                                                                      +- BroadcastQueryStage (31)
                                 :                                                                                         +- ReusedExchange (30)
                                 +- VeloxColumnarToRowExec (71)
                                    +- BroadcastQueryStage (70)
                                       +- ColumnarBroadcastExchange (69)
                                          +- ^ ProjectExecTransformer (67)
                                             +- ^ FilterExecTransformer (66)
                                                +- ^ Scan parquet (65)
+- == Initial Plan ==
   Sort (120)
   +- Exchange (119)
      +- Project (118)
         +- BroadcastHashJoin Inner BuildRight (117)
            :- Project (112)
            :  +- ShuffledHashJoin LeftSemi BuildRight (111)
            :     :- Exchange (87)
            :     :  +- Filter (86)
            :     :     +- Scan parquet (85)
            :     +- Exchange (110)
            :        +- Project (109)
            :           +- BroadcastHashJoin Inner BuildLeft (108)
            :              :- BroadcastExchange (95)
            :              :  +- BroadcastHashJoin LeftSemi BuildRight (94)
            :              :     :- Filter (89)
            :              :     :  +- Scan parquet (88)
            :              :     +- BroadcastExchange (93)
            :              :        +- Project (92)
            :              :           +- Filter (91)
            :              :              +- Scan parquet (90)
            :              +- Filter (107)
            :                 +- HashAggregate (106)
            :                    +- Exchange (105)
            :                       +- HashAggregate (104)
            :                          +- BroadcastHashJoin LeftSemi BuildRight (103)
            :                             :- Project (98)
            :                             :  +- Filter (97)
            :                             :     +- Scan parquet (96)
            :                             +- BroadcastExchange (102)
            :                                +- Project (101)
            :                                   +- Filter (100)
            :                                      +- Scan parquet (99)
            +- BroadcastExchange (116)
               +- Project (115)
                  +- Filter (114)
                     +- Scan parquet (113)


(1) Scan parquet
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: isnotnull(s_nationkey#X)

(3) ProjectExecTransformer
Output [5]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(4) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: false

(5) ColumnarExchange
Input [5]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: 0

(7) AQEShuffleRead
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: local

(8) VeloxColumnarToRowExec
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(9) Scan parquet
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>

(10) FilterExecTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: ((isnotnull(ps_availqty#X) AND isnotnull(ps_partkey#X)) AND isnotnull(ps_suppkey#X))

(11) WholeStageCodegenTransformer (X)
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: false

(12) VeloxColumnarToRowExec
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]

(13) Scan parquet
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,forest)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(14) FilterExecTransformer
Input [2]: [p_partkey#X, p_name#X]
Arguments: (isnotnull(p_name#X) AND StartsWith(p_name#X, forest))

(15) ProjectExecTransformer
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(16) WholeStageCodegenTransformer (X)
Input [1]: [p_partkey#X]
Arguments: false

(17) ColumnarBroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(18) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 1

(19) VeloxColumnarToRowExec
Input [1]: [p_partkey#X]

(20) BroadcastHashJoin [codegen id : 1]
Left keys [1]: [ps_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(21) RowToVeloxColumnar
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]

(22) ColumnarBroadcastExchange
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [plan_id=X]

(23) BroadcastQueryStage
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: 5

(24) VeloxColumnarToRowExec
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]

(25) Scan parquet
Output [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1994-01-01), LessThan(l_shipdate,1995-01-01), IsNotNull(l_partkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_shipdate:date>

(26) FilterExecTransformer
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Arguments: ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1994-01-01)) AND (l_shipdate#X < 1995-01-01)) AND isnotnull(l_partkey#X)) AND isnotnull(l_suppkey#X))

(27) ProjectExecTransformer
Output [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]

(28) WholeStageCodegenTransformer (X)
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Arguments: false

(29) VeloxColumnarToRowExec
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]

(30) ReusedExchange [Reuses operator id: 17]
Output [1]: [p_partkey#X]

(31) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 3

(32) VeloxColumnarToRowExec
Input [1]: [p_partkey#X]

(33) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(34) RowToVeloxColumnar
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]

(35) InputAdapter
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]

(36) InputIteratorTransformer
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]

(37) FlushableHashAggregateExecTransformer
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(38) ProjectExecTransformer
Output [5]: [hash(l_partkey#X, l_suppkey#X, 42) AS hash_partition_key#X, l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(39) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: false

(40) ColumnarExchange
Input [5]: [hash_partition_key#X, l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_partkey#X, l_suppkey#X, 1), ENSURE_REQUIREMENTS, [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(41) ShuffleQueryStage
Output [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: 6

(42) InputAdapter
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(43) InputIteratorTransformer
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(44) RegularHashAggregateExecTransformer
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [3]: [l_partkey#X, l_suppkey#X, sum(l_quantity#X)#X]

(45) ProjectExecTransformer
Output [3]: [CheckOverflow((0.50 * promote_precision(sum(l_quantity#X)#X)), DecimalType(24,3), true) AS (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]
Input [3]: [l_partkey#X, l_suppkey#X, sum(l_quantity#X)#X]

(46) FilterExecTransformer
Input [3]: [(0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]
Arguments: isnotnull((0.5 * sum(l_quantity))#X)

(47) WholeStageCodegenTransformer (X)
Input [3]: [(0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]
Arguments: false

(48) VeloxColumnarToRowExec
Input [3]: [(0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(49) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [ps_partkey#X, ps_suppkey#X]
Right keys [2]: [l_partkey#X, l_suppkey#X]
Join condition: (cast(cast(ps_availqty#X as decimal(10,0)) as decimal(24,3)) > (0.5 * sum(l_quantity))#X)

(50) RowToVeloxColumnar
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(51) InputAdapter
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(52) InputIteratorTransformer
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(53) ProjectExecTransformer
Output [1]: [ps_suppkey#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(54) WholeStageCodegenTransformer (X)
Input [1]: [ps_suppkey#X]
Arguments: false

(55) ColumnarBroadcastExchange
Input [1]: [ps_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(56) BroadcastQueryStage
Output [1]: [ps_suppkey#X]
Arguments: 7

(57) VeloxColumnarToRowExec
Input [1]: [ps_suppkey#X]

(58) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [s_suppkey#X]
Right keys [1]: [ps_suppkey#X]
Join condition: None

(59) RowToVeloxColumnar
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(60) InputAdapter
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(61) InputIteratorTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(62) ProjectExecTransformer
Output [3]: [s_name#X, s_address#X, s_nationkey#X]
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(63) WholeStageCodegenTransformer (X)
Input [3]: [s_name#X, s_address#X, s_nationkey#X]
Arguments: false

(64) VeloxColumnarToRowExec
Input [3]: [s_name#X, s_address#X, s_nationkey#X]

(65) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,CANADA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(66) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = CANADA)) AND isnotnull(n_nationkey#X))

(67) ProjectExecTransformer
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(68) WholeStageCodegenTransformer (X)
Input [1]: [n_nationkey#X]
Arguments: false

(69) ColumnarBroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(70) BroadcastQueryStage
Output [1]: [n_nationkey#X]
Arguments: 4

(71) VeloxColumnarToRowExec
Input [1]: [n_nationkey#X]

(72) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(73) RowToVeloxColumnar
Input [4]: [s_name#X, s_address#X, s_nationkey#X, n_nationkey#X]

(74) InputAdapter
Input [4]: [s_name#X, s_address#X, s_nationkey#X, n_nationkey#X]

(75) InputIteratorTransformer
Input [4]: [s_name#X, s_address#X, s_nationkey#X, n_nationkey#X]

(76) ProjectExecTransformer
Output [2]: [s_name#X, s_address#X]
Input [4]: [s_name#X, s_address#X, s_nationkey#X, n_nationkey#X]

(77) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, s_address#X]
Arguments: false

(78) ColumnarExchange
Input [2]: [s_name#X, s_address#X]
Arguments: rangepartitioning(s_name#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(79) ShuffleQueryStage
Output [2]: [s_name#X, s_address#X]
Arguments: 8

(80) InputAdapter
Input [2]: [s_name#X, s_address#X]

(81) InputIteratorTransformer
Input [2]: [s_name#X, s_address#X]

(82) SortExecTransformer
Input [2]: [s_name#X, s_address#X]
Arguments: [s_name#X ASC NULLS FIRST], true, 0

(83) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, s_address#X]
Arguments: false

(84) VeloxColumnarToRowExec
Input [2]: [s_name#X, s_address#X]

(85) Scan parquet
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint>

(86) Filter
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Condition : isnotnull(s_nationkey#X)

(87) Exchange
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(88) Scan parquet
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>

(89) Filter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Condition : ((isnotnull(ps_availqty#X) AND isnotnull(ps_partkey#X)) AND isnotnull(ps_suppkey#X))

(90) Scan parquet
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,forest)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(91) Filter
Input [2]: [p_partkey#X, p_name#X]
Condition : (isnotnull(p_name#X) AND StartsWith(p_name#X, forest))

(92) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(93) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(94) BroadcastHashJoin
Left keys [1]: [ps_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(95) BroadcastExchange
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [plan_id=X]

(96) Scan parquet
Output [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1994-01-01), LessThan(l_shipdate,1995-01-01), IsNotNull(l_partkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_shipdate:date>

(97) Filter
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Condition : ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1994-01-01)) AND (l_shipdate#X < 1995-01-01)) AND isnotnull(l_partkey#X)) AND isnotnull(l_suppkey#X))

(98) Project
Output [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]

(99) Scan parquet
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,forest)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(100) Filter
Input [2]: [p_partkey#X, p_name#X]
Condition : (isnotnull(p_name#X) AND StartsWith(p_name#X, forest))

(101) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(102) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(103) BroadcastHashJoin
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(104) HashAggregate
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(105) Exchange
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_partkey#X, l_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(106) HashAggregate
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [3]: [CheckOverflow((0.50 * promote_precision(sum(l_quantity#X)#X)), DecimalType(24,3), true) AS (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(107) Filter
Input [3]: [(0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]
Condition : isnotnull((0.5 * sum(l_quantity))#X)

(108) BroadcastHashJoin
Left keys [2]: [ps_partkey#X, ps_suppkey#X]
Right keys [2]: [l_partkey#X, l_suppkey#X]
Join condition: (cast(cast(ps_availqty#X as decimal(10,0)) as decimal(24,3)) > (0.5 * sum(l_quantity))#X)

(109) Project
Output [1]: [ps_suppkey#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(110) Exchange
Input [1]: [ps_suppkey#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(111) ShuffledHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [ps_suppkey#X]
Join condition: None

(112) Project
Output [3]: [s_name#X, s_address#X, s_nationkey#X]
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(113) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,CANADA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(114) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = CANADA)) AND isnotnull(n_nationkey#X))

(115) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(116) BroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(117) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(118) Project
Output [2]: [s_name#X, s_address#X]
Input [4]: [s_name#X, s_address#X, s_nationkey#X, n_nationkey#X]

(119) Exchange
Input [2]: [s_name#X, s_address#X]
Arguments: rangepartitioning(s_name#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(120) Sort
Input [2]: [s_name#X, s_address#X]
Arguments: [s_name#X ASC NULLS FIRST], true, 0

(121) AdaptiveSparkPlan
Output [2]: [s_name#X, s_address#X]
Arguments: isFinalPlan=true