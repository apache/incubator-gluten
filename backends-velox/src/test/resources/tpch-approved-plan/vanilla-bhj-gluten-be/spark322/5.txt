== Physical Plan ==
AdaptiveSparkPlan (120)
+- == Final Plan ==
   VeloxColumnarToRowExec (85)
   +- ^ SortExecTransformer (83)
      +- ^ InputIteratorTransformer (82)
         +- ^ InputAdapter (81)
            +- ^ ShuffleQueryStage (80)
               +- ColumnarExchange (79)
                  +- ^ RegularHashAggregateExecTransformer (77)
                     +- ^ InputIteratorTransformer (76)
                        +- ^ InputAdapter (75)
                           +- ^ ShuffleQueryStage (74)
                              +- ColumnarExchange (73)
                                 +- ^ ProjectExecTransformer (71)
                                    +- ^ FlushableHashAggregateExecTransformer (70)
                                       +- ^ ProjectExecTransformer (69)
                                          +- ^ InputIteratorTransformer (68)
                                             +- ^ InputAdapter (67)
                                                +- ^ RowToVeloxColumnar (66)
                                                   +- * BroadcastHashJoin Inner BuildRight (65)
                                                      :- VeloxColumnarToRowExec (57)
                                                      :  +- ^ ProjectExecTransformer (55)
                                                      :     +- ^ InputIteratorTransformer (54)
                                                      :        +- ^ InputAdapter (53)
                                                      :           +- ^ RowToVeloxColumnar (52)
                                                      :              +- * BroadcastHashJoin Inner BuildRight (51)
                                                      :                 :- VeloxColumnarToRowExec (44)
                                                      :                 :  +- ^ ProjectExecTransformer (42)
                                                      :                 :     +- ^ InputIteratorTransformer (41)
                                                      :                 :        +- ^ InputAdapter (40)
                                                      :                 :           +- ^ RowToVeloxColumnar (39)
                                                      :                 :              +- * BroadcastHashJoin Inner BuildRight (38)
                                                      :                 :                 :- VeloxColumnarToRowExec (31)
                                                      :                 :                 :  +- ^ ProjectExecTransformer (29)
                                                      :                 :                 :     +- ^ InputIteratorTransformer (28)
                                                      :                 :                 :        +- ^ InputAdapter (27)
                                                      :                 :                 :           +- ^ RowToVeloxColumnar (26)
                                                      :                 :                 :              +- * BroadcastHashJoin Inner BuildRight (25)
                                                      :                 :                 :                 :- VeloxColumnarToRowExec (18)
                                                      :                 :                 :                 :  +- ^ ProjectExecTransformer (16)
                                                      :                 :                 :                 :     +- ^ InputIteratorTransformer (15)
                                                      :                 :                 :                 :        +- ^ InputAdapter (14)
                                                      :                 :                 :                 :           +- ^ RowToVeloxColumnar (13)
                                                      :                 :                 :                 :              +- * BroadcastHashJoin Inner BuildLeft (12)
                                                      :                 :                 :                 :                 :- VeloxColumnarToRowExec (6)
                                                      :                 :                 :                 :                 :  +- BroadcastQueryStage (5)
                                                      :                 :                 :                 :                 :     +- ColumnarBroadcastExchange (4)
                                                      :                 :                 :                 :                 :        +- ^ FilterExecTransformer (2)
                                                      :                 :                 :                 :                 :           +- ^ Scan parquet (1)
                                                      :                 :                 :                 :                 +- VeloxColumnarToRowExec (11)
                                                      :                 :                 :                 :                    +- ^ ProjectExecTransformer (9)
                                                      :                 :                 :                 :                       +- ^ FilterExecTransformer (8)
                                                      :                 :                 :                 :                          +- ^ Scan parquet (7)
                                                      :                 :                 :                 +- VeloxColumnarToRowExec (24)
                                                      :                 :                 :                    +- BroadcastQueryStage (23)
                                                      :                 :                 :                       +- ColumnarBroadcastExchange (22)
                                                      :                 :                 :                          +- ^ FilterExecTransformer (20)
                                                      :                 :                 :                             +- ^ Scan parquet (19)
                                                      :                 :                 +- VeloxColumnarToRowExec (37)
                                                      :                 :                    +- BroadcastQueryStage (36)
                                                      :                 :                       +- ColumnarBroadcastExchange (35)
                                                      :                 :                          +- ^ FilterExecTransformer (33)
                                                      :                 :                             +- ^ Scan parquet (32)
                                                      :                 +- VeloxColumnarToRowExec (50)
                                                      :                    +- BroadcastQueryStage (49)
                                                      :                       +- ColumnarBroadcastExchange (48)
                                                      :                          +- ^ FilterExecTransformer (46)
                                                      :                             +- ^ Scan parquet (45)
                                                      +- VeloxColumnarToRowExec (64)
                                                         +- BroadcastQueryStage (63)
                                                            +- ColumnarBroadcastExchange (62)
                                                               +- ^ ProjectExecTransformer (60)
                                                                  +- ^ FilterExecTransformer (59)
                                                                     +- ^ Scan parquet (58)
+- == Initial Plan ==
   Sort (119)
   +- Exchange (118)
      +- HashAggregate (117)
         +- Exchange (116)
            +- HashAggregate (115)
               +- Project (114)
                  +- BroadcastHashJoin Inner BuildRight (113)
                     :- Project (108)
                     :  +- BroadcastHashJoin Inner BuildRight (107)
                     :     :- Project (103)
                     :     :  +- BroadcastHashJoin Inner BuildRight (102)
                     :     :     :- Project (98)
                     :     :     :  +- BroadcastHashJoin Inner BuildRight (97)
                     :     :     :     :- Project (93)
                     :     :     :     :  +- BroadcastHashJoin Inner BuildLeft (92)
                     :     :     :     :     :- BroadcastExchange (88)
                     :     :     :     :     :  +- Filter (87)
                     :     :     :     :     :     +- Scan parquet (86)
                     :     :     :     :     +- Project (91)
                     :     :     :     :        +- Filter (90)
                     :     :     :     :           +- Scan parquet (89)
                     :     :     :     +- BroadcastExchange (96)
                     :     :     :        +- Filter (95)
                     :     :     :           +- Scan parquet (94)
                     :     :     +- BroadcastExchange (101)
                     :     :        +- Filter (100)
                     :     :           +- Scan parquet (99)
                     :     +- BroadcastExchange (106)
                     :        +- Filter (105)
                     :           +- Scan parquet (104)
                     +- BroadcastExchange (112)
                        +- Project (111)
                           +- Filter (110)
                              +- Scan parquet (109)


(1) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(2) FilterExecTransformer
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(3) WholeStageCodegenTransformer (X)
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: false

(4) ColumnarBroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(5) BroadcastQueryStage
Output [2]: [c_custkey#X, c_nationkey#X]
Arguments: 0

(6) VeloxColumnarToRowExec
Input [2]: [c_custkey#X, c_nationkey#X]

(7) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1994-01-01), LessThan(o_orderdate,1995-01-01), IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(8) FilterExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1994-01-01)) AND (o_orderdate#X < 1995-01-01)) AND isnotnull(o_custkey#X)) AND isnotnull(o_orderkey#X))

(9) ProjectExecTransformer
Output [2]: [o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(10) WholeStageCodegenTransformer (X)
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: false

(11) VeloxColumnarToRowExec
Input [2]: [o_orderkey#X, o_custkey#X]

(12) BroadcastHashJoin [codegen id : 1]
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(13) RowToVeloxColumnar
Input [4]: [c_custkey#X, c_nationkey#X, o_orderkey#X, o_custkey#X]

(14) InputAdapter
Input [4]: [c_custkey#X, c_nationkey#X, o_orderkey#X, o_custkey#X]

(15) InputIteratorTransformer
Input [4]: [c_custkey#X, c_nationkey#X, o_orderkey#X, o_custkey#X]

(16) ProjectExecTransformer
Output [2]: [c_nationkey#X, o_orderkey#X]
Input [4]: [c_custkey#X, c_nationkey#X, o_orderkey#X, o_custkey#X]

(17) WholeStageCodegenTransformer (X)
Input [2]: [c_nationkey#X, o_orderkey#X]
Arguments: false

(18) VeloxColumnarToRowExec
Input [2]: [c_nationkey#X, o_orderkey#X]

(19) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(20) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: (isnotnull(l_orderkey#X) AND isnotnull(l_suppkey#X))

(21) WholeStageCodegenTransformer (X)
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: false

(22) ColumnarBroadcastExchange
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(23) BroadcastQueryStage
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: 1

(24) VeloxColumnarToRowExec
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(25) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(26) RowToVeloxColumnar
Input [6]: [c_nationkey#X, o_orderkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(27) InputAdapter
Input [6]: [c_nationkey#X, o_orderkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(28) InputIteratorTransformer
Input [6]: [c_nationkey#X, o_orderkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(29) ProjectExecTransformer
Output [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [c_nationkey#X, o_orderkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(30) WholeStageCodegenTransformer (X)
Input [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: false

(31) VeloxColumnarToRowExec
Input [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(32) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(33) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(34) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false

(35) ColumnarBroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [plan_id=X]

(36) BroadcastQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: 2

(37) VeloxColumnarToRowExec
Input [2]: [s_suppkey#X, s_nationkey#X]

(38) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [l_suppkey#X, c_nationkey#X]
Right keys [2]: [s_suppkey#X, s_nationkey#X]
Join condition: None

(39) RowToVeloxColumnar
Input [6]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(40) InputAdapter
Input [6]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(41) InputIteratorTransformer
Input [6]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(42) ProjectExecTransformer
Output [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(43) WholeStageCodegenTransformer (X)
Input [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: false

(44) VeloxColumnarToRowExec
Input [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]

(45) Scan parquet
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(46) FilterExecTransformer
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(47) WholeStageCodegenTransformer (X)
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: false

(48) ColumnarBroadcastExchange
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(49) BroadcastQueryStage
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: 3

(50) VeloxColumnarToRowExec
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]

(51) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(52) RowToVeloxColumnar
Input [6]: [l_extendedprice#X, l_discount#X, s_nationkey#X, n_nationkey#X, n_name#X, n_regionkey#X]

(53) InputAdapter
Input [6]: [l_extendedprice#X, l_discount#X, s_nationkey#X, n_nationkey#X, n_name#X, n_regionkey#X]

(54) InputIteratorTransformer
Input [6]: [l_extendedprice#X, l_discount#X, s_nationkey#X, n_nationkey#X, n_name#X, n_regionkey#X]

(55) ProjectExecTransformer
Output [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Input [6]: [l_extendedprice#X, l_discount#X, s_nationkey#X, n_nationkey#X, n_name#X, n_regionkey#X]

(56) WholeStageCodegenTransformer (X)
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Arguments: false

(57) VeloxColumnarToRowExec
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]

(58) Scan parquet
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(59) FilterExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: ((isnotnull(r_name#X) AND (r_name#X = ASIA)) AND isnotnull(r_regionkey#X))

(60) ProjectExecTransformer
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(61) WholeStageCodegenTransformer (X)
Input [1]: [r_regionkey#X]
Arguments: false

(62) ColumnarBroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(63) BroadcastQueryStage
Output [1]: [r_regionkey#X]
Arguments: 4

(64) VeloxColumnarToRowExec
Input [1]: [r_regionkey#X]

(65) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(66) RowToVeloxColumnar
Input [5]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X, r_regionkey#X]

(67) InputAdapter
Input [5]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X, r_regionkey#X]

(68) InputIteratorTransformer
Input [5]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X, r_regionkey#X]

(69) ProjectExecTransformer
Output [4]: [l_extendedprice#X, l_discount#X, n_name#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) AS _pre_143#X]
Input [5]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X, r_regionkey#X]

(70) FlushableHashAggregateExecTransformer
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, _pre_143#X]
Keys [1]: [n_name#X]
Functions [1]: [partial_sum(_pre_143#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [n_name#X, sum#X, isEmpty#X]

(71) ProjectExecTransformer
Output [4]: [hash(n_name#X, 42) AS hash_partition_key#X, n_name#X, sum#X, isEmpty#X]
Input [3]: [n_name#X, sum#X, isEmpty#X]

(72) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, n_name#X, sum#X, isEmpty#X]
Arguments: false

(73) ColumnarExchange
Input [4]: [hash_partition_key#X, n_name#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(n_name#X, 1), ENSURE_REQUIREMENTS, [n_name#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(74) ShuffleQueryStage
Output [3]: [n_name#X, sum#X, isEmpty#X]
Arguments: 5

(75) InputAdapter
Input [3]: [n_name#X, sum#X, isEmpty#X]

(76) InputIteratorTransformer
Input [3]: [n_name#X, sum#X, isEmpty#X]

(77) RegularHashAggregateExecTransformer
Input [3]: [n_name#X, sum#X, isEmpty#X]
Keys [1]: [n_name#X]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))#X]
Results [2]: [n_name#X, sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))#X AS revenue#X]

(78) WholeStageCodegenTransformer (X)
Input [2]: [n_name#X, revenue#X]
Arguments: false

(79) ColumnarExchange
Input [2]: [n_name#X, revenue#X]
Arguments: rangepartitioning(revenue#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(80) ShuffleQueryStage
Output [2]: [n_name#X, revenue#X]
Arguments: 6

(81) InputAdapter
Input [2]: [n_name#X, revenue#X]

(82) InputIteratorTransformer
Input [2]: [n_name#X, revenue#X]

(83) SortExecTransformer
Input [2]: [n_name#X, revenue#X]
Arguments: [revenue#X DESC NULLS LAST], true, 0

(84) WholeStageCodegenTransformer (X)
Input [2]: [n_name#X, revenue#X]
Arguments: false

(85) VeloxColumnarToRowExec
Input [2]: [n_name#X, revenue#X]

(86) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(87) Filter
Input [2]: [c_custkey#X, c_nationkey#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(88) BroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(89) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1994-01-01), LessThan(o_orderdate,1995-01-01), IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(90) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Condition : ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1994-01-01)) AND (o_orderdate#X < 1995-01-01)) AND isnotnull(o_custkey#X)) AND isnotnull(o_orderkey#X))

(91) Project
Output [2]: [o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(92) BroadcastHashJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(93) Project
Output [2]: [c_nationkey#X, o_orderkey#X]
Input [4]: [c_custkey#X, c_nationkey#X, o_orderkey#X, o_custkey#X]

(94) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(95) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Condition : (isnotnull(l_orderkey#X) AND isnotnull(l_suppkey#X))

(96) BroadcastExchange
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(97) BroadcastHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(98) Project
Output [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [c_nationkey#X, o_orderkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(99) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(100) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(101) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [plan_id=X]

(102) BroadcastHashJoin
Left keys [2]: [l_suppkey#X, c_nationkey#X]
Right keys [2]: [s_suppkey#X, s_nationkey#X]
Join condition: None

(103) Project
Output [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(104) Scan parquet
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(105) Filter
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Condition : (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(106) BroadcastExchange
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(107) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(108) Project
Output [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Input [6]: [l_extendedprice#X, l_discount#X, s_nationkey#X, n_nationkey#X, n_name#X, n_regionkey#X]

(109) Scan parquet
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(110) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = ASIA)) AND isnotnull(r_regionkey#X))

(111) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(112) BroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(113) BroadcastHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(114) Project
Output [3]: [l_extendedprice#X, l_discount#X, n_name#X]
Input [5]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X, r_regionkey#X]

(115) HashAggregate
Input [3]: [l_extendedprice#X, l_discount#X, n_name#X]
Keys [1]: [n_name#X]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [n_name#X, sum#X, isEmpty#X]

(116) Exchange
Input [3]: [n_name#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(n_name#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(117) HashAggregate
Input [3]: [n_name#X, sum#X, isEmpty#X]
Keys [1]: [n_name#X]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))#X]
Results [2]: [n_name#X, sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))#X AS revenue#X]

(118) Exchange
Input [2]: [n_name#X, revenue#X]
Arguments: rangepartitioning(revenue#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(119) Sort
Input [2]: [n_name#X, revenue#X]
Arguments: [revenue#X DESC NULLS LAST], true, 0

(120) AdaptiveSparkPlan
Output [2]: [n_name#X, revenue#X]
Arguments: isFinalPlan=true