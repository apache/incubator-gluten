== Physical Plan ==
AdaptiveSparkPlan (102)
+- == Final Plan ==
   VeloxColumnarToRowExec (65)
   +- TakeOrderedAndProjectExecTransformer (64)
      +- ^ RegularHashAggregateExecTransformer (62)
         +- ^ RegularHashAggregateExecTransformer (61)
            +- ^ ProjectExecTransformer (60)
               +- ^ ShuffledHashJoinExecTransformer Inner (59)
                  :- ^ InputIteratorTransformer (42)
                  :  +- ^ InputAdapter (41)
                  :     +- ^ ShuffleQueryStage (40)
                  :        +- ColumnarExchange (39)
                  :           +- ^ ProjectExecTransformer (37)
                  :              +- ^ ShuffledHashJoinExecTransformer Inner (36)
                  :                 :- ^ InputIteratorTransformer (8)
                  :                 :  +- ^ InputAdapter (7)
                  :                 :     +- ^ ShuffleQueryStage (6)
                  :                 :        +- ColumnarExchange (5)
                  :                 :           +- ^ ProjectExecTransformer (3)
                  :                 :              +- ^ FilterExecTransformer (2)
                  :                 :                 +- ^ Scan parquetdefault.customer (1)
                  :                 +- ^ InputIteratorTransformer (35)
                  :                    +- ^ InputAdapter (34)
                  :                       +- ^ ShuffleQueryStage (33)
                  :                          +- ColumnarExchange (32)
                  :                             +- ^ ProjectExecTransformer (30)
                  :                                +- ^ ShuffledHashJoinExecTransformer LeftSemi (29)
                  :                                   :- ^ InputIteratorTransformer (16)
                  :                                   :  +- ^ InputAdapter (15)
                  :                                   :     +- ^ ShuffleQueryStage (14)
                  :                                   :        +- ColumnarExchange (13)
                  :                                   :           +- ^ ProjectExecTransformer (11)
                  :                                   :              +- ^ FilterExecTransformer (10)
                  :                                   :                 +- ^ Scan parquetdefault.orders (9)
                  :                                   +- ^ ProjectExecTransformer (28)
                  :                                      +- ^ FilterExecTransformer (27)
                  :                                         +- ^ RegularHashAggregateExecTransformer (26)
                  :                                            +- ^ InputIteratorTransformer (25)
                  :                                               +- ^ InputAdapter (24)
                  :                                                  +- ^ ShuffleQueryStage (23)
                  :                                                     +- ColumnarExchange (22)
                  :                                                        +- ^ ProjectExecTransformer (20)
                  :                                                           +- ^ FlushableHashAggregateExecTransformer (19)
                  :                                                              +- ^ ProjectExecTransformer (18)
                  :                                                                 +- ^ Scan parquetdefault.lineitem (17)
                  +- ^ ShuffledHashJoinExecTransformer LeftSemi (58)
                     :- ^ InputIteratorTransformer (50)
                     :  +- ^ InputAdapter (49)
                     :     +- ^ ShuffleQueryStage (48)
                     :        +- ColumnarExchange (47)
                     :           +- ^ ProjectExecTransformer (45)
                     :              +- ^ FilterExecTransformer (44)
                     :                 +- ^ Scan parquetdefault.lineitem (43)
                     +- ^ ProjectExecTransformer (57)
                        +- ^ FilterExecTransformer (56)
                           +- ^ RegularHashAggregateExecTransformer (55)
                              +- ^ InputIteratorTransformer (54)
                                 +- ^ InputAdapter (53)
                                    +- ^ ShuffleQueryStage (52)
                                       +- ReusedExchange (51)
+- == Initial Plan ==
   TakeOrderedAndProject (101)
   +- HashAggregate (100)
      +- HashAggregate (99)
         +- Project (98)
            +- ShuffledHashJoin Inner BuildRight (97)
               :- Exchange (84)
               :  +- Project (83)
               :     +- ShuffledHashJoin Inner BuildLeft (82)
               :        :- Exchange (69)
               :        :  +- Project (68)
               :        :     +- Filter (67)
               :        :        +- Scan parquetdefault.customer (66)
               :        +- Exchange (81)
               :           +- ShuffledHashJoin LeftSemi BuildRight (80)
               :              :- Exchange (72)
               :              :  +- Filter (71)
               :              :     +- Scan parquetdefault.orders (70)
               :              +- Project (79)
               :                 +- Filter (78)
               :                    +- HashAggregate (77)
               :                       +- Exchange (76)
               :                          +- HashAggregate (75)
               :                             +- Project (74)
               :                                +- Scan parquetdefault.lineitem (73)
               +- ShuffledHashJoin LeftSemi BuildRight (96)
                  :- Exchange (88)
                  :  +- Project (87)
                  :     +- Filter (86)
                  :        +- Scan parquetdefault.lineitem (85)
                  +- Project (95)
                     +- Filter (94)
                        +- HashAggregate (93)
                           +- Exchange (92)
                              +- HashAggregate (91)
                                 +- Project (90)
                                    +- Scan parquetdefault.lineitem (89)


(1) Scan parquetdefault.customer
Output [3]: [c_custkey#X, c_name#X, c_mktsegment#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(c_custkey)]
ReadSchema: struct<c_custkey:bigint,c_name:string>

(2) FilterExecTransformer
Input [3]: [c_custkey#X, c_name#X, c_mktsegment#X]
Arguments: isnotnull(c_custkey#X)

(3) ProjectExecTransformer
Output [3]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_name#X]
Input [3]: [c_custkey#X, c_name#X, c_mktsegment#X]

(4) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_custkey#X, c_name#X]
Arguments: false

(5) ColumnarExchange
Input [3]: [hash_partition_key#X, c_custkey#X, c_name#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_name#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [2]: [c_custkey#X, c_name#X]
Arguments: 0

(7) InputAdapter
Input [2]: [c_custkey#X, c_name#X]

(8) InputIteratorTransformer
Input [2]: [c_custkey#X, c_name#X]

(9) Scan parquetdefault.orders
Output [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_totalprice:decimal(12,2)>

(10) FilterExecTransformer
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: (isnotnull(o_custkey#X) AND isnotnull(o_orderkey#X))

(11) ProjectExecTransformer
Output [5]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(12) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: false

(13) ColumnarExchange
Input [5]: [hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: 1

(15) InputAdapter
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(16) InputIteratorTransformer
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(17) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(18) ProjectExecTransformer
Output [2]: [l_orderkey#X, l_quantity#X]
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]

(19) FlushableHashAggregateExecTransformer
Input [2]: [l_orderkey#X, l_quantity#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_orderkey#X, sum#X, isEmpty#X]

(20) ProjectExecTransformer
Output [4]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, sum#X, isEmpty#X]
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]

(21) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_orderkey#X, sum#X, isEmpty#X]
Arguments: false

(22) ColumnarExchange
Input [4]: [hash_partition_key#X, l_orderkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(23) ShuffleQueryStage
Output [3]: [l_orderkey#X, sum#X, isEmpty#X]
Arguments: 2

(24) InputAdapter
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]

(25) InputIteratorTransformer
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]

(26) RegularHashAggregateExecTransformer
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [2]: [l_orderkey#X, sum(l_quantity#X)#X AS sum(l_quantity#X)#X]

(27) FilterExecTransformer
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]
Arguments: (isnotnull(sum(l_quantity#X)#X) AND (sum(l_quantity#X)#X > 300.00))

(28) ProjectExecTransformer
Output [1]: [l_orderkey#X]
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(29) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(30) ProjectExecTransformer
Output [5]: [hash(o_custkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(31) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: false

(32) ColumnarExchange
Input [5]: [hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X], [plan_id=X], [id=#X]

(33) ShuffleQueryStage
Output [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: 6

(34) InputAdapter
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(35) InputIteratorTransformer
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(36) ShuffledHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(37) ProjectExecTransformer
Output [6]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Input [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(38) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Arguments: false

(39) ColumnarExchange
Input [6]: [hash_partition_key#X, c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X], [plan_id=X], [id=#X]

(40) ShuffleQueryStage
Output [5]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Arguments: 7

(41) InputAdapter
Input [5]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]

(42) InputIteratorTransformer
Input [5]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]

(43) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(44) FilterExecTransformer
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Arguments: isnotnull(l_orderkey#X)

(45) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_quantity#X]
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]

(46) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_quantity#X]
Arguments: false

(47) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_quantity#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_quantity#X], [plan_id=X], [id=#X]

(48) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_quantity#X]
Arguments: 3

(49) InputAdapter
Input [2]: [l_orderkey#X, l_quantity#X]

(50) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_quantity#X]

(51) ReusedExchange [Reuses operator id: 22]
Output [3]: [l_orderkey#X, sum#X, isEmpty#X]

(52) ShuffleQueryStage
Output [3]: [l_orderkey#X, sum#X, isEmpty#X]
Arguments: 5

(53) InputAdapter
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]

(54) InputIteratorTransformer
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]

(55) RegularHashAggregateExecTransformer
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [2]: [l_orderkey#X, sum(l_quantity#X)#X AS sum(l_quantity#X)#X]

(56) FilterExecTransformer
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]
Arguments: (isnotnull(sum(l_quantity#X)#X) AND (sum(l_quantity#X)#X > 300.00))

(57) ProjectExecTransformer
Output [1]: [l_orderkey#X]
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(58) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(59) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(60) ProjectExecTransformer
Output [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_quantity#X]
Input [7]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_orderkey#X, l_quantity#X]

(61) RegularHashAggregateExecTransformer
Input [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_quantity#X]
Keys [5]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [7]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum#X, isEmpty#X]

(62) RegularHashAggregateExecTransformer
Input [7]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum#X, isEmpty#X]
Keys [5]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity#X)#X AS sum(l_quantity)#X]

(63) WholeStageCodegenTransformer (X)
Input [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]
Arguments: false

(64) TakeOrderedAndProjectExecTransformer
Input [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]
Arguments: 100, [o_totalprice#X DESC NULLS LAST, o_orderdate#X ASC NULLS FIRST], [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X], 0

(65) VeloxColumnarToRowExec
Input [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]

(66) Scan parquetdefault.customer
Output [3]: [c_custkey#X, c_name#X, c_mktsegment#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(c_custkey)]
ReadSchema: struct<c_custkey:bigint,c_name:string>

(67) Filter
Input [3]: [c_custkey#X, c_name#X, c_mktsegment#X]
Condition : isnotnull(c_custkey#X)

(68) Project
Output [2]: [c_custkey#X, c_name#X]
Input [3]: [c_custkey#X, c_name#X, c_mktsegment#X]

(69) Exchange
Input [2]: [c_custkey#X, c_name#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(70) Scan parquetdefault.orders
Output [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_totalprice:decimal(12,2)>

(71) Filter
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Condition : (isnotnull(o_custkey#X) AND isnotnull(o_orderkey#X))

(72) Exchange
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(73) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(74) Project
Output [2]: [l_orderkey#X, l_quantity#X]
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]

(75) HashAggregate
Input [2]: [l_orderkey#X, l_quantity#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_orderkey#X, sum#X, isEmpty#X]

(76) Exchange
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(77) HashAggregate
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [2]: [l_orderkey#X, sum(l_quantity#X)#X AS sum(l_quantity#X)#X]

(78) Filter
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]
Condition : (isnotnull(sum(l_quantity#X)#X) AND (sum(l_quantity#X)#X > 300.00))

(79) Project
Output [1]: [l_orderkey#X]
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(80) ShuffledHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(81) Exchange
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(82) ShuffledHashJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(83) Project
Output [5]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Input [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(84) Exchange
Input [5]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(85) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(86) Filter
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Condition : isnotnull(l_orderkey#X)

(87) Project
Output [2]: [l_orderkey#X, l_quantity#X]
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]

(88) Exchange
Input [2]: [l_orderkey#X, l_quantity#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(89) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(90) Project
Output [2]: [l_orderkey#X, l_quantity#X]
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]

(91) HashAggregate
Input [2]: [l_orderkey#X, l_quantity#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_orderkey#X, sum#X, isEmpty#X]

(92) Exchange
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(93) HashAggregate
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [2]: [l_orderkey#X, sum(l_quantity#X)#X AS sum(l_quantity#X)#X]

(94) Filter
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]
Condition : (isnotnull(sum(l_quantity#X)#X) AND (sum(l_quantity#X)#X > 300.00))

(95) Project
Output [1]: [l_orderkey#X]
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(96) ShuffledHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(97) ShuffledHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(98) Project
Output [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_quantity#X]
Input [7]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_orderkey#X, l_quantity#X]

(99) HashAggregate
Input [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_quantity#X]
Keys [5]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [7]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum#X, isEmpty#X]

(100) HashAggregate
Input [7]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum#X, isEmpty#X]
Keys [5]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity#X)#X AS sum(l_quantity)#X]

(101) TakeOrderedAndProject
Input [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]
Arguments: 100, [o_totalprice#X DESC NULLS LAST, o_orderdate#X ASC NULLS FIRST], [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]

(102) AdaptiveSparkPlan
Output [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]
Arguments: isFinalPlan=true