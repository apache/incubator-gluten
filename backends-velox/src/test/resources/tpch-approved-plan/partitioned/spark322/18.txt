== Physical Plan ==
AdaptiveSparkPlan (105)
+- == Final Plan ==
   VeloxColumnarToRowExec (68)
   +- TakeOrderedAndProjectExecTransformer (67)
      +- ^ ProjectExecTransformer (65)
         +- ^ RegularHashAggregateExecTransformer (64)
            +- ^ RegularHashAggregateExecTransformer (63)
               +- ^ ProjectExecTransformer (62)
                  +- ^ ShuffledHashJoinExecTransformer Inner (61)
                     :- ^ InputIteratorTransformer (43)
                     :  +- ^ InputAdapter (42)
                     :     +- ^ ShuffleQueryStage (41)
                     :        +- ColumnarExchange (40)
                     :           +- ^ ProjectExecTransformer (38)
                     :              +- ^ ShuffledHashJoinExecTransformer Inner (37)
                     :                 :- ^ InputIteratorTransformer (8)
                     :                 :  +- ^ InputAdapter (7)
                     :                 :     +- ^ ShuffleQueryStage (6)
                     :                 :        +- ColumnarExchange (5)
                     :                 :           +- ^ ProjectExecTransformer (3)
                     :                 :              +- ^ FilterExecTransformer (2)
                     :                 :                 +- ^ Scan parquetdefault.customer (1)
                     :                 +- ^ InputIteratorTransformer (36)
                     :                    +- ^ InputAdapter (35)
                     :                       +- ^ ShuffleQueryStage (34)
                     :                          +- ColumnarExchange (33)
                     :                             +- ^ ProjectExecTransformer (31)
                     :                                +- ^ ShuffledHashJoinExecTransformer LeftSemi (30)
                     :                                   :- ^ InputIteratorTransformer (16)
                     :                                   :  +- ^ InputAdapter (15)
                     :                                   :     +- ^ ShuffleQueryStage (14)
                     :                                   :        +- ColumnarExchange (13)
                     :                                   :           +- ^ ProjectExecTransformer (11)
                     :                                   :              +- ^ FilterExecTransformer (10)
                     :                                   :                 +- ^ Scan parquetdefault.orders (9)
                     :                                   +- ^ ProjectExecTransformer (29)
                     :                                      +- ^ FilterExecTransformer (28)
                     :                                         +- ^ ProjectExecTransformer (27)
                     :                                            +- ^ RegularHashAggregateExecTransformer (26)
                     :                                               +- ^ InputIteratorTransformer (25)
                     :                                                  +- ^ InputAdapter (24)
                     :                                                     +- ^ ShuffleQueryStage (23)
                     :                                                        +- ColumnarExchange (22)
                     :                                                           +- ^ ProjectExecTransformer (20)
                     :                                                              +- ^ FlushableHashAggregateExecTransformer (19)
                     :                                                                 +- ^ ProjectExecTransformer (18)
                     :                                                                    +- ^ Scan parquetdefault.lineitem (17)
                     +- ^ ShuffledHashJoinExecTransformer LeftSemi (60)
                        :- ^ InputIteratorTransformer (51)
                        :  +- ^ InputAdapter (50)
                        :     +- ^ ShuffleQueryStage (49)
                        :        +- ColumnarExchange (48)
                        :           +- ^ ProjectExecTransformer (46)
                        :              +- ^ FilterExecTransformer (45)
                        :                 +- ^ Scan parquetdefault.lineitem (44)
                        +- ^ ProjectExecTransformer (59)
                           +- ^ FilterExecTransformer (58)
                              +- ^ ProjectExecTransformer (57)
                                 +- ^ RegularHashAggregateExecTransformer (56)
                                    +- ^ InputIteratorTransformer (55)
                                       +- ^ InputAdapter (54)
                                          +- ^ ShuffleQueryStage (53)
                                             +- ReusedExchange (52)
+- == Initial Plan ==
   TakeOrderedAndProject (104)
   +- HashAggregate (103)
      +- HashAggregate (102)
         +- Project (101)
            +- ShuffledHashJoin Inner BuildRight (100)
               :- Exchange (87)
               :  +- Project (86)
               :     +- ShuffledHashJoin Inner BuildLeft (85)
               :        :- Exchange (72)
               :        :  +- Project (71)
               :        :     +- Filter (70)
               :        :        +- Scan parquetdefault.customer (69)
               :        +- Exchange (84)
               :           +- ShuffledHashJoin LeftSemi BuildRight (83)
               :              :- Exchange (75)
               :              :  +- Filter (74)
               :              :     +- Scan parquetdefault.orders (73)
               :              +- Project (82)
               :                 +- Filter (81)
               :                    +- HashAggregate (80)
               :                       +- Exchange (79)
               :                          +- HashAggregate (78)
               :                             +- Project (77)
               :                                +- Scan parquetdefault.lineitem (76)
               +- ShuffledHashJoin LeftSemi BuildRight (99)
                  :- Exchange (91)
                  :  +- Project (90)
                  :     +- Filter (89)
                  :        +- Scan parquetdefault.lineitem (88)
                  +- Project (98)
                     +- Filter (97)
                        +- HashAggregate (96)
                           +- Exchange (95)
                              +- HashAggregate (94)
                                 +- Project (93)
                                    +- Scan parquetdefault.lineitem (92)


(1) Scan parquetdefault.customer
Output [3]: [c_custkey#X, c_name#X, c_mktsegment#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(c_custkey)]
ReadSchema: struct<c_custkey:bigint,c_name:string>

(2) FilterExecTransformer
Input [3]: [c_custkey#X, c_name#X, c_mktsegment#X]
Arguments: isnotnull(c_custkey#X)

(3) ProjectExecTransformer
Output [3]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_name#X]
Input [3]: [c_custkey#X, c_name#X, c_mktsegment#X]

(4) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_custkey#X, c_name#X]
Arguments: false

(5) ColumnarExchange
Input [3]: [hash_partition_key#X, c_custkey#X, c_name#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_name#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [2]: [c_custkey#X, c_name#X]
Arguments: 0

(7) InputAdapter
Input [2]: [c_custkey#X, c_name#X]

(8) InputIteratorTransformer
Input [2]: [c_custkey#X, c_name#X]

(9) Scan parquetdefault.orders
Output [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_totalprice:decimal(12,2)>

(10) FilterExecTransformer
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: (isnotnull(o_custkey#X) AND isnotnull(o_orderkey#X))

(11) ProjectExecTransformer
Output [5]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(12) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: false

(13) ColumnarExchange
Input [5]: [hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: 1

(15) InputAdapter
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(16) InputIteratorTransformer
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(17) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(18) ProjectExecTransformer
Output [2]: [l_orderkey#X, l_quantity#X]
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]

(19) FlushableHashAggregateExecTransformer
Input [2]: [l_orderkey#X, l_quantity#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_orderkey#X, sum#X, isEmpty#X]

(20) ProjectExecTransformer
Output [4]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, sum#X, isEmpty#X]
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]

(21) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_orderkey#X, sum#X, isEmpty#X]
Arguments: false

(22) ColumnarExchange
Input [4]: [hash_partition_key#X, l_orderkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(23) ShuffleQueryStage
Output [3]: [l_orderkey#X, sum#X, isEmpty#X]
Arguments: 2

(24) InputAdapter
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]

(25) InputIteratorTransformer
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]

(26) RegularHashAggregateExecTransformer
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(27) ProjectExecTransformer
Output [2]: [l_orderkey#X, sum(l_quantity#X)#X AS sum(l_quantity#X)#X]
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(28) FilterExecTransformer
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]
Arguments: (isnotnull(sum(l_quantity#X)#X) AND (sum(l_quantity#X)#X > 300.00))

(29) ProjectExecTransformer
Output [1]: [l_orderkey#X]
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(30) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(31) ProjectExecTransformer
Output [5]: [hash(o_custkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(32) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: false

(33) ColumnarExchange
Input [5]: [hash_partition_key#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X], [plan_id=X], [id=#X]

(34) ShuffleQueryStage
Output [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: 6

(35) InputAdapter
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(36) InputIteratorTransformer
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(37) ShuffledHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(38) ProjectExecTransformer
Output [6]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Input [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(39) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Arguments: false

(40) ColumnarExchange
Input [6]: [hash_partition_key#X, c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X], [plan_id=X], [id=#X]

(41) ShuffleQueryStage
Output [5]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Arguments: 7

(42) InputAdapter
Input [5]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]

(43) InputIteratorTransformer
Input [5]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]

(44) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(45) FilterExecTransformer
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Arguments: isnotnull(l_orderkey#X)

(46) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_quantity#X]
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]

(47) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_quantity#X]
Arguments: false

(48) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_quantity#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_quantity#X], [plan_id=X], [id=#X]

(49) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_quantity#X]
Arguments: 3

(50) InputAdapter
Input [2]: [l_orderkey#X, l_quantity#X]

(51) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_quantity#X]

(52) ReusedExchange [Reuses operator id: 22]
Output [3]: [l_orderkey#X, sum#X, isEmpty#X]

(53) ShuffleQueryStage
Output [3]: [l_orderkey#X, sum#X, isEmpty#X]
Arguments: 5

(54) InputAdapter
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]

(55) InputIteratorTransformer
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]

(56) RegularHashAggregateExecTransformer
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(57) ProjectExecTransformer
Output [2]: [l_orderkey#X, sum(l_quantity#X)#X AS sum(l_quantity#X)#X]
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(58) FilterExecTransformer
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]
Arguments: (isnotnull(sum(l_quantity#X)#X) AND (sum(l_quantity#X)#X > 300.00))

(59) ProjectExecTransformer
Output [1]: [l_orderkey#X]
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(60) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(61) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(62) ProjectExecTransformer
Output [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_quantity#X]
Input [7]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_orderkey#X, l_quantity#X]

(63) RegularHashAggregateExecTransformer
Input [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_quantity#X]
Keys [5]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [7]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum#X, isEmpty#X]

(64) RegularHashAggregateExecTransformer
Input [7]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum#X, isEmpty#X]
Keys [5]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity#X)#X]

(65) ProjectExecTransformer
Output [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity#X)#X AS sum(l_quantity)#X]
Input [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity#X)#X]

(66) WholeStageCodegenTransformer (X)
Input [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]
Arguments: false

(67) TakeOrderedAndProjectExecTransformer
Input [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]
Arguments: 100, [o_totalprice#X DESC NULLS LAST, o_orderdate#X ASC NULLS FIRST], [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X], 0

(68) VeloxColumnarToRowExec
Input [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]

(69) Scan parquetdefault.customer
Output [3]: [c_custkey#X, c_name#X, c_mktsegment#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(c_custkey)]
ReadSchema: struct<c_custkey:bigint,c_name:string>

(70) Filter
Input [3]: [c_custkey#X, c_name#X, c_mktsegment#X]
Condition : isnotnull(c_custkey#X)

(71) Project
Output [2]: [c_custkey#X, c_name#X]
Input [3]: [c_custkey#X, c_name#X, c_mktsegment#X]

(72) Exchange
Input [2]: [c_custkey#X, c_name#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(73) Scan parquetdefault.orders
Output [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_totalprice:decimal(12,2)>

(74) Filter
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Condition : (isnotnull(o_custkey#X) AND isnotnull(o_orderkey#X))

(75) Exchange
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(76) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(77) Project
Output [2]: [l_orderkey#X, l_quantity#X]
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]

(78) HashAggregate
Input [2]: [l_orderkey#X, l_quantity#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_orderkey#X, sum#X, isEmpty#X]

(79) Exchange
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(80) HashAggregate
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [2]: [l_orderkey#X, sum(l_quantity#X)#X AS sum(l_quantity#X)#X]

(81) Filter
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]
Condition : (isnotnull(sum(l_quantity#X)#X) AND (sum(l_quantity#X)#X > 300.00))

(82) Project
Output [1]: [l_orderkey#X]
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(83) ShuffledHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(84) Exchange
Input [4]: [o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(85) ShuffledHashJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(86) Project
Output [5]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Input [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_custkey#X, o_totalprice#X, o_orderdate#X]

(87) Exchange
Input [5]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(88) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(89) Filter
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Condition : isnotnull(l_orderkey#X)

(90) Project
Output [2]: [l_orderkey#X, l_quantity#X]
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]

(91) Exchange
Input [2]: [l_orderkey#X, l_quantity#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(92) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_quantity:decimal(12,2)>

(93) Project
Output [2]: [l_orderkey#X, l_quantity#X]
Input [3]: [l_orderkey#X, l_quantity#X, l_shipdate#X]

(94) HashAggregate
Input [2]: [l_orderkey#X, l_quantity#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_orderkey#X, sum#X, isEmpty#X]

(95) Exchange
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(96) HashAggregate
Input [3]: [l_orderkey#X, sum#X, isEmpty#X]
Keys [1]: [l_orderkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [2]: [l_orderkey#X, sum(l_quantity#X)#X AS sum(l_quantity#X)#X]

(97) Filter
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]
Condition : (isnotnull(sum(l_quantity#X)#X) AND (sum(l_quantity#X)#X > 300.00))

(98) Project
Output [1]: [l_orderkey#X]
Input [2]: [l_orderkey#X, sum(l_quantity#X)#X]

(99) ShuffledHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(100) ShuffledHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(101) Project
Output [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_quantity#X]
Input [7]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_orderkey#X, l_quantity#X]

(102) HashAggregate
Input [6]: [c_custkey#X, c_name#X, o_orderkey#X, o_totalprice#X, o_orderdate#X, l_quantity#X]
Keys [5]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [7]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum#X, isEmpty#X]

(103) HashAggregate
Input [7]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum#X, isEmpty#X]
Keys [5]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity#X)#X AS sum(l_quantity)#X]

(104) TakeOrderedAndProject
Input [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]
Arguments: 100, [o_totalprice#X DESC NULLS LAST, o_orderdate#X ASC NULLS FIRST], [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]

(105) AdaptiveSparkPlan
Output [6]: [c_name#X, c_custkey#X, o_orderkey#X, o_orderdate#X, o_totalprice#X, sum(l_quantity)#X]
Arguments: isFinalPlan=true