== Physical Plan ==
AdaptiveSparkPlan (48)
+- == Final Plan ==
   VeloxColumnarToRowExec (33)
   +- ^ SortExecTransformer (31)
      +- ^ InputIteratorTransformer (30)
         +- ^ InputAdapter (29)
            +- ^ ShuffleQueryStage (28)
               +- ColumnarExchange (27)
                  +- ^ RegularHashAggregateExecTransformer (25)
                     +- ^ InputIteratorTransformer (24)
                        +- ^ InputAdapter (23)
                           +- ^ ShuffleQueryStage (22)
                              +- ColumnarExchange (21)
                                 +- ^ ProjectExecTransformer (19)
                                    +- ^ FlushableHashAggregateExecTransformer (18)
                                       +- ^ ProjectExecTransformer (17)
                                          +- ^ ShuffledHashJoinExecTransformer LeftSemi (16)
                                             :- ^ InputIteratorTransformer (7)
                                             :  +- ^ InputAdapter (6)
                                             :     +- ^ ShuffleQueryStage (5)
                                             :        +- ColumnarExchange (4)
                                             :           +- ^ ProjectExecTransformer (2)
                                             :              +- ^ Scan parquetdefault.orders (1)
                                             +- ^ InputIteratorTransformer (15)
                                                +- ^ InputAdapter (14)
                                                   +- ^ ShuffleQueryStage (13)
                                                      +- ColumnarExchange (12)
                                                         +- ^ ProjectExecTransformer (10)
                                                            +- ^ FilterExecTransformer (9)
                                                               +- ^ Scan parquetdefault.lineitem (8)
+- == Initial Plan ==
   Sort (47)
   +- Exchange (46)
      +- HashAggregate (45)
         +- Exchange (44)
            +- HashAggregate (43)
               +- Project (42)
                  +- ShuffledHashJoin LeftSemi BuildRight (41)
                     :- Exchange (36)
                     :  +- Project (35)
                     :     +- Scan parquetdefault.orders (34)
                     +- Exchange (40)
                        +- Project (39)
                           +- Filter (38)
                              +- Scan parquetdefault.lineitem (37)


(1) Scan parquetdefault.orders
Output [3]: [o_orderkey#X, o_orderpriority#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PartitionFilters: [isnotnull(o_orderdate#X), (o_orderdate#X >= 1993-07-01), (o_orderdate#X < 1993-10-01)]
ReadSchema: struct<o_orderkey:bigint,o_orderpriority:string>

(2) ProjectExecTransformer
Output [3]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Input [3]: [o_orderkey#X, o_orderpriority#X, o_orderdate#X]

(3) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Arguments: false

(4) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_orderpriority#X], [plan_id=X], [id=#X]

(5) ShuffleQueryStage
Output [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: 0

(6) InputAdapter
Input [2]: [o_orderkey#X, o_orderpriority#X]

(7) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_orderpriority#X]

(8) Scan parquetdefault.lineitem
Output [4]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date>

(9) FilterExecTransformer
Input [4]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Arguments: ((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND (l_commitdate#X < l_receiptdate#X))

(10) ProjectExecTransformer
Output [2]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X]
Input [4]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]

(11) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, l_orderkey#X]
Arguments: false

(12) ColumnarExchange
Input [2]: [hash_partition_key#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X], [plan_id=X], [id=#X]

(13) ShuffleQueryStage
Output [1]: [l_orderkey#X]
Arguments: 1

(14) InputAdapter
Input [1]: [l_orderkey#X]

(15) InputIteratorTransformer
Input [1]: [l_orderkey#X]

(16) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(17) ProjectExecTransformer
Output [1]: [o_orderpriority#X]
Input [2]: [o_orderkey#X, o_orderpriority#X]

(18) FlushableHashAggregateExecTransformer
Input [1]: [o_orderpriority#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [o_orderpriority#X, count#X]

(19) ProjectExecTransformer
Output [3]: [hash(o_orderpriority#X, 42) AS hash_partition_key#X, o_orderpriority#X, count#X]
Input [2]: [o_orderpriority#X, count#X]

(20) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: false

(21) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: hashpartitioning(o_orderpriority#X, 1), ENSURE_REQUIREMENTS, [o_orderpriority#X, count#X], [plan_id=X], [id=#X]

(22) ShuffleQueryStage
Output [2]: [o_orderpriority#X, count#X]
Arguments: 2

(23) InputAdapter
Input [2]: [o_orderpriority#X, count#X]

(24) InputIteratorTransformer
Input [2]: [o_orderpriority#X, count#X]

(25) RegularHashAggregateExecTransformer
Input [2]: [o_orderpriority#X, count#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [o_orderpriority#X, count(1)#X AS order_count#X]

(26) WholeStageCodegenTransformer (X)
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: false

(27) ColumnarExchange
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: rangepartitioning(o_orderpriority#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(28) ShuffleQueryStage
Output [2]: [o_orderpriority#X, order_count#X]
Arguments: 3

(29) InputAdapter
Input [2]: [o_orderpriority#X, order_count#X]

(30) InputIteratorTransformer
Input [2]: [o_orderpriority#X, order_count#X]

(31) SortExecTransformer
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: [o_orderpriority#X ASC NULLS FIRST], true, 0

(32) WholeStageCodegenTransformer (X)
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: false

(33) VeloxColumnarToRowExec
Input [2]: [o_orderpriority#X, order_count#X]

(34) Scan parquetdefault.orders
Output [3]: [o_orderkey#X, o_orderpriority#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PartitionFilters: [isnotnull(o_orderdate#X), (o_orderdate#X >= 1993-07-01), (o_orderdate#X < 1993-10-01)]
ReadSchema: struct<o_orderkey:bigint,o_orderpriority:string>

(35) Project
Output [2]: [o_orderkey#X, o_orderpriority#X]
Input [3]: [o_orderkey#X, o_orderpriority#X, o_orderdate#X]

(36) Exchange
Input [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(37) Scan parquetdefault.lineitem
Output [4]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date>

(38) Filter
Input [4]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Condition : ((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND (l_commitdate#X < l_receiptdate#X))

(39) Project
Output [1]: [l_orderkey#X]
Input [4]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]

(40) Exchange
Input [1]: [l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(41) ShuffledHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(42) Project
Output [1]: [o_orderpriority#X]
Input [2]: [o_orderkey#X, o_orderpriority#X]

(43) HashAggregate
Input [1]: [o_orderpriority#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [o_orderpriority#X, count#X]

(44) Exchange
Input [2]: [o_orderpriority#X, count#X]
Arguments: hashpartitioning(o_orderpriority#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(45) HashAggregate
Input [2]: [o_orderpriority#X, count#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [o_orderpriority#X, count(1)#X AS order_count#X]

(46) Exchange
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: rangepartitioning(o_orderpriority#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(47) Sort
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: [o_orderpriority#X ASC NULLS FIRST], true, 0

(48) AdaptiveSparkPlan
Output [2]: [o_orderpriority#X, order_count#X]
Arguments: isFinalPlan=true