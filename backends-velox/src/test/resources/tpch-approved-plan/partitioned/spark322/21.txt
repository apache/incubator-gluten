== Physical Plan ==
AdaptiveSparkPlan (120)
+- == Final Plan ==
   VeloxColumnarToRowExec (82)
   +- TakeOrderedAndProjectExecTransformer (81)
      +- ^ RegularHashAggregateExecTransformer (79)
         +- ^ InputIteratorTransformer (78)
            +- ^ InputAdapter (77)
               +- ^ ShuffleQueryStage (76)
                  +- ColumnarExchange (75)
                     +- ^ ProjectExecTransformer (73)
                        +- ^ FlushableHashAggregateExecTransformer (72)
                           +- ^ ProjectExecTransformer (71)
                              +- ^ ShuffledHashJoinExecTransformer Inner (70)
                                 :- ^ InputIteratorTransformer (61)
                                 :  +- ^ InputAdapter (60)
                                 :     +- ^ ShuffleQueryStage (59)
                                 :        +- ColumnarExchange (58)
                                 :           +- ^ ProjectExecTransformer (56)
                                 :              +- ^ ShuffledHashJoinExecTransformer Inner (55)
                                 :                 :- ^ InputIteratorTransformer (46)
                                 :                 :  +- ^ InputAdapter (45)
                                 :                 :     +- ^ ShuffleQueryStage (44)
                                 :                 :        +- ColumnarExchange (43)
                                 :                 :           +- ^ ProjectExecTransformer (41)
                                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner (40)
                                 :                 :                 :- ^ InputIteratorTransformer (8)
                                 :                 :                 :  +- ^ InputAdapter (7)
                                 :                 :                 :     +- ^ ShuffleQueryStage (6)
                                 :                 :                 :        +- ColumnarExchange (5)
                                 :                 :                 :           +- ^ ProjectExecTransformer (3)
                                 :                 :                 :              +- ^ FilterExecTransformer (2)
                                 :                 :                 :                 +- ^ Scan parquetdefault.supplier (1)
                                 :                 :                 +- ^ InputIteratorTransformer (39)
                                 :                 :                    +- ^ InputAdapter (38)
                                 :                 :                       +- ^ ShuffleQueryStage (37)
                                 :                 :                          +- ColumnarExchange (36)
                                 :                 :                             +- ^ ProjectExecTransformer (34)
                                 :                 :                                +- ^ ShuffledHashJoinExecTransformer LeftAnti (33)
                                 :                 :                                   :- ^ ShuffledHashJoinExecTransformer LeftSemi (24)
                                 :                 :                                   :  :- ^ InputIteratorTransformer (16)
                                 :                 :                                   :  :  +- ^ InputAdapter (15)
                                 :                 :                                   :  :     +- ^ ShuffleQueryStage (14)
                                 :                 :                                   :  :        +- ColumnarExchange (13)
                                 :                 :                                   :  :           +- ^ ProjectExecTransformer (11)
                                 :                 :                                   :  :              +- ^ FilterExecTransformer (10)
                                 :                 :                                   :  :                 +- ^ Scan parquetdefault.lineitem (9)
                                 :                 :                                   :  +- ^ InputIteratorTransformer (23)
                                 :                 :                                   :     +- ^ InputAdapter (22)
                                 :                 :                                   :        +- ^ ShuffleQueryStage (21)
                                 :                 :                                   :           +- ColumnarExchange (20)
                                 :                 :                                   :              +- ^ ProjectExecTransformer (18)
                                 :                 :                                   :                 +- ^ Scan parquetdefault.lineitem (17)
                                 :                 :                                   +- ^ InputIteratorTransformer (32)
                                 :                 :                                      +- ^ InputAdapter (31)
                                 :                 :                                         +- ^ ShuffleQueryStage (30)
                                 :                 :                                            +- ColumnarExchange (29)
                                 :                 :                                               +- ^ ProjectExecTransformer (27)
                                 :                 :                                                  +- ^ FilterExecTransformer (26)
                                 :                 :                                                     +- ^ Scan parquetdefault.lineitem (25)
                                 :                 +- ^ InputIteratorTransformer (54)
                                 :                    +- ^ InputAdapter (53)
                                 :                       +- ^ ShuffleQueryStage (52)
                                 :                          +- ColumnarExchange (51)
                                 :                             +- ^ ProjectExecTransformer (49)
                                 :                                +- ^ FilterExecTransformer (48)
                                 :                                   +- ^ Scan parquetdefault.orders (47)
                                 +- ^ InputIteratorTransformer (69)
                                    +- ^ InputAdapter (68)
                                       +- ^ ShuffleQueryStage (67)
                                          +- ColumnarExchange (66)
                                             +- ^ ProjectExecTransformer (64)
                                                +- ^ FilterExecTransformer (63)
                                                   +- ^ Scan parquetdefault.nation (62)
+- == Initial Plan ==
   TakeOrderedAndProject (119)
   +- HashAggregate (118)
      +- Exchange (117)
         +- HashAggregate (116)
            +- Project (115)
               +- ShuffledHashJoin Inner BuildRight (114)
                  :- Exchange (109)
                  :  +- Project (108)
                  :     +- ShuffledHashJoin Inner BuildRight (107)
                  :        :- Exchange (102)
                  :        :  +- Project (101)
                  :        :     +- ShuffledHashJoin Inner BuildLeft (100)
                  :        :        :- Exchange (85)
                  :        :        :  +- Filter (84)
                  :        :        :     +- Scan parquetdefault.supplier (83)
                  :        :        +- Exchange (99)
                  :        :           +- ShuffledHashJoin LeftAnti BuildRight (98)
                  :        :              :- ShuffledHashJoin LeftSemi BuildRight (93)
                  :        :              :  :- Exchange (89)
                  :        :              :  :  +- Project (88)
                  :        :              :  :     +- Filter (87)
                  :        :              :  :        +- Scan parquetdefault.lineitem (86)
                  :        :              :  +- Exchange (92)
                  :        :              :     +- Project (91)
                  :        :              :        +- Scan parquetdefault.lineitem (90)
                  :        :              +- Exchange (97)
                  :        :                 +- Project (96)
                  :        :                    +- Filter (95)
                  :        :                       +- Scan parquetdefault.lineitem (94)
                  :        +- Exchange (106)
                  :           +- Project (105)
                  :              +- Filter (104)
                  :                 +- Scan parquetdefault.orders (103)
                  +- Exchange (113)
                     +- Project (112)
                        +- Filter (111)
                           +- Scan parquetdefault.nation (110)


(1) Scan parquetdefault.supplier
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(3) ProjectExecTransformer
Output [4]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(4) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: false

(5) ColumnarExchange
Input [4]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_name#X, s_nationkey#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: 0

(7) InputAdapter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(8) InputIteratorTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(9) Scan parquetdefault.lineitem
Output [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(10) FilterExecTransformer
Input [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Arguments: ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(11) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]

(12) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(13) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: 1

(15) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(16) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(17) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_suppkey#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(18) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [3]: [l_orderkey#X, l_suppkey#X, l_shipdate#X]

(19) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(20) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(21) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: 2

(22) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(23) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(24) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(25) Scan parquetdefault.lineitem
Output [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(26) FilterExecTransformer
Input [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Arguments: ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(27) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]

(28) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(29) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(30) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: 3

(31) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(32) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(33) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(34) ProjectExecTransformer
Output [3]: [hash(l_suppkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [2]: [l_orderkey#X, l_suppkey#X]

(35) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(36) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(37) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: 6

(38) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(39) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(40) ShuffledHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(41) ProjectExecTransformer
Output [4]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(42) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: false

(43) ColumnarExchange
Input [4]: [hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [s_name#X, s_nationkey#X, l_orderkey#X], [plan_id=X], [id=#X]

(44) ShuffleQueryStage
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: 7

(45) InputAdapter
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]

(46) InputIteratorTransformer
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]

(47) Scan parquetdefault.orders
Output [3]: [o_orderkey#X, o_orderstatus#X, o_orderdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(48) FilterExecTransformer
Input [3]: [o_orderkey#X, o_orderstatus#X, o_orderdate#X]
Arguments: ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(49) ProjectExecTransformer
Output [2]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X]
Input [3]: [o_orderkey#X, o_orderstatus#X, o_orderdate#X]

(50) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, o_orderkey#X]
Arguments: false

(51) ColumnarExchange
Input [2]: [hash_partition_key#X, o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X], [plan_id=X], [id=#X]

(52) ShuffleQueryStage
Output [1]: [o_orderkey#X]
Arguments: 4

(53) InputAdapter
Input [1]: [o_orderkey#X]

(54) InputIteratorTransformer
Input [1]: [o_orderkey#X]

(55) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(56) ProjectExecTransformer
Output [3]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(57) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, s_nationkey#X]
Arguments: false

(58) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [s_name#X, s_nationkey#X], [plan_id=X], [id=#X]

(59) ShuffleQueryStage
Output [2]: [s_name#X, s_nationkey#X]
Arguments: 8

(60) InputAdapter
Input [2]: [s_name#X, s_nationkey#X]

(61) InputIteratorTransformer
Input [2]: [s_name#X, s_nationkey#X]

(62) Scan parquetdefault.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(63) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(64) ProjectExecTransformer
Output [2]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(65) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: false

(66) ColumnarExchange
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X], [plan_id=X], [id=#X]

(67) ShuffleQueryStage
Output [1]: [n_nationkey#X]
Arguments: 5

(68) InputAdapter
Input [1]: [n_nationkey#X]

(69) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(70) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(71) ProjectExecTransformer
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(72) FlushableHashAggregateExecTransformer
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(73) ProjectExecTransformer
Output [3]: [hash(s_name#X, 42) AS hash_partition_key#X, s_name#X, count#X]
Input [2]: [s_name#X, count#X]

(74) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: false

(75) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [s_name#X, count#X], [plan_id=X], [id=#X]

(76) ShuffleQueryStage
Output [2]: [s_name#X, count#X]
Arguments: 9

(77) InputAdapter
Input [2]: [s_name#X, count#X]

(78) InputIteratorTransformer
Input [2]: [s_name#X, count#X]

(79) RegularHashAggregateExecTransformer
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(80) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, numwait#X]
Arguments: false

(81) TakeOrderedAndProjectExecTransformer
Input [2]: [s_name#X, numwait#X]
Arguments: 100, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X], 0

(82) VeloxColumnarToRowExec
Input [2]: [s_name#X, numwait#X]

(83) Scan parquetdefault.supplier
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(84) Filter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(85) Exchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(86) Scan parquetdefault.lineitem
Output [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(87) Filter
Input [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Condition : ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(88) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]

(89) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(90) Scan parquetdefault.lineitem
Output [3]: [l_orderkey#X, l_suppkey#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(91) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [3]: [l_orderkey#X, l_suppkey#X, l_shipdate#X]

(92) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(93) ShuffledHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(94) Scan parquetdefault.lineitem
Output [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(95) Filter
Input [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]
Condition : ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(96) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [5]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X, l_shipdate#X]

(97) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(98) ShuffledHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(99) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(100) ShuffledHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(101) Project
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(102) Exchange
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(103) Scan parquetdefault.orders
Output [3]: [o_orderkey#X, o_orderstatus#X, o_orderdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(104) Filter
Input [3]: [o_orderkey#X, o_orderstatus#X, o_orderdate#X]
Condition : ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(105) Project
Output [1]: [o_orderkey#X]
Input [3]: [o_orderkey#X, o_orderstatus#X, o_orderdate#X]

(106) Exchange
Input [1]: [o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(107) ShuffledHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(108) Project
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(109) Exchange
Input [2]: [s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(110) Scan parquetdefault.nation
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(111) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(112) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(113) Exchange
Input [1]: [n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(114) ShuffledHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(115) Project
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(116) HashAggregate
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(117) Exchange
Input [2]: [s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(118) HashAggregate
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(119) TakeOrderedAndProject
Input [2]: [s_name#X, numwait#X]
Arguments: 100, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X]

(120) AdaptiveSparkPlan
Output [2]: [s_name#X, numwait#X]
Arguments: isFinalPlan=true