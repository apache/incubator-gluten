== Physical Plan ==
AdaptiveSparkPlan (60)
+- == Final Plan ==
   VeloxColumnarToRowExec (38)
   +- ^ ProjectExecTransformer (36)
      +- ^ RegularHashAggregateExecTransformer (35)
         +- ^ RegularHashAggregateExecTransformer (34)
            +- ^ ProjectExecTransformer (33)
               +- ^ ShuffledHashJoinExecTransformer Inner (32)
                  :- ^ ProjectExecTransformer (18)
                  :  +- ^ ShuffledHashJoinExecTransformer Inner (17)
                  :     :- ^ InputIteratorTransformer (8)
                  :     :  +- ^ InputAdapter (7)
                  :     :     +- ^ ShuffleQueryStage (6)
                  :     :        +- ColumnarExchange (5)
                  :     :           +- ^ ProjectExecTransformer (3)
                  :     :              +- ^ FilterExecTransformer (2)
                  :     :                 +- ^ Scan parquetdefault.lineitem (1)
                  :     +- ^ InputIteratorTransformer (16)
                  :        +- ^ InputAdapter (15)
                  :           +- ^ ShuffleQueryStage (14)
                  :              +- ColumnarExchange (13)
                  :                 +- ^ ProjectExecTransformer (11)
                  :                    +- ^ FilterExecTransformer (10)
                  :                       +- ^ Scan parquetdefault.part (9)
                  +- ^ FilterExecTransformer (31)
                     +- ^ ProjectExecTransformer (30)
                        +- ^ RegularHashAggregateExecTransformer (29)
                           +- ^ InputIteratorTransformer (28)
                              +- ^ InputAdapter (27)
                                 +- ^ ShuffleQueryStage (26)
                                    +- ColumnarExchange (25)
                                       +- ^ ProjectExecTransformer (23)
                                          +- ^ FlushableHashAggregateExecTransformer (22)
                                             +- ^ ProjectExecTransformer (21)
                                                +- ^ FilterExecTransformer (20)
                                                   +- ^ Scan parquetdefault.lineitem (19)
+- == Initial Plan ==
   HashAggregate (59)
   +- HashAggregate (58)
      +- Project (57)
         +- ShuffledHashJoin Inner BuildRight (56)
            :- Project (48)
            :  +- ShuffledHashJoin Inner BuildRight (47)
            :     :- Exchange (42)
            :     :  +- Project (41)
            :     :     +- Filter (40)
            :     :        +- Scan parquetdefault.lineitem (39)
            :     +- Exchange (46)
            :        +- Project (45)
            :           +- Filter (44)
            :              +- Scan parquetdefault.part (43)
            +- Filter (55)
               +- HashAggregate (54)
                  +- Exchange (53)
                     +- HashAggregate (52)
                        +- Project (51)
                           +- Filter (50)
                              +- Scan parquetdefault.lineitem (49)


(1) Scan parquetdefault.lineitem
Output [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_quantity)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2)>

(2) FilterExecTransformer
Input [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, l_shipdate#X]
Arguments: (isnotnull(l_partkey#X) AND isnotnull(l_quantity#X))

(3) ProjectExecTransformer
Output [4]: [hash(l_partkey#X, 42) AS hash_partition_key#X, l_partkey#X, l_quantity#X, l_extendedprice#X]
Input [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, l_shipdate#X]

(4) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: false

(5) ColumnarExchange
Input [4]: [hash_partition_key#X, l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: hashpartitioning(l_partkey#X, 1), ENSURE_REQUIREMENTS, [l_partkey#X, l_quantity#X, l_extendedprice#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: 0

(7) InputAdapter
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]

(8) InputIteratorTransformer
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]

(9) Scan parquetdefault.part
Output [3]: [p_partkey#X, p_container#X, p_brand#X]
Batched: true
Location: InMemoryFileIndex [file:/opt/gluten/backends-velox/spark-warehouse/io.glutenproject.execution.VeloxPartitionedTableTPCHSuite/part/p_brand=Brand%2323]
PartitionFilters: [isnotnull(p_brand#X), (p_brand#X = Brand#X)]
PushedFilters: [IsNotNull(p_container), EqualTo(p_container,MED BOX), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_container:string>

(10) FilterExecTransformer
Input [3]: [p_partkey#X, p_container#X, p_brand#X]
Arguments: ((isnotnull(p_container#X) AND (p_container#X = MED BOX)) AND isnotnull(p_partkey#X))

(11) ProjectExecTransformer
Output [2]: [hash(p_partkey#X, 42) AS hash_partition_key#X, p_partkey#X]
Input [3]: [p_partkey#X, p_container#X, p_brand#X]

(12) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, p_partkey#X]
Arguments: false

(13) ColumnarExchange
Input [2]: [hash_partition_key#X, p_partkey#X]
Arguments: hashpartitioning(p_partkey#X, 1), ENSURE_REQUIREMENTS, [p_partkey#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [1]: [p_partkey#X]
Arguments: 1

(15) InputAdapter
Input [1]: [p_partkey#X]

(16) InputIteratorTransformer
Input [1]: [p_partkey#X]

(17) ShuffledHashJoinExecTransformer
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(18) ProjectExecTransformer
Output [3]: [l_quantity#X, l_extendedprice#X, p_partkey#X]
Input [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, p_partkey#X]

(19) Scan parquetdefault.lineitem
Output [3]: [l_partkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_partkey)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2)>

(20) FilterExecTransformer
Input [3]: [l_partkey#X, l_quantity#X, l_shipdate#X]
Arguments: isnotnull(l_partkey#X)

(21) ProjectExecTransformer
Output [2]: [l_partkey#X, l_quantity#X]
Input [3]: [l_partkey#X, l_quantity#X, l_shipdate#X]

(22) FlushableHashAggregateExecTransformer
Input [2]: [l_partkey#X, l_quantity#X]
Keys [1]: [l_partkey#X]
Functions [1]: [partial_avg(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [3]: [l_partkey#X, sum#X, count#X]

(23) ProjectExecTransformer
Output [4]: [hash(l_partkey#X, 42) AS hash_partition_key#X, l_partkey#X, sum#X, count#X]
Input [3]: [l_partkey#X, sum#X, count#X]

(24) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_partkey#X, sum#X, count#X]
Arguments: false

(25) ColumnarExchange
Input [4]: [hash_partition_key#X, l_partkey#X, sum#X, count#X]
Arguments: hashpartitioning(l_partkey#X, 1), ENSURE_REQUIREMENTS, [l_partkey#X, sum#X, count#X], [plan_id=X], [id=#X]

(26) ShuffleQueryStage
Output [3]: [l_partkey#X, sum#X, count#X]
Arguments: 2

(27) InputAdapter
Input [3]: [l_partkey#X, sum#X, count#X]

(28) InputIteratorTransformer
Input [3]: [l_partkey#X, sum#X, count#X]

(29) RegularHashAggregateExecTransformer
Input [3]: [l_partkey#X, sum#X, count#X]
Keys [1]: [l_partkey#X]
Functions [1]: [avg(l_quantity#X)]
Aggregate Attributes [1]: [avg(l_quantity#X)#X]
Results [2]: [l_partkey#X, avg(l_quantity#X)#X]

(30) ProjectExecTransformer
Output [2]: [CheckOverflow((0.200000 * promote_precision(avg(l_quantity#X)#X)), DecimalType(18,7), true) AS (0.2 * avg(l_quantity))#X, l_partkey#X]
Input [2]: [l_partkey#X, avg(l_quantity#X)#X]

(31) FilterExecTransformer
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Arguments: isnotnull((0.2 * avg(l_quantity))#X)

(32) ShuffledHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: (cast(l_quantity#X as decimal(18,7)) < (0.2 * avg(l_quantity))#X)

(33) ProjectExecTransformer
Output [1]: [l_extendedprice#X]
Input [5]: [l_quantity#X, l_extendedprice#X, p_partkey#X, (0.2 * avg(l_quantity))#X, l_partkey#X]

(34) RegularHashAggregateExecTransformer
Input [1]: [l_extendedprice#X]
Keys: []
Functions [1]: [partial_sum(l_extendedprice#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(35) RegularHashAggregateExecTransformer
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum(l_extendedprice#X)]
Aggregate Attributes [1]: [sum(l_extendedprice#X)#X]
Results [1]: [sum(l_extendedprice#X)#X]

(36) ProjectExecTransformer
Output [1]: [CheckOverflow((promote_precision(sum(l_extendedprice#X)#X) / 7.00), DecimalType(27,6), true) AS avg_yearly#X]
Input [1]: [sum(l_extendedprice#X)#X]

(37) WholeStageCodegenTransformer (X)
Input [1]: [avg_yearly#X]
Arguments: false

(38) VeloxColumnarToRowExec
Input [1]: [avg_yearly#X]

(39) Scan parquetdefault.lineitem
Output [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_quantity)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2)>

(40) Filter
Input [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, l_shipdate#X]
Condition : (isnotnull(l_partkey#X) AND isnotnull(l_quantity#X))

(41) Project
Output [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Input [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, l_shipdate#X]

(42) Exchange
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: hashpartitioning(l_partkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(43) Scan parquetdefault.part
Output [3]: [p_partkey#X, p_container#X, p_brand#X]
Batched: true
Location: InMemoryFileIndex [file:/opt/gluten/backends-velox/spark-warehouse/io.glutenproject.execution.VeloxPartitionedTableTPCHSuite/part/p_brand=Brand%2323]
PartitionFilters: [isnotnull(p_brand#X), (p_brand#X = Brand#X)]
PushedFilters: [IsNotNull(p_container), EqualTo(p_container,MED BOX), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_container:string>

(44) Filter
Input [3]: [p_partkey#X, p_container#X, p_brand#X]
Condition : ((isnotnull(p_container#X) AND (p_container#X = MED BOX)) AND isnotnull(p_partkey#X))

(45) Project
Output [1]: [p_partkey#X]
Input [3]: [p_partkey#X, p_container#X, p_brand#X]

(46) Exchange
Input [1]: [p_partkey#X]
Arguments: hashpartitioning(p_partkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(47) ShuffledHashJoin
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(48) Project
Output [3]: [l_quantity#X, l_extendedprice#X, p_partkey#X]
Input [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, p_partkey#X]

(49) Scan parquetdefault.lineitem
Output [3]: [l_partkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(l_partkey)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2)>

(50) Filter
Input [3]: [l_partkey#X, l_quantity#X, l_shipdate#X]
Condition : isnotnull(l_partkey#X)

(51) Project
Output [2]: [l_partkey#X, l_quantity#X]
Input [3]: [l_partkey#X, l_quantity#X, l_shipdate#X]

(52) HashAggregate
Input [2]: [l_partkey#X, l_quantity#X]
Keys [1]: [l_partkey#X]
Functions [1]: [partial_avg(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [3]: [l_partkey#X, sum#X, count#X]

(53) Exchange
Input [3]: [l_partkey#X, sum#X, count#X]
Arguments: hashpartitioning(l_partkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(54) HashAggregate
Input [3]: [l_partkey#X, sum#X, count#X]
Keys [1]: [l_partkey#X]
Functions [1]: [avg(l_quantity#X)]
Aggregate Attributes [1]: [avg(l_quantity#X)#X]
Results [2]: [CheckOverflow((0.200000 * promote_precision(avg(l_quantity#X)#X)), DecimalType(18,7), true) AS (0.2 * avg(l_quantity))#X, l_partkey#X]

(55) Filter
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Condition : isnotnull((0.2 * avg(l_quantity))#X)

(56) ShuffledHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: (cast(l_quantity#X as decimal(18,7)) < (0.2 * avg(l_quantity))#X)

(57) Project
Output [1]: [l_extendedprice#X]
Input [5]: [l_quantity#X, l_extendedprice#X, p_partkey#X, (0.2 * avg(l_quantity))#X, l_partkey#X]

(58) HashAggregate
Input [1]: [l_extendedprice#X]
Keys: []
Functions [1]: [partial_sum(l_extendedprice#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(59) HashAggregate
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum(l_extendedprice#X)]
Aggregate Attributes [1]: [sum(l_extendedprice#X)#X]
Results [1]: [CheckOverflow((promote_precision(sum(l_extendedprice#X)#X) / 7.00), DecimalType(27,6), true) AS avg_yearly#X]

(60) AdaptiveSparkPlan
Output [1]: [avg_yearly#X]
Arguments: isFinalPlan=true