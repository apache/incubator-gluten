== Physical Plan ==
AdaptiveSparkPlan (54)
+- == Final Plan ==
   VeloxColumnarToRowExec (37)
   +- ^ SortExecTransformer (35)
      +- ^ InputIteratorTransformer (34)
         +- ^ InputAdapter (33)
            +- ^ ShuffleQueryStage (32)
               +- ColumnarExchange (31)
                  +- ^ ProjectExecTransformer (29)
                     +- ^ RegularHashAggregateExecTransformer (28)
                        +- ^ InputIteratorTransformer (27)
                           +- ^ InputAdapter (26)
                              +- ^ ShuffleQueryStage (25)
                                 +- ColumnarExchange (24)
                                    +- ^ ProjectExecTransformer (22)
                                       +- ^ FlushableHashAggregateExecTransformer (21)
                                          +- ^ ProjectExecTransformer (20)
                                             +- ^ RegularHashAggregateExecTransformer (19)
                                                +- ^ RegularHashAggregateExecTransformer (18)
                                                   +- ^ ProjectExecTransformer (17)
                                                      +- ^ ShuffledHashJoinExecTransformer LeftOuter (16)
                                                         :- ^ InputIteratorTransformer (7)
                                                         :  +- ^ InputAdapter (6)
                                                         :     +- ^ ShuffleQueryStage (5)
                                                         :        +- ColumnarExchange (4)
                                                         :           +- ^ ProjectExecTransformer (2)
                                                         :              +- ^ Scan parquetdefault.customer (1)
                                                         +- ^ InputIteratorTransformer (15)
                                                            +- ^ InputAdapter (14)
                                                               +- ^ ShuffleQueryStage (13)
                                                                  +- ColumnarExchange (12)
                                                                     +- ^ ProjectExecTransformer (10)
                                                                        +- ^ FilterExecTransformer (9)
                                                                           +- ^ Scan parquetdefault.orders (8)
+- == Initial Plan ==
   Sort (53)
   +- Exchange (52)
      +- HashAggregate (51)
         +- Exchange (50)
            +- HashAggregate (49)
               +- HashAggregate (48)
                  +- HashAggregate (47)
                     +- Project (46)
                        +- ShuffledHashJoin LeftOuter BuildRight (45)
                           :- Exchange (40)
                           :  +- Project (39)
                           :     +- Scan parquetdefault.customer (38)
                           +- Exchange (44)
                              +- Project (43)
                                 +- Filter (42)
                                    +- Scan parquetdefault.orders (41)


(1) Scan parquetdefault.customer
Output [2]: [c_custkey#X, c_mktsegment#X]
Batched: true
Location: CatalogFileIndex [*]
ReadSchema: struct<c_custkey:bigint>

(2) ProjectExecTransformer
Output [2]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X]
Input [2]: [c_custkey#X, c_mktsegment#X]

(3) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, c_custkey#X]
Arguments: false

(4) ColumnarExchange
Input [2]: [hash_partition_key#X, c_custkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X], [plan_id=X], [id=#X]

(5) ShuffleQueryStage
Output [1]: [c_custkey#X]
Arguments: 0

(6) InputAdapter
Input [1]: [c_custkey#X]

(7) InputIteratorTransformer
Input [1]: [c_custkey#X]

(8) Scan parquetdefault.orders
Output [4]: [o_orderkey#X, o_custkey#X, o_comment#X, o_orderdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(o_comment), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_comment:string>

(9) FilterExecTransformer
Input [4]: [o_orderkey#X, o_custkey#X, o_comment#X, o_orderdate#X]
Arguments: ((isnotnull(o_comment#X) AND NOT o_comment#X LIKE %special%requests%) AND isnotnull(o_custkey#X))

(10) ProjectExecTransformer
Output [3]: [hash(o_custkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X]
Input [4]: [o_orderkey#X, o_custkey#X, o_comment#X, o_orderdate#X]

(11) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: false

(12) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_custkey#X], [plan_id=X], [id=#X]

(13) ShuffleQueryStage
Output [2]: [o_orderkey#X, o_custkey#X]
Arguments: 1

(14) InputAdapter
Input [2]: [o_orderkey#X, o_custkey#X]

(15) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_custkey#X]

(16) ShuffledHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(17) ProjectExecTransformer
Output [2]: [c_custkey#X, o_orderkey#X]
Input [3]: [c_custkey#X, o_orderkey#X, o_custkey#X]

(18) RegularHashAggregateExecTransformer
Input [2]: [c_custkey#X, o_orderkey#X]
Keys [1]: [c_custkey#X]
Functions [1]: [partial_count(o_orderkey#X)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_custkey#X, count#X]

(19) RegularHashAggregateExecTransformer
Input [2]: [c_custkey#X, count#X]
Keys [1]: [c_custkey#X]
Functions [1]: [count(o_orderkey#X)]
Aggregate Attributes [1]: [count(o_orderkey#X)#X]
Results [2]: [c_custkey#X, count(o_orderkey#X)#X]

(20) ProjectExecTransformer
Output [1]: [count(o_orderkey#X)#X AS c_count#X]
Input [2]: [c_custkey#X, count(o_orderkey#X)#X]

(21) FlushableHashAggregateExecTransformer
Input [1]: [c_count#X]
Keys [1]: [c_count#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_count#X, count#X]

(22) ProjectExecTransformer
Output [3]: [hash(c_count#X, 42) AS hash_partition_key#X, c_count#X, count#X]
Input [2]: [c_count#X, count#X]

(23) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: false

(24) ColumnarExchange
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: hashpartitioning(c_count#X, 1), ENSURE_REQUIREMENTS, [c_count#X, count#X], [plan_id=X], [id=#X]

(25) ShuffleQueryStage
Output [2]: [c_count#X, count#X]
Arguments: 2

(26) InputAdapter
Input [2]: [c_count#X, count#X]

(27) InputIteratorTransformer
Input [2]: [c_count#X, count#X]

(28) RegularHashAggregateExecTransformer
Input [2]: [c_count#X, count#X]
Keys [1]: [c_count#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [c_count#X, count(1)#X]

(29) ProjectExecTransformer
Output [2]: [c_count#X, count(1)#X AS custdist#X]
Input [2]: [c_count#X, count(1)#X]

(30) WholeStageCodegenTransformer (X)
Input [2]: [c_count#X, custdist#X]
Arguments: false

(31) ColumnarExchange
Input [2]: [c_count#X, custdist#X]
Arguments: rangepartitioning(custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(32) ShuffleQueryStage
Output [2]: [c_count#X, custdist#X]
Arguments: 3

(33) InputAdapter
Input [2]: [c_count#X, custdist#X]

(34) InputIteratorTransformer
Input [2]: [c_count#X, custdist#X]

(35) SortExecTransformer
Input [2]: [c_count#X, custdist#X]
Arguments: [custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST], true, 0

(36) WholeStageCodegenTransformer (X)
Input [2]: [c_count#X, custdist#X]
Arguments: false

(37) VeloxColumnarToRowExec
Input [2]: [c_count#X, custdist#X]

(38) Scan parquetdefault.customer
Output [2]: [c_custkey#X, c_mktsegment#X]
Batched: true
Location: CatalogFileIndex [*]
ReadSchema: struct<c_custkey:bigint>

(39) Project
Output [1]: [c_custkey#X]
Input [2]: [c_custkey#X, c_mktsegment#X]

(40) Exchange
Input [1]: [c_custkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(41) Scan parquetdefault.orders
Output [4]: [o_orderkey#X, o_custkey#X, o_comment#X, o_orderdate#X]
Batched: true
Location: CatalogFileIndex [*]
PushedFilters: [IsNotNull(o_comment), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_comment:string>

(42) Filter
Input [4]: [o_orderkey#X, o_custkey#X, o_comment#X, o_orderdate#X]
Condition : ((isnotnull(o_comment#X) AND NOT o_comment#X LIKE %special%requests%) AND isnotnull(o_custkey#X))

(43) Project
Output [2]: [o_orderkey#X, o_custkey#X]
Input [4]: [o_orderkey#X, o_custkey#X, o_comment#X, o_orderdate#X]

(44) Exchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(45) ShuffledHashJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(46) Project
Output [2]: [c_custkey#X, o_orderkey#X]
Input [3]: [c_custkey#X, o_orderkey#X, o_custkey#X]

(47) HashAggregate
Input [2]: [c_custkey#X, o_orderkey#X]
Keys [1]: [c_custkey#X]
Functions [1]: [partial_count(o_orderkey#X)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_custkey#X, count#X]

(48) HashAggregate
Input [2]: [c_custkey#X, count#X]
Keys [1]: [c_custkey#X]
Functions [1]: [count(o_orderkey#X)]
Aggregate Attributes [1]: [count(o_orderkey#X)#X]
Results [1]: [count(o_orderkey#X)#X AS c_count#X]

(49) HashAggregate
Input [1]: [c_count#X]
Keys [1]: [c_count#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_count#X, count#X]

(50) Exchange
Input [2]: [c_count#X, count#X]
Arguments: hashpartitioning(c_count#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(51) HashAggregate
Input [2]: [c_count#X, count#X]
Keys [1]: [c_count#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [c_count#X, count(1)#X AS custdist#X]

(52) Exchange
Input [2]: [c_count#X, custdist#X]
Arguments: rangepartitioning(custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(53) Sort
Input [2]: [c_count#X, custdist#X]
Arguments: [custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST], true, 0

(54) AdaptiveSparkPlan
Output [2]: [c_count#X, custdist#X]
Arguments: isFinalPlan=true