== Physical Plan ==
AdaptiveSparkPlan (133)
+- == Final Plan ==
   VeloxColumnarToRowExec (81)
   +- ^ RegularHashAggregateExecTransformer (79)
      +- ^ InputIteratorTransformer (78)
         +- ShuffleQueryStage (76), Statistics(X)
            +- ColumnarExchange (75)
               +- ^ ProjectExecTransformer (73)
                  +- ^ FlushableHashAggregateExecTransformer (72)
                     +- ^ ProjectExecTransformer (71)
                        +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (70)
                           :- ^ InputIteratorTransformer (61)
                           :  +- ShuffleQueryStage (59), Statistics(X)
                           :     +- ColumnarExchange (58)
                           :        +- ^ ProjectExecTransformer (56)
                           :           +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (55)
                           :              :- ^ InputIteratorTransformer (46)
                           :              :  +- ShuffleQueryStage (44), Statistics(X)
                           :              :     +- ColumnarExchange (43)
                           :              :        +- ^ ProjectExecTransformer (41)
                           :              :           +- ^ ShuffledHashJoinExecTransformer Inner BuildLeft (40)
                           :              :              :- ^ InputIteratorTransformer (8)
                           :              :              :  +- ShuffleQueryStage (6), Statistics(X)
                           :              :              :     +- ColumnarExchange (5)
                           :              :              :        +- ^ ProjectExecTransformer (3)
                           :              :              :           +- ^ FilterExecTransformer (2)
                           :              :              :              +- ^ Scan parquet (1)
                           :              :              +- ^ InputIteratorTransformer (39)
                           :              :                 +- ShuffleQueryStage (37), Statistics(X)
                           :              :                    +- ColumnarExchange (36)
                           :              :                       +- ^ ProjectExecTransformer (34)
                           :              :                          +- ^ ShuffledHashJoinExecTransformer LeftAnti BuildRight (33)
                           :              :                             :- ^ ShuffledHashJoinExecTransformer LeftSemi BuildRight (24)
                           :              :                             :  :- ^ InputIteratorTransformer (16)
                           :              :                             :  :  +- ShuffleQueryStage (14), Statistics(X)
                           :              :                             :  :     +- ColumnarExchange (13)
                           :              :                             :  :        +- ^ ProjectExecTransformer (11)
                           :              :                             :  :           +- ^ FilterExecTransformer (10)
                           :              :                             :  :              +- ^ Scan parquet (9)
                           :              :                             :  +- ^ InputIteratorTransformer (23)
                           :              :                             :     +- ShuffleQueryStage (21), Statistics(X)
                           :              :                             :        +- ColumnarExchange (20)
                           :              :                             :           +- ^ ProjectExecTransformer (18)
                           :              :                             :              +- ^ Scan parquet (17)
                           :              :                             +- ^ InputIteratorTransformer (32)
                           :              :                                +- ShuffleQueryStage (30), Statistics(X)
                           :              :                                   +- ColumnarExchange (29)
                           :              :                                      +- ^ ProjectExecTransformer (27)
                           :              :                                         +- ^ FilterExecTransformer (26)
                           :              :                                            +- ^ Scan parquet (25)
                           :              +- ^ InputIteratorTransformer (54)
                           :                 +- ShuffleQueryStage (52), Statistics(X)
                           :                    +- ColumnarExchange (51)
                           :                       +- ^ ProjectExecTransformer (49)
                           :                          +- ^ FilterExecTransformer (48)
                           :                             +- ^ Scan parquet (47)
                           +- ^ InputIteratorTransformer (69)
                              +- ShuffleQueryStage (67), Statistics(X)
                                 +- ColumnarExchange (66)
                                    +- ^ ProjectExecTransformer (64)
                                       +- ^ FilterExecTransformer (63)
                                          +- ^ Scan parquet (62)
+- == Initial Plan ==
   TakeOrderedAndProject (132)
   +- HashAggregate (131)
      +- Exchange (130)
         +- HashAggregate (129)
            +- Project (128)
               +- ShuffledHashJoinExecTemp (127)
                  +- SortMergeJoin Inner (126)
                     :- Sort (120)
                     :  +- Exchange (119)
                     :     +- Project (118)
                     :        +- ShuffledHashJoinExecTemp (117)
                     :           +- SortMergeJoin Inner (116)
                     :              :- Sort (110)
                     :              :  +- Exchange (109)
                     :              :     +- Project (108)
                     :              :        +- ShuffledHashJoinExecTemp (107)
                     :              :           +- SortMergeJoin Inner (106)
                     :              :              :- Sort (85)
                     :              :              :  +- Exchange (84)
                     :              :              :     +- Filter (83)
                     :              :              :        +- Scan parquet (82)
                     :              :              +- Sort (105)
                     :              :                 +- Exchange (104)
                     :              :                    +- ShuffledHashJoinExecTemp (103)
                     :              :                       +- SortMergeJoin LeftAnti (102)
                     :              :                          :- Sort (96)
                     :              :                          :  +- ShuffledHashJoinExecTemp (95)
                     :              :                          :     +- SortMergeJoin LeftSemi (94)
                     :              :                          :        :- Sort (90)
                     :              :                          :        :  +- Exchange (89)
                     :              :                          :        :     +- Project (88)
                     :              :                          :        :        +- Filter (87)
                     :              :                          :        :           +- Scan parquet (86)
                     :              :                          :        +- Sort (93)
                     :              :                          :           +- Exchange (92)
                     :              :                          :              +- Scan parquet (91)
                     :              :                          +- Sort (101)
                     :              :                             +- Exchange (100)
                     :              :                                +- Project (99)
                     :              :                                   +- Filter (98)
                     :              :                                      +- Scan parquet (97)
                     :              +- Sort (115)
                     :                 +- Exchange (114)
                     :                    +- Project (113)
                     :                       +- Filter (112)
                     :                          +- Scan parquet (111)
                     +- Sort (125)
                        +- Exchange (124)
                           +- Project (123)
                              +- Filter (122)
                                 +- Scan parquet (121)


(1) Scan parquet
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(3) ProjectExecTransformer
Output [4]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(4) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: false

(5) ColumnarExchange
Input [4]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_name#X, s_nationkey#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: X

(7) InputAdapter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(8) InputIteratorTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(9) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(10) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(11) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(12) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(13) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(15) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(16) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(17) Scan parquet
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(18) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [2]: [l_orderkey#X, l_suppkey#X]

(19) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(20) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(21) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(22) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(23) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(24) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(25) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(26) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(27) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(28) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(29) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(30) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(31) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(32) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(33) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(34) ProjectExecTransformer
Output [3]: [hash(l_suppkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [2]: [l_orderkey#X, l_suppkey#X]

(35) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(36) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(37) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(38) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(39) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(40) ShuffledHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(41) ProjectExecTransformer
Output [4]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(42) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: false

(43) ColumnarExchange
Input [4]: [hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [s_name#X, s_nationkey#X, l_orderkey#X], [plan_id=X], [id=#X]

(44) ShuffleQueryStage
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: X

(45) InputAdapter
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]

(46) InputIteratorTransformer
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]

(47) Scan parquet
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(48) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderstatus#X]
Arguments: ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(49) ProjectExecTransformer
Output [2]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(50) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, o_orderkey#X]
Arguments: false

(51) ColumnarExchange
Input [2]: [hash_partition_key#X, o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X], [plan_id=X], [id=#X]

(52) ShuffleQueryStage
Output [1]: [o_orderkey#X]
Arguments: X

(53) InputAdapter
Input [1]: [o_orderkey#X]

(54) InputIteratorTransformer
Input [1]: [o_orderkey#X]

(55) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(56) ProjectExecTransformer
Output [3]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(57) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, s_nationkey#X]
Arguments: false

(58) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [s_name#X, s_nationkey#X], [plan_id=X], [id=#X]

(59) ShuffleQueryStage
Output [2]: [s_name#X, s_nationkey#X]
Arguments: X

(60) InputAdapter
Input [2]: [s_name#X, s_nationkey#X]

(61) InputIteratorTransformer
Input [2]: [s_name#X, s_nationkey#X]

(62) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(63) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(64) ProjectExecTransformer
Output [2]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(65) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: false

(66) ColumnarExchange
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X], [plan_id=X], [id=#X]

(67) ShuffleQueryStage
Output [1]: [n_nationkey#X]
Arguments: X

(68) InputAdapter
Input [1]: [n_nationkey#X]

(69) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(70) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(71) ProjectExecTransformer
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(72) FlushableHashAggregateExecTransformer
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(73) ProjectExecTransformer
Output [3]: [hash(s_name#X, 42) AS hash_partition_key#X, s_name#X, count#X]
Input [2]: [s_name#X, count#X]

(74) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: false

(75) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [s_name#X, count#X], [plan_id=X], [id=#X]

(76) ShuffleQueryStage
Output [2]: [s_name#X, count#X]
Arguments: X

(77) InputAdapter
Input [2]: [s_name#X, count#X]

(78) InputIteratorTransformer
Input [2]: [s_name#X, count#X]

(79) RegularHashAggregateExecTransformer
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(80) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, numwait#X]
Arguments: false

(81) VeloxColumnarToRowExec
Input [2]: [s_name#X, numwait#X]

(82) Scan parquet
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(83) Filter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(84) Exchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(85) Sort
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: [s_suppkey#X ASC NULLS FIRST], false, 0

(86) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(87) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(88) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(89) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(90) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(91) Scan parquet
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(92) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(93) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(94) SortMergeJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(95) ShuffledHashJoinExecTemp
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: BuildRight

(96) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(97) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(98) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(99) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(100) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(101) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(102) SortMergeJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(103) ShuffledHashJoinExecTemp
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: BuildRight

(104) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(105) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_suppkey#X ASC NULLS FIRST], false, 0

(106) SortMergeJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(107) ShuffledHashJoinExecTemp
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]
Arguments: BuildLeft

(108) Project
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(109) Exchange
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(110) Sort
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(111) Scan parquet
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(112) Filter
Input [2]: [o_orderkey#X, o_orderstatus#X]
Condition : ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(113) Project
Output [1]: [o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(114) Exchange
Input [1]: [o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(115) Sort
Input [1]: [o_orderkey#X]
Arguments: [o_orderkey#X ASC NULLS FIRST], false, 0

(116) SortMergeJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(117) ShuffledHashJoinExecTemp
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]
Arguments: BuildRight

(118) Project
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(119) Exchange
Input [2]: [s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(120) Sort
Input [2]: [s_name#X, s_nationkey#X]
Arguments: [s_nationkey#X ASC NULLS FIRST], false, 0

(121) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(122) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(123) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(124) Exchange
Input [1]: [n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(125) Sort
Input [1]: [n_nationkey#X]
Arguments: [n_nationkey#X ASC NULLS FIRST], false, 0

(126) SortMergeJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(127) ShuffledHashJoinExecTemp
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]
Arguments: BuildRight

(128) Project
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(129) HashAggregate
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(130) Exchange
Input [2]: [s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(131) HashAggregate
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(132) TakeOrderedAndProject
Input [2]: [s_name#X, numwait#X]
Arguments: X, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X]

(133) AdaptiveSparkPlan
Output [2]: [s_name#X, numwait#X]
Arguments: isFinalPlan=true