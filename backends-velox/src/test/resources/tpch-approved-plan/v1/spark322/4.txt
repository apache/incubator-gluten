== Physical Plan ==
AdaptiveSparkPlan (51)
+- == Final Plan ==
   VeloxColumnarToRowExec (35)
   +- ^ SortExecTransformer (33)
      +- ^ InputIteratorTransformer (32)
         +- ^ InputAdapter (31)
            +- ^ ShuffleQueryStage (30)
               +- ColumnarExchange (29)
                  +- ^ ProjectExecTransformer (27)
                     +- ^ RegularHashAggregateExecTransformer (26)
                        +- ^ InputIteratorTransformer (25)
                           +- ^ InputAdapter (24)
                              +- ^ ShuffleQueryStage (23)
                                 +- ColumnarExchange (22)
                                    +- ^ ProjectExecTransformer (20)
                                       +- ^ FlushableHashAggregateExecTransformer (19)
                                          +- ^ ProjectExecTransformer (18)
                                             +- ^ ShuffledHashJoinExecTransformer LeftSemi (17)
                                                :- ^ InputIteratorTransformer (8)
                                                :  +- ^ InputAdapter (7)
                                                :     +- ^ ShuffleQueryStage (6)
                                                :        +- ColumnarExchange (5)
                                                :           +- ^ ProjectExecTransformer (3)
                                                :              +- ^ FilterExecTransformer (2)
                                                :                 +- ^ Scan parquet (1)
                                                +- ^ InputIteratorTransformer (16)
                                                   +- ^ InputAdapter (15)
                                                      +- ^ ShuffleQueryStage (14)
                                                         +- ColumnarExchange (13)
                                                            +- ^ ProjectExecTransformer (11)
                                                               +- ^ FilterExecTransformer (10)
                                                                  +- ^ Scan parquet (9)
+- == Initial Plan ==
   Sort (50)
   +- Exchange (49)
      +- HashAggregate (48)
         +- Exchange (47)
            +- HashAggregate (46)
               +- Project (45)
                  +- ShuffledHashJoin LeftSemi BuildRight (44)
                     :- Exchange (39)
                     :  +- Project (38)
                     :     +- Filter (37)
                     :        +- Scan parquet (36)
                     +- Exchange (43)
                        +- Project (42)
                           +- Filter (41)
                              +- Scan parquet (40)


(1) Scan parquet
Output [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1993-07-01), LessThan(o_orderdate,1993-10-01)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date,o_orderpriority:string>

(2) FilterExecTransformer
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Arguments: ((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1993-07-01)) AND (o_orderdate#X < 1993-10-01))

(3) ProjectExecTransformer
Output [3]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]

(4) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Arguments: false

(5) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_orderpriority#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: 0

(7) InputAdapter
Input [2]: [o_orderkey#X, o_orderpriority#X]

(8) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_orderpriority#X]

(9) Scan parquet
Output [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date>

(10) FilterExecTransformer
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND (l_commitdate#X < l_receiptdate#X))

(11) ProjectExecTransformer
Output [2]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X]
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]

(12) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, l_orderkey#X]
Arguments: false

(13) ColumnarExchange
Input [2]: [hash_partition_key#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [1]: [l_orderkey#X]
Arguments: 1

(15) InputAdapter
Input [1]: [l_orderkey#X]

(16) InputIteratorTransformer
Input [1]: [l_orderkey#X]

(17) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(18) ProjectExecTransformer
Output [1]: [o_orderpriority#X]
Input [2]: [o_orderkey#X, o_orderpriority#X]

(19) FlushableHashAggregateExecTransformer
Input [1]: [o_orderpriority#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [o_orderpriority#X, count#X]

(20) ProjectExecTransformer
Output [3]: [hash(o_orderpriority#X, 42) AS hash_partition_key#X, o_orderpriority#X, count#X]
Input [2]: [o_orderpriority#X, count#X]

(21) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: false

(22) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: hashpartitioning(o_orderpriority#X, 1), ENSURE_REQUIREMENTS, [o_orderpriority#X, count#X], [plan_id=X], [id=#X]

(23) ShuffleQueryStage
Output [2]: [o_orderpriority#X, count#X]
Arguments: 2

(24) InputAdapter
Input [2]: [o_orderpriority#X, count#X]

(25) InputIteratorTransformer
Input [2]: [o_orderpriority#X, count#X]

(26) RegularHashAggregateExecTransformer
Input [2]: [o_orderpriority#X, count#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [o_orderpriority#X, count(1)#X]

(27) ProjectExecTransformer
Output [2]: [o_orderpriority#X, count(1)#X AS order_count#X]
Input [2]: [o_orderpriority#X, count(1)#X]

(28) WholeStageCodegenTransformer (X)
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: false

(29) ColumnarExchange
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: rangepartitioning(o_orderpriority#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(30) ShuffleQueryStage
Output [2]: [o_orderpriority#X, order_count#X]
Arguments: 3

(31) InputAdapter
Input [2]: [o_orderpriority#X, order_count#X]

(32) InputIteratorTransformer
Input [2]: [o_orderpriority#X, order_count#X]

(33) SortExecTransformer
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: [o_orderpriority#X ASC NULLS FIRST], true, 0

(34) WholeStageCodegenTransformer (X)
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: false

(35) VeloxColumnarToRowExec
Input [2]: [o_orderpriority#X, order_count#X]

(36) Scan parquet
Output [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1993-07-01), LessThan(o_orderdate,1993-10-01)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date,o_orderpriority:string>

(37) Filter
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Condition : ((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1993-07-01)) AND (o_orderdate#X < 1993-10-01))

(38) Project
Output [2]: [o_orderkey#X, o_orderpriority#X]
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]

(39) Exchange
Input [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(40) Scan parquet
Output [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date>

(41) Filter
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND (l_commitdate#X < l_receiptdate#X))

(42) Project
Output [1]: [l_orderkey#X]
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]

(43) Exchange
Input [1]: [l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(44) ShuffledHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(45) Project
Output [1]: [o_orderpriority#X]
Input [2]: [o_orderkey#X, o_orderpriority#X]

(46) HashAggregate
Input [1]: [o_orderpriority#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [o_orderpriority#X, count#X]

(47) Exchange
Input [2]: [o_orderpriority#X, count#X]
Arguments: hashpartitioning(o_orderpriority#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(48) HashAggregate
Input [2]: [o_orderpriority#X, count#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [o_orderpriority#X, count(1)#X AS order_count#X]

(49) Exchange
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: rangepartitioning(o_orderpriority#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(50) Sort
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: [o_orderpriority#X ASC NULLS FIRST], true, 0

(51) AdaptiveSparkPlan
Output [2]: [o_orderpriority#X, order_count#X]
Arguments: isFinalPlan=true