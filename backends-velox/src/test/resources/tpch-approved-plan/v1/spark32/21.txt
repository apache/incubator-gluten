== Physical Plan ==
AdaptiveSparkPlan (134)
+- == Final Plan ==
   VeloxColumnarToRowExec (82)
   +- TakeOrderedAndProjectExecTransformer (81)
      +- ^ RegularHashAggregateExecTransformer (79)
         +- ^ InputIteratorTransformer (78)
            +- ShuffleQueryStage (76)
               +- ColumnarExchange (75)
                  +- ^ ProjectExecTransformer (73)
                     +- ^ FlushableHashAggregateExecTransformer (72)
                        +- ^ ProjectExecTransformer (71)
                           +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (70)
                              :- ^ InputIteratorTransformer (61)
                              :  +- ShuffleQueryStage (59)
                              :     +- ColumnarExchange (58)
                              :        +- ^ ProjectExecTransformer (56)
                              :           +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (55)
                              :              :- ^ InputIteratorTransformer (46)
                              :              :  +- ShuffleQueryStage (44)
                              :              :     +- ColumnarExchange (43)
                              :              :        +- ^ ProjectExecTransformer (41)
                              :              :           +- ^ ShuffledHashJoinExecTransformer Inner BuildLeft (40)
                              :              :              :- ^ InputIteratorTransformer (8)
                              :              :              :  +- ShuffleQueryStage (6)
                              :              :              :     +- ColumnarExchange (5)
                              :              :              :        +- ^ ProjectExecTransformer (3)
                              :              :              :           +- ^ FilterExecTransformer (2)
                              :              :              :              +- ^ Scan parquet (1)
                              :              :              +- ^ InputIteratorTransformer (39)
                              :              :                 +- ShuffleQueryStage (37)
                              :              :                    +- ColumnarExchange (36)
                              :              :                       +- ^ ProjectExecTransformer (34)
                              :              :                          +- ^ ShuffledHashJoinExecTransformer LeftAnti BuildRight (33)
                              :              :                             :- ^ ShuffledHashJoinExecTransformer LeftSemi BuildRight (24)
                              :              :                             :  :- ^ InputIteratorTransformer (16)
                              :              :                             :  :  +- ShuffleQueryStage (14)
                              :              :                             :  :     +- ColumnarExchange (13)
                              :              :                             :  :        +- ^ ProjectExecTransformer (11)
                              :              :                             :  :           +- ^ FilterExecTransformer (10)
                              :              :                             :  :              +- ^ Scan parquet (9)
                              :              :                             :  +- ^ InputIteratorTransformer (23)
                              :              :                             :     +- ShuffleQueryStage (21)
                              :              :                             :        +- ColumnarExchange (20)
                              :              :                             :           +- ^ ProjectExecTransformer (18)
                              :              :                             :              +- ^ Scan parquet (17)
                              :              :                             +- ^ InputIteratorTransformer (32)
                              :              :                                +- ShuffleQueryStage (30)
                              :              :                                   +- ColumnarExchange (29)
                              :              :                                      +- ^ ProjectExecTransformer (27)
                              :              :                                         +- ^ FilterExecTransformer (26)
                              :              :                                            +- ^ Scan parquet (25)
                              :              +- ^ InputIteratorTransformer (54)
                              :                 +- ShuffleQueryStage (52)
                              :                    +- ColumnarExchange (51)
                              :                       +- ^ ProjectExecTransformer (49)
                              :                          +- ^ FilterExecTransformer (48)
                              :                             +- ^ Scan parquet (47)
                              +- ^ InputIteratorTransformer (69)
                                 +- ShuffleQueryStage (67)
                                    +- ColumnarExchange (66)
                                       +- ^ ProjectExecTransformer (64)
                                          +- ^ FilterExecTransformer (63)
                                             +- ^ Scan parquet (62)
+- == Initial Plan ==
   TakeOrderedAndProject (133)
   +- HashAggregate (132)
      +- Exchange (131)
         +- HashAggregate (130)
            +- Project (129)
               +- ShuffledHashJoinExecTemp (128)
                  +- SortMergeJoin Inner (127)
                     :- Sort (121)
                     :  +- Exchange (120)
                     :     +- Project (119)
                     :        +- ShuffledHashJoinExecTemp (118)
                     :           +- SortMergeJoin Inner (117)
                     :              :- Sort (111)
                     :              :  +- Exchange (110)
                     :              :     +- Project (109)
                     :              :        +- ShuffledHashJoinExecTemp (108)
                     :              :           +- SortMergeJoin Inner (107)
                     :              :              :- Sort (86)
                     :              :              :  +- Exchange (85)
                     :              :              :     +- Filter (84)
                     :              :              :        +- Scan parquet (83)
                     :              :              +- Sort (106)
                     :              :                 +- Exchange (105)
                     :              :                    +- ShuffledHashJoinExecTemp (104)
                     :              :                       +- SortMergeJoin LeftAnti (103)
                     :              :                          :- Sort (97)
                     :              :                          :  +- ShuffledHashJoinExecTemp (96)
                     :              :                          :     +- SortMergeJoin LeftSemi (95)
                     :              :                          :        :- Sort (91)
                     :              :                          :        :  +- Exchange (90)
                     :              :                          :        :     +- Project (89)
                     :              :                          :        :        +- Filter (88)
                     :              :                          :        :           +- Scan parquet (87)
                     :              :                          :        +- Sort (94)
                     :              :                          :           +- Exchange (93)
                     :              :                          :              +- Scan parquet (92)
                     :              :                          +- Sort (102)
                     :              :                             +- Exchange (101)
                     :              :                                +- Project (100)
                     :              :                                   +- Filter (99)
                     :              :                                      +- Scan parquet (98)
                     :              +- Sort (116)
                     :                 +- Exchange (115)
                     :                    +- Project (114)
                     :                       +- Filter (113)
                     :                          +- Scan parquet (112)
                     +- Sort (126)
                        +- Exchange (125)
                           +- Project (124)
                              +- Filter (123)
                                 +- Scan parquet (122)


(1) Scan parquet
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(3) ProjectExecTransformer
Output [4]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(4) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: false

(5) ColumnarExchange
Input [4]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_name#X, s_nationkey#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: X

(7) InputAdapter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(8) InputIteratorTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(9) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(10) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(11) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(12) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(13) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(15) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(16) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(17) Scan parquet
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(18) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [2]: [l_orderkey#X, l_suppkey#X]

(19) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(20) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(21) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(22) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(23) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(24) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(25) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(26) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(27) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(28) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(29) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(30) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(31) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(32) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(33) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(34) ProjectExecTransformer
Output [3]: [hash(l_suppkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [2]: [l_orderkey#X, l_suppkey#X]

(35) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(36) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [id=#X]

(37) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(38) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(39) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(40) ShuffledHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(41) ProjectExecTransformer
Output [4]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(42) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: false

(43) ColumnarExchange
Input [4]: [hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [s_name#X, s_nationkey#X, l_orderkey#X], [plan_id=X], [id=#X]

(44) ShuffleQueryStage
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: X

(45) InputAdapter
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]

(46) InputIteratorTransformer
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]

(47) Scan parquet
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(48) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderstatus#X]
Arguments: ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(49) ProjectExecTransformer
Output [2]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(50) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, o_orderkey#X]
Arguments: false

(51) ColumnarExchange
Input [2]: [hash_partition_key#X, o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X], [plan_id=X], [id=#X]

(52) ShuffleQueryStage
Output [1]: [o_orderkey#X]
Arguments: X

(53) InputAdapter
Input [1]: [o_orderkey#X]

(54) InputIteratorTransformer
Input [1]: [o_orderkey#X]

(55) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(56) ProjectExecTransformer
Output [3]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(57) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, s_nationkey#X]
Arguments: false

(58) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [s_name#X, s_nationkey#X], [plan_id=X], [id=#X]

(59) ShuffleQueryStage
Output [2]: [s_name#X, s_nationkey#X]
Arguments: X

(60) InputAdapter
Input [2]: [s_name#X, s_nationkey#X]

(61) InputIteratorTransformer
Input [2]: [s_name#X, s_nationkey#X]

(62) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(63) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(64) ProjectExecTransformer
Output [2]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(65) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: false

(66) ColumnarExchange
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X], [plan_id=X], [id=#X]

(67) ShuffleQueryStage
Output [1]: [n_nationkey#X]
Arguments: X

(68) InputAdapter
Input [1]: [n_nationkey#X]

(69) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(70) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(71) ProjectExecTransformer
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(72) FlushableHashAggregateExecTransformer
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(73) ProjectExecTransformer
Output [3]: [hash(s_name#X, 42) AS hash_partition_key#X, s_name#X, count#X]
Input [2]: [s_name#X, count#X]

(74) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: false

(75) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [s_name#X, count#X], [plan_id=X], [id=#X]

(76) ShuffleQueryStage
Output [2]: [s_name#X, count#X]
Arguments: X

(77) InputAdapter
Input [2]: [s_name#X, count#X]

(78) InputIteratorTransformer
Input [2]: [s_name#X, count#X]

(79) RegularHashAggregateExecTransformer
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(80) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, numwait#X]
Arguments: false

(81) TakeOrderedAndProjectExecTransformer
Input [2]: [s_name#X, numwait#X]
Arguments: X, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X], 0

(82) VeloxColumnarToRowExec
Input [2]: [s_name#X, numwait#X]

(83) Scan parquet
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(84) Filter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(85) Exchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(86) Sort
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: [s_suppkey#X ASC NULLS FIRST], false, 0

(87) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(88) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(89) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(90) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(91) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(92) Scan parquet
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(93) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(94) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(95) SortMergeJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(96) ShuffledHashJoinExecTemp
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: BuildRight

(97) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(98) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(99) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(100) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(101) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(102) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(103) SortMergeJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(104) ShuffledHashJoinExecTemp
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: BuildRight

(105) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(106) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_suppkey#X ASC NULLS FIRST], false, 0

(107) SortMergeJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(108) ShuffledHashJoinExecTemp
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]
Arguments: BuildLeft

(109) Project
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(110) Exchange
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(111) Sort
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(112) Scan parquet
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(113) Filter
Input [2]: [o_orderkey#X, o_orderstatus#X]
Condition : ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(114) Project
Output [1]: [o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(115) Exchange
Input [1]: [o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(116) Sort
Input [1]: [o_orderkey#X]
Arguments: [o_orderkey#X ASC NULLS FIRST], false, 0

(117) SortMergeJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(118) ShuffledHashJoinExecTemp
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]
Arguments: BuildRight

(119) Project
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(120) Exchange
Input [2]: [s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(121) Sort
Input [2]: [s_name#X, s_nationkey#X]
Arguments: [s_nationkey#X ASC NULLS FIRST], false, 0

(122) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(123) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(124) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(125) Exchange
Input [1]: [n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(126) Sort
Input [1]: [n_nationkey#X]
Arguments: [n_nationkey#X ASC NULLS FIRST], false, 0

(127) SortMergeJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(128) ShuffledHashJoinExecTemp
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]
Arguments: BuildRight

(129) Project
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(130) HashAggregate
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(131) Exchange
Input [2]: [s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(132) HashAggregate
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(133) TakeOrderedAndProject
Input [2]: [s_name#X, numwait#X]
Arguments: X, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X]

(134) AdaptiveSparkPlan
Output [2]: [s_name#X, numwait#X]
Arguments: isFinalPlan=true