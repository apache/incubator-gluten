== Physical Plan ==
AdaptiveSparkPlan (49)
+- == Final Plan ==
   VeloxColumnarToRowExec (36)
   +- ^ SortExecTransformer (34)
      +- ^ InputIteratorTransformer (33)
         +- ShuffleQueryStage (31), Statistics(X)
            +- ColumnarExchange (30)
               +- VeloxAppendBatches (29)
                  +- ^ RegularHashAggregateExecTransformer (27)
                     +- ^ InputIteratorTransformer (26)
                        +- ShuffleQueryStage (24), Statistics(X)
                           +- ColumnarExchange (23)
                              +- ^ ProjectExecTransformer (21)
                                 +- ^ FlushableHashAggregateExecTransformer (20)
                                    +- ^ ProjectExecTransformer (19)
                                       +- ^ ShuffledHashJoinExecTransformer LeftAnti BuildRight (18)
                                          :- ^ InputIteratorTransformer (9)
                                          :  +- ShuffleQueryStage (7), Statistics(X)
                                          :     +- ColumnarExchange (6)
                                          :        +- VeloxAppendBatches (5)
                                          :           +- ^ ProjectExecTransformer (3)
                                          :              +- ^ FilterExecTransformer (2)
                                          :                 +- ^ Scan parquet (1)
                                          +- ^ InputIteratorTransformer (17)
                                             +- ShuffleQueryStage (15), Statistics(X)
                                                +- ColumnarExchange (14)
                                                   +- VeloxAppendBatches (13)
                                                      +- ^ ProjectExecTransformer (11)
                                                         +- ^ Scan parquet (10)
+- == Initial Plan ==
   Sort (48)
   +- Exchange (47)
      +- HashAggregate (46)
         +- Exchange (45)
            +- HashAggregate (44)
               +- Project (43)
                  +- ShuffledHashJoin LeftAnti BuildRight (42)
                     :- Exchange (39)
                     :  +- Filter (38)
                     :     +- Scan parquet (37)
                     +- Exchange (41)
                        +- Scan parquet (40)


(1) Scan parquet
Output [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_acctbal)]
ReadSchema: struct<c_custkey:bigint,c_phone:string,c_acctbal:decimal(12,2)>

(2) FilterExecTransformer
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: ((isnotnull(c_acctbal#X) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17)) AND (cast(c_acctbal#X as decimal(16,6)) > Subquery subquery#X, [id=#X]))

(3) ProjectExecTransformer
Output [4]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(4) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: false

(5) VeloxAppendBatches
Input [4]: [hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: X

(6) ColumnarExchange
Input [4]: [hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_phone#X, c_acctbal#X], [plan_id=X], [id=#X]

(7) ShuffleQueryStage
Output [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: X

(8) InputAdapter
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(9) InputIteratorTransformer
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(10) Scan parquet
Output [1]: [o_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<o_custkey:bigint>

(11) ProjectExecTransformer
Output [2]: [hash(o_custkey#X, 42) AS hash_partition_key#X, o_custkey#X]
Input [1]: [o_custkey#X]

(12) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, o_custkey#X]
Arguments: false

(13) VeloxAppendBatches
Input [2]: [hash_partition_key#X, o_custkey#X]
Arguments: X

(14) ColumnarExchange
Input [2]: [hash_partition_key#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [o_custkey#X], [plan_id=X], [id=#X]

(15) ShuffleQueryStage
Output [1]: [o_custkey#X]
Arguments: X

(16) InputAdapter
Input [1]: [o_custkey#X]

(17) InputIteratorTransformer
Input [1]: [o_custkey#X]

(18) ShuffledHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: LeftAnti
Join condition: None

(19) ProjectExecTransformer
Output [2]: [substring(c_phone#X, 1, 2) AS cntrycode#X, c_acctbal#X]
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(20) FlushableHashAggregateExecTransformer
Input [2]: [cntrycode#X, c_acctbal#X]
Keys [1]: [cntrycode#X]
Functions [2]: [partial_count(1), partial_sum(c_acctbal#X)]
Aggregate Attributes [3]: [count#X, sum#X, isEmpty#X]
Results [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(21) ProjectExecTransformer
Output [5]: [hash(cntrycode#X, 42) AS hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(22) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: false

(23) ColumnarExchange
Input [5]: [hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(cntrycode#X, 1), ENSURE_REQUIREMENTS, [cntrycode#X, count#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(24) ShuffleQueryStage
Output [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: X

(25) InputAdapter
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(26) InputIteratorTransformer
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(27) RegularHashAggregateExecTransformer
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Keys [1]: [cntrycode#X]
Functions [2]: [count(1), sum(c_acctbal#X)]
Aggregate Attributes [2]: [count(1)#X, sum(c_acctbal#X)#X]
Results [3]: [cntrycode#X, count(1)#X AS numcust#X, sum(c_acctbal#X)#X AS totacctbal#X]

(28) WholeStageCodegenTransformer (X)
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: false

(29) VeloxAppendBatches
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: X

(30) ColumnarExchange
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: rangepartitioning(cntrycode#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(31) ShuffleQueryStage
Output [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: X

(32) InputAdapter
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

(33) InputIteratorTransformer
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

(34) SortExecTransformer
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: [cntrycode#X ASC NULLS FIRST], true, 0

(35) WholeStageCodegenTransformer (X)
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: false

(36) VeloxColumnarToRowExec
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

(37) Scan parquet
Output [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_acctbal)]
ReadSchema: struct<c_custkey:bigint,c_phone:string,c_acctbal:decimal(12,2)>

(38) Filter
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Condition : ((isnotnull(c_acctbal#X) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17)) AND (cast(c_acctbal#X as decimal(16,6)) > Subquery subquery#X, [id=#X]))

(39) Exchange
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(40) Scan parquet
Output [1]: [o_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<o_custkey:bigint>

(41) Exchange
Input [1]: [o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(42) ShuffledHashJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: LeftAnti
Join condition: None

(43) Project
Output [2]: [substring(c_phone#X, 1, 2) AS cntrycode#X, c_acctbal#X]
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(44) HashAggregate
Input [2]: [cntrycode#X, c_acctbal#X]
Keys [1]: [cntrycode#X]
Functions [2]: [partial_count(1), partial_sum(c_acctbal#X)]
Aggregate Attributes [3]: [count#X, sum#X, isEmpty#X]
Results [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(45) Exchange
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(cntrycode#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(46) HashAggregate
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Keys [1]: [cntrycode#X]
Functions [2]: [count(1), sum(c_acctbal#X)]
Aggregate Attributes [2]: [count(1)#X, sum(c_acctbal#X)#X]
Results [3]: [cntrycode#X, count(1)#X AS numcust#X, sum(c_acctbal#X)#X AS totacctbal#X]

(47) Exchange
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: rangepartitioning(cntrycode#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(48) Sort
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: [cntrycode#X ASC NULLS FIRST], true, 0

(49) AdaptiveSparkPlan
Output [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (68)
+- == Final Plan ==
   VeloxColumnarToRowExec (61)
   +- ^ RegularHashAggregateExecTransformer (59)
      +- ^ InputIteratorTransformer (58)
         +- ShuffleQueryStage (56), Statistics(X)
            +- ColumnarExchange (55)
               +- ^ FlushableHashAggregateExecTransformer (53)
                  +- ^ ProjectExecTransformer (52)
                     +- ^ FilterExecTransformer (51)
                        +- ^ Scan parquet (50)
+- == Initial Plan ==
   HashAggregate (67)
   +- Exchange (66)
      +- HashAggregate (65)
         +- Project (64)
            +- Filter (63)
               +- Scan parquet (62)


(50) Scan parquet
Output [2]: [c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_acctbal), GreaterThan(c_acctbal,0.00)]
ReadSchema: struct<c_phone:string,c_acctbal:decimal(12,2)>

(51) FilterExecTransformer
Input [2]: [c_phone#X, c_acctbal#X]
Arguments: ((isnotnull(c_acctbal#X) AND (c_acctbal#X > 0.00)) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17))

(52) ProjectExecTransformer
Output [1]: [c_acctbal#X]
Input [2]: [c_phone#X, c_acctbal#X]

(53) FlushableHashAggregateExecTransformer
Input [1]: [c_acctbal#X]
Keys: []
Functions [1]: [partial_avg(c_acctbal#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [2]: [sum#X, count#X]

(54) WholeStageCodegenTransformer (X)
Input [2]: [sum#X, count#X]
Arguments: false

(55) ColumnarExchange
Input [2]: [sum#X, count#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(56) ShuffleQueryStage
Output [2]: [sum#X, count#X]
Arguments: X

(57) InputAdapter
Input [2]: [sum#X, count#X]

(58) InputIteratorTransformer
Input [2]: [sum#X, count#X]

(59) RegularHashAggregateExecTransformer
Input [2]: [sum#X, count#X]
Keys: []
Functions [1]: [avg(c_acctbal#X)]
Aggregate Attributes [1]: [avg(c_acctbal#X)#X]
Results [1]: [avg(c_acctbal#X)#X AS avg(c_acctbal)#X]

(60) WholeStageCodegenTransformer (X)
Input [1]: [avg(c_acctbal)#X]
Arguments: false

(61) VeloxColumnarToRowExec
Input [1]: [avg(c_acctbal)#X]

(62) Scan parquet
Output [2]: [c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_acctbal), GreaterThan(c_acctbal,0.00)]
ReadSchema: struct<c_phone:string,c_acctbal:decimal(12,2)>

(63) Filter
Input [2]: [c_phone#X, c_acctbal#X]
Condition : ((isnotnull(c_acctbal#X) AND (c_acctbal#X > 0.00)) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17))

(64) Project
Output [1]: [c_acctbal#X]
Input [2]: [c_phone#X, c_acctbal#X]

(65) HashAggregate
Input [1]: [c_acctbal#X]
Keys: []
Functions [1]: [partial_avg(c_acctbal#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [2]: [sum#X, count#X]

(66) Exchange
Input [2]: [sum#X, count#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X]

(67) HashAggregate
Input [2]: [sum#X, count#X]
Keys: []
Functions [1]: [avg(c_acctbal#X)]
Aggregate Attributes [1]: [avg(c_acctbal#X)#X]
Results [1]: [avg(c_acctbal#X)#X AS avg(c_acctbal)#X]

(68) AdaptiveSparkPlan
Output [1]: [avg(c_acctbal)#X]
Arguments: isFinalPlan=true

Subquery:2 Hosting operator id = 1 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (68)
+- == Final Plan ==
   VeloxColumnarToRowExec (61)
   +- ^ RegularHashAggregateExecTransformer (59)
      +- ^ InputIteratorTransformer (58)
         +- ShuffleQueryStage (56), Statistics(X)
            +- ColumnarExchange (55)
               +- ^ FlushableHashAggregateExecTransformer (53)
                  +- ^ ProjectExecTransformer (52)
                     +- ^ FilterExecTransformer (51)
                        +- ^ Scan parquet (50)
+- == Initial Plan ==
   HashAggregate (67)
   +- Exchange (66)
      +- HashAggregate (65)
         +- Project (64)
            +- Filter (63)
               +- Scan parquet (62)