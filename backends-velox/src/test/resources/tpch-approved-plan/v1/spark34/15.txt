== Physical Plan ==
AdaptiveSparkPlan (42)
+- == Final Plan ==
   VeloxColumnarToRowExec (27)
   +- AQEShuffleRead (26)
      +- ShuffleQueryStage (25), Statistics(X)
         +- ColumnarExchange (24)
            +- ^ ProjectExecTransformer (22)
               +- ^ ShuffledHashJoinExecTransformer Inner (21)
                  :- ^ InputIteratorTransformer (8)
                  :  +- ^ InputAdapter (7)
                  :     +- ^ ShuffleQueryStage (6), Statistics(X)
                  :        +- ColumnarExchange (5)
                  :           +- ^ ProjectExecTransformer (3)
                  :              +- ^ FilterExecTransformer (2)
                  :                 +- ^ Scan parquet (1)
                  +- ^ FilterExecTransformer (20)
                     +- ^ RegularHashAggregateExecTransformer (19)
                        +- ^ InputIteratorTransformer (18)
                           +- ^ InputAdapter (17)
                              +- ^ ShuffleQueryStage (16), Statistics(X)
                                 +- ColumnarExchange (15)
                                    +- ^ ProjectExecTransformer (13)
                                       +- ^ FlushableHashAggregateExecTransformer (12)
                                          +- ^ ProjectExecTransformer (11)
                                             +- ^ FilterExecTransformer (10)
                                                +- ^ Scan parquet (9)
+- == Initial Plan ==
   Sort (41)
   +- Exchange (40)
      +- Project (39)
         +- ShuffledHashJoin Inner BuildLeft (38)
            :- Exchange (30)
            :  +- Filter (29)
            :     +- Scan parquet (28)
            +- Filter (37)
               +- HashAggregate (36)
                  +- Exchange (35)
                     +- HashAggregate (34)
                        +- Project (33)
                           +- Filter (32)
                              +- Scan parquet (31)


(1) Scan parquet
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_phone:string>

(2) FilterExecTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Arguments: isnotnull(s_suppkey#X)

(3) ProjectExecTransformer
Output [5]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]

(4) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Arguments: false

(5) ColumnarExchange
Input [5]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_name#X, s_address#X, s_phone#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Arguments: X

(7) InputAdapter
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]

(8) InputIteratorTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]

(9) Scan parquet
Output [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01), IsNotNull(l_suppkey)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(10) FilterExecTransformer
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: (((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1996-01-01)) AND (l_shipdate#X < 1996-04-01)) AND isnotnull(l_suppkey#X))

(11) ProjectExecTransformer
Output [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, (l_extendedprice#X * (1 - l_discount#X)) AS _pre_X#X]
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(12) FlushableHashAggregateExecTransformer
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, _pre_X#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [partial_sum(_pre_X#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_suppkey#X, sum#X, isEmpty#X]

(13) ProjectExecTransformer
Output [4]: [hash(l_suppkey#X, 42) AS hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]

(14) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: false

(15) ColumnarExchange
Input [4]: [hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [l_suppkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(16) ShuffleQueryStage
Output [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: X

(17) InputAdapter
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]

(18) InputIteratorTransformer
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]

(19) RegularHashAggregateExecTransformer
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))#X]
Results [2]: [l_suppkey#X AS supplier_no#X, sum((l_extendedprice#X * (1 - l_discount#X)))#X AS total_revenue#X]

(20) FilterExecTransformer
Input [2]: [supplier_no#X, total_revenue#X]
Arguments: (isnotnull(total_revenue#X) AND (total_revenue#X = Subquery subquery#X, [id=#X]))

(21) ShuffledHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [supplier_no#X]
Join type: Inner
Join condition: None

(22) ProjectExecTransformer
Output [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Input [6]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, supplier_no#X, total_revenue#X]

(23) WholeStageCodegenTransformer (X)
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: false

(24) ColumnarExchange
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: rangepartitioning(s_suppkey#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(25) ShuffleQueryStage
Output [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: X

(26) AQEShuffleRead
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: local

(27) VeloxColumnarToRowExec
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]

(28) Scan parquet
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_phone:string>

(29) Filter
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Condition : isnotnull(s_suppkey#X)

(30) Exchange
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(31) Scan parquet
Output [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01), IsNotNull(l_suppkey)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(32) Filter
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Condition : (((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1996-01-01)) AND (l_shipdate#X < 1996-04-01)) AND isnotnull(l_suppkey#X))

(33) Project
Output [3]: [l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(34) HashAggregate
Input [3]: [l_suppkey#X, l_extendedprice#X, l_discount#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [partial_sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_suppkey#X, sum#X, isEmpty#X]

(35) Exchange
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(36) HashAggregate
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))#X]
Results [2]: [l_suppkey#X AS supplier_no#X, sum((l_extendedprice#X * (1 - l_discount#X)))#X AS total_revenue#X]

(37) Filter
Input [2]: [supplier_no#X, total_revenue#X]
Condition : (isnotnull(total_revenue#X) AND (total_revenue#X = Subquery subquery#X, [id=#X]))

(38) ShuffledHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [supplier_no#X]
Join type: Inner
Join condition: None

(39) Project
Output [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Input [6]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, supplier_no#X, total_revenue#X]

(40) Exchange
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: rangepartitioning(s_suppkey#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(41) Sort
Input [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: [s_suppkey#X ASC NULLS FIRST], true, 0

(42) AdaptiveSparkPlan
Output [5]: [s_suppkey#X, s_name#X, s_address#X, s_phone#X, total_revenue#X]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 20 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (67)
+- == Final Plan ==
   VeloxColumnarToRowExec (58)
   +- ^ RegularHashAggregateExecTransformer (56)
      +- ^ RegularHashAggregateExecTransformer (55)
         +- ^ ProjectExecTransformer (54)
            +- ^ RegularHashAggregateExecTransformer (53)
               +- ^ InputIteratorTransformer (52)
                  +- ^ InputAdapter (51)
                     +- ^ ShuffleQueryStage (50), Statistics(X)
                        +- ColumnarExchange (49)
                           +- ^ ProjectExecTransformer (47)
                              +- ^ FlushableHashAggregateExecTransformer (46)
                                 +- ^ ProjectExecTransformer (45)
                                    +- ^ FilterExecTransformer (44)
                                       +- ^ Scan parquet (43)
+- == Initial Plan ==
   HashAggregate (66)
   +- HashAggregate (65)
      +- HashAggregate (64)
         +- Exchange (63)
            +- HashAggregate (62)
               +- Project (61)
                  +- Filter (60)
                     +- Scan parquet (59)


(43) Scan parquet
Output [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(44) FilterExecTransformer
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: ((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1996-01-01)) AND (l_shipdate#X < 1996-04-01))

(45) ProjectExecTransformer
Output [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, (l_extendedprice#X * (1 - l_discount#X)) AS _pre_X#X]
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(46) FlushableHashAggregateExecTransformer
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, _pre_X#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [partial_sum(_pre_X#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_suppkey#X, sum#X, isEmpty#X]

(47) ProjectExecTransformer
Output [4]: [hash(l_suppkey#X, 42) AS hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]

(48) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: false

(49) ColumnarExchange
Input [4]: [hash_partition_key#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [l_suppkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(50) ShuffleQueryStage
Output [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: X

(51) InputAdapter
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]

(52) InputIteratorTransformer
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]

(53) RegularHashAggregateExecTransformer
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))#X]
Results [2]: [l_suppkey#X, sum((l_extendedprice#X * (1 - l_discount#X)))#X]

(54) ProjectExecTransformer
Output [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))#X AS total_revenue#X]
Input [2]: [l_suppkey#X, sum((l_extendedprice#X * (1 - l_discount#X)))#X]

(55) RegularHashAggregateExecTransformer
Input [1]: [total_revenue#X]
Keys: []
Functions [1]: [partial_max(total_revenue#X)]
Aggregate Attributes [1]: [max#X]
Results [1]: [max#X]

(56) RegularHashAggregateExecTransformer
Input [1]: [max#X]
Keys: []
Functions [1]: [max(total_revenue#X)]
Aggregate Attributes [1]: [max(total_revenue#X)#X]
Results [1]: [max(total_revenue#X)#X AS max(total_revenue)#X]

(57) WholeStageCodegenTransformer (X)
Input [1]: [max(total_revenue)#X]
Arguments: false

(58) VeloxColumnarToRowExec
Input [1]: [max(total_revenue)#X]

(59) Scan parquet
Output [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1996-01-01), LessThan(l_shipdate,1996-04-01)]
ReadSchema: struct<l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(60) Filter
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Condition : ((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1996-01-01)) AND (l_shipdate#X < 1996-04-01))

(61) Project
Output [3]: [l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [4]: [l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(62) HashAggregate
Input [3]: [l_suppkey#X, l_extendedprice#X, l_discount#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [partial_sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [l_suppkey#X, sum#X, isEmpty#X]

(63) Exchange
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(64) HashAggregate
Input [3]: [l_suppkey#X, sum#X, isEmpty#X]
Keys [1]: [l_suppkey#X]
Functions [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))#X]
Results [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))#X AS total_revenue#X]

(65) HashAggregate
Input [1]: [total_revenue#X]
Keys: []
Functions [1]: [partial_max(total_revenue#X)]
Aggregate Attributes [1]: [max#X]
Results [1]: [max#X]

(66) HashAggregate
Input [1]: [max#X]
Keys: []
Functions [1]: [max(total_revenue#X)]
Aggregate Attributes [1]: [max(total_revenue#X)#X]
Results [1]: [max(total_revenue#X)#X AS max(total_revenue)#X]

(67) AdaptiveSparkPlan
Output [1]: [max(total_revenue)#X]
Arguments: isFinalPlan=true