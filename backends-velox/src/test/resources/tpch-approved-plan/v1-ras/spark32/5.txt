== Physical Plan ==
AdaptiveSparkPlan (146)
+- == Final Plan ==
   VeloxColumnarToRowExec (106)
   +- ^ SortExecTransformer (104)
      +- ^ InputIteratorTransformer (103)
         +- ShuffleQueryStage (101)
            +- ColumnarExchange (100)
               +- VeloxAppendBatches (99)
                  +- ^ RegularHashAggregateExecTransformer (97)
                     +- ^ InputIteratorTransformer (96)
                        +- ShuffleQueryStage (94)
                           +- ColumnarExchange (93)
                              +- VeloxAppendBatches (92)
                                 +- ^ ProjectExecTransformer (90)
                                    +- ^ FlushableHashAggregateExecTransformer (89)
                                       +- ^ ProjectExecTransformer (88)
                                          +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (87)
                                             :- ^ InputIteratorTransformer (77)
                                             :  +- ShuffleQueryStage (75)
                                             :     +- ColumnarExchange (74)
                                             :        +- VeloxAppendBatches (73)
                                             :           +- ^ ProjectExecTransformer (71)
                                             :              +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (70)
                                             :                 :- ^ InputIteratorTransformer (60)
                                             :                 :  +- ShuffleQueryStage (58)
                                             :                 :     +- ColumnarExchange (57)
                                             :                 :        +- VeloxAppendBatches (56)
                                             :                 :           +- ^ ProjectExecTransformer (54)
                                             :                 :              +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (53)
                                             :                 :                 :- ^ InputIteratorTransformer (43)
                                             :                 :                 :  +- ShuffleQueryStage (41)
                                             :                 :                 :     +- ColumnarExchange (40)
                                             :                 :                 :        +- VeloxAppendBatches (39)
                                             :                 :                 :           +- ^ ProjectExecTransformer (37)
                                             :                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner BuildLeft (36)
                                             :                 :                 :                 :- ^ InputIteratorTransformer (26)
                                             :                 :                 :                 :  +- ShuffleQueryStage (24)
                                             :                 :                 :                 :     +- ColumnarExchange (23)
                                             :                 :                 :                 :        +- VeloxAppendBatches (22)
                                             :                 :                 :                 :           +- ^ ProjectExecTransformer (20)
                                             :                 :                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner BuildLeft (19)
                                             :                 :                 :                 :                 :- ^ InputIteratorTransformer (9)
                                             :                 :                 :                 :                 :  +- ShuffleQueryStage (7)
                                             :                 :                 :                 :                 :     +- ColumnarExchange (6)
                                             :                 :                 :                 :                 :        +- VeloxAppendBatches (5)
                                             :                 :                 :                 :                 :           +- ^ ProjectExecTransformer (3)
                                             :                 :                 :                 :                 :              +- ^ NoopFilter (2)
                                             :                 :                 :                 :                 :                 +- ^ Scan parquet (1)
                                             :                 :                 :                 :                 +- ^ InputIteratorTransformer (18)
                                             :                 :                 :                 :                    +- ShuffleQueryStage (16)
                                             :                 :                 :                 :                       +- ColumnarExchange (15)
                                             :                 :                 :                 :                          +- VeloxAppendBatches (14)
                                             :                 :                 :                 :                             +- ^ ProjectExecTransformer (12)
                                             :                 :                 :                 :                                +- ^ NoopFilter (11)
                                             :                 :                 :                 :                                   +- ^ Scan parquet (10)
                                             :                 :                 :                 +- ^ InputIteratorTransformer (35)
                                             :                 :                 :                    +- ShuffleQueryStage (33)
                                             :                 :                 :                       +- ColumnarExchange (32)
                                             :                 :                 :                          +- VeloxAppendBatches (31)
                                             :                 :                 :                             +- ^ ProjectExecTransformer (29)
                                             :                 :                 :                                +- ^ NoopFilter (28)
                                             :                 :                 :                                   +- ^ Scan parquet (27)
                                             :                 :                 +- ^ InputIteratorTransformer (52)
                                             :                 :                    +- ShuffleQueryStage (50)
                                             :                 :                       +- ColumnarExchange (49)
                                             :                 :                          +- VeloxAppendBatches (48)
                                             :                 :                             +- ^ ProjectExecTransformer (46)
                                             :                 :                                +- ^ NoopFilter (45)
                                             :                 :                                   +- ^ Scan parquet (44)
                                             :                 +- ^ InputIteratorTransformer (69)
                                             :                    +- ShuffleQueryStage (67)
                                             :                       +- ColumnarExchange (66)
                                             :                          +- VeloxAppendBatches (65)
                                             :                             +- ^ ProjectExecTransformer (63)
                                             :                                +- ^ NoopFilter (62)
                                             :                                   +- ^ Scan parquet (61)
                                             +- ^ InputIteratorTransformer (86)
                                                +- ShuffleQueryStage (84)
                                                   +- ColumnarExchange (83)
                                                      +- VeloxAppendBatches (82)
                                                         +- ^ ProjectExecTransformer (80)
                                                            +- ^ NoopFilter (79)
                                                               +- ^ Scan parquet (78)
+- == Initial Plan ==
   Sort (145)
   +- Exchange (144)
      +- HashAggregate (143)
         +- Exchange (142)
            +- HashAggregate (141)
               +- Project (140)
                  +- ShuffledHashJoin Inner BuildRight (139)
                     :- Exchange (134)
                     :  +- Project (133)
                     :     +- ShuffledHashJoin Inner BuildRight (132)
                     :        :- Exchange (128)
                     :        :  +- Project (127)
                     :        :     +- ShuffledHashJoin Inner BuildRight (126)
                     :        :        :- Exchange (122)
                     :        :        :  +- Project (121)
                     :        :        :     +- ShuffledHashJoin Inner BuildRight (120)
                     :        :        :        :- Exchange (116)
                     :        :        :        :  +- Project (115)
                     :        :        :        :     +- ShuffledHashJoin Inner BuildLeft (114)
                     :        :        :        :        :- Exchange (109)
                     :        :        :        :        :  +- Filter (108)
                     :        :        :        :        :     +- Scan parquet (107)
                     :        :        :        :        +- Exchange (113)
                     :        :        :        :           +- Project (112)
                     :        :        :        :              +- Filter (111)
                     :        :        :        :                 +- Scan parquet (110)
                     :        :        :        +- Exchange (119)
                     :        :        :           +- Filter (118)
                     :        :        :              +- Scan parquet (117)
                     :        :        +- Exchange (125)
                     :        :           +- Filter (124)
                     :        :              +- Scan parquet (123)
                     :        +- Exchange (131)
                     :           +- Filter (130)
                     :              +- Scan parquet (129)
                     +- Exchange (138)
                        +- Project (137)
                           +- Filter (136)
                              +- Scan parquet (135)


(1) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(2) NoopFilter
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: [c_custkey#X, c_nationkey#X]

(3) ProjectExecTransformer
Output [3]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_nationkey#X]
Input [2]: [c_custkey#X, c_nationkey#X]

(4) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_custkey#X, c_nationkey#X]
Arguments: false

(5) VeloxAppendBatches
Input [3]: [hash_partition_key#X, c_custkey#X, c_nationkey#X]
Arguments: X

(6) ColumnarExchange
Input [3]: [hash_partition_key#X, c_custkey#X, c_nationkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_nationkey#X], [plan_id=X], [id=#X]

(7) ShuffleQueryStage
Output [2]: [c_custkey#X, c_nationkey#X]
Arguments: X

(8) InputAdapter
Input [2]: [c_custkey#X, c_nationkey#X]

(9) InputIteratorTransformer
Input [2]: [c_custkey#X, c_nationkey#X]

(10) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1994-01-01), LessThan(o_orderdate,1995-01-01), IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(11) NoopFilter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(12) ProjectExecTransformer
Output [3]: [hash(o_custkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(13) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: false

(14) VeloxAppendBatches
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: X

(15) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_custkey#X], [plan_id=X], [id=#X]

(16) ShuffleQueryStage
Output [2]: [o_orderkey#X, o_custkey#X]
Arguments: X

(17) InputAdapter
Input [2]: [o_orderkey#X, o_custkey#X]

(18) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_custkey#X]

(19) ShuffledHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(20) ProjectExecTransformer
Output [3]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, c_nationkey#X, o_orderkey#X]
Input [4]: [c_custkey#X, c_nationkey#X, o_orderkey#X, o_custkey#X]

(21) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_nationkey#X, o_orderkey#X]
Arguments: false

(22) VeloxAppendBatches
Input [3]: [hash_partition_key#X, c_nationkey#X, o_orderkey#X]
Arguments: X

(23) ColumnarExchange
Input [3]: [hash_partition_key#X, c_nationkey#X, o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [c_nationkey#X, o_orderkey#X], [plan_id=X], [id=#X]

(24) ShuffleQueryStage
Output [2]: [c_nationkey#X, o_orderkey#X]
Arguments: X

(25) InputAdapter
Input [2]: [c_nationkey#X, o_orderkey#X]

(26) InputIteratorTransformer
Input [2]: [c_nationkey#X, o_orderkey#X]

(27) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(28) NoopFilter
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(29) ProjectExecTransformer
Output [5]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(30) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: false

(31) VeloxAppendBatches
Input [5]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: X

(32) ColumnarExchange
Input [5]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X], [plan_id=X], [id=#X]

(33) ShuffleQueryStage
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: X

(34) InputAdapter
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(35) InputIteratorTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(36) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(37) ProjectExecTransformer
Output [5]: [hash(l_suppkey#X, c_nationkey#X, 42) AS hash_partition_key#X, c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [c_nationkey#X, o_orderkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(38) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: false

(39) VeloxAppendBatches
Input [5]: [hash_partition_key#X, c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: X

(40) ColumnarExchange
Input [5]: [hash_partition_key#X, c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_suppkey#X, c_nationkey#X, 1), ENSURE_REQUIREMENTS, [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X], [plan_id=X], [id=#X]

(41) ShuffleQueryStage
Output [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: X

(42) InputAdapter
Input [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(43) InputIteratorTransformer
Input [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(44) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(45) NoopFilter
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: [s_suppkey#X, s_nationkey#X]

(46) ProjectExecTransformer
Output [3]: [hash(s_suppkey#X, s_nationkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Input [2]: [s_suppkey#X, s_nationkey#X]

(47) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: false

(48) VeloxAppendBatches
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: X

(49) ColumnarExchange
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, s_nationkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_nationkey#X], [plan_id=X], [id=#X]

(50) ShuffleQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: X

(51) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(52) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(53) ShuffledHashJoinExecTransformer
Left keys [2]: [l_suppkey#X, c_nationkey#X]
Right keys [2]: [s_suppkey#X, s_nationkey#X]
Join condition: None

(54) ProjectExecTransformer
Output [4]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(55) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: false

(56) VeloxAppendBatches
Input [4]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: X

(57) ColumnarExchange
Input [4]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [l_extendedprice#X, l_discount#X, s_nationkey#X], [plan_id=X], [id=#X]

(58) ShuffleQueryStage
Output [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: X

(59) InputAdapter
Input [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]

(60) InputIteratorTransformer
Input [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]

(61) Scan parquet
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(62) NoopFilter
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: [n_nationkey#X, n_name#X, n_regionkey#X]

(63) ProjectExecTransformer
Output [4]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X, n_name#X, n_regionkey#X]
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]

(64) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: false

(65) VeloxAppendBatches
Input [4]: [hash_partition_key#X, n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: X

(66) ColumnarExchange
Input [4]: [hash_partition_key#X, n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X, n_name#X, n_regionkey#X], [plan_id=X], [id=#X]

(67) ShuffleQueryStage
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: X

(68) InputAdapter
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]

(69) InputIteratorTransformer
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]

(70) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(71) ProjectExecTransformer
Output [5]: [hash(n_regionkey#X, 42) AS hash_partition_key#X, l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Input [6]: [l_extendedprice#X, l_discount#X, s_nationkey#X, n_nationkey#X, n_name#X, n_regionkey#X]

(72) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Arguments: false

(73) VeloxAppendBatches
Input [5]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Arguments: X

(74) ColumnarExchange
Input [5]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Arguments: hashpartitioning(n_regionkey#X, 1), ENSURE_REQUIREMENTS, [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X], [plan_id=X], [id=#X]

(75) ShuffleQueryStage
Output [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Arguments: X

(76) InputAdapter
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]

(77) InputIteratorTransformer
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]

(78) Scan parquet
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(79) NoopFilter
Input [2]: [r_regionkey#X, r_name#X]
Arguments: [r_regionkey#X, r_name#X]

(80) ProjectExecTransformer
Output [2]: [hash(r_regionkey#X, 42) AS hash_partition_key#X, r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(81) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, r_regionkey#X]
Arguments: false

(82) VeloxAppendBatches
Input [2]: [hash_partition_key#X, r_regionkey#X]
Arguments: X

(83) ColumnarExchange
Input [2]: [hash_partition_key#X, r_regionkey#X]
Arguments: hashpartitioning(r_regionkey#X, 1), ENSURE_REQUIREMENTS, [r_regionkey#X], [plan_id=X], [id=#X]

(84) ShuffleQueryStage
Output [1]: [r_regionkey#X]
Arguments: X

(85) InputAdapter
Input [1]: [r_regionkey#X]

(86) InputIteratorTransformer
Input [1]: [r_regionkey#X]

(87) ShuffledHashJoinExecTransformer
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(88) ProjectExecTransformer
Output [4]: [l_extendedprice#X, l_discount#X, n_name#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) AS _pre_X#X]
Input [5]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X, r_regionkey#X]

(89) FlushableHashAggregateExecTransformer
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, _pre_X#X]
Keys [1]: [n_name#X]
Functions [1]: [partial_sum(_pre_X#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [n_name#X, sum#X, isEmpty#X]

(90) ProjectExecTransformer
Output [4]: [hash(n_name#X, 42) AS hash_partition_key#X, n_name#X, sum#X, isEmpty#X]
Input [3]: [n_name#X, sum#X, isEmpty#X]

(91) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, n_name#X, sum#X, isEmpty#X]
Arguments: false

(92) VeloxAppendBatches
Input [4]: [hash_partition_key#X, n_name#X, sum#X, isEmpty#X]
Arguments: X

(93) ColumnarExchange
Input [4]: [hash_partition_key#X, n_name#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(n_name#X, 1), ENSURE_REQUIREMENTS, [n_name#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(94) ShuffleQueryStage
Output [3]: [n_name#X, sum#X, isEmpty#X]
Arguments: X

(95) InputAdapter
Input [3]: [n_name#X, sum#X, isEmpty#X]

(96) InputIteratorTransformer
Input [3]: [n_name#X, sum#X, isEmpty#X]

(97) RegularHashAggregateExecTransformer
Input [3]: [n_name#X, sum#X, isEmpty#X]
Keys [1]: [n_name#X]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))#X]
Results [2]: [n_name#X, sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))#X AS revenue#X]

(98) WholeStageCodegenTransformer (X)
Input [2]: [n_name#X, revenue#X]
Arguments: false

(99) VeloxAppendBatches
Input [2]: [n_name#X, revenue#X]
Arguments: X

(100) ColumnarExchange
Input [2]: [n_name#X, revenue#X]
Arguments: rangepartitioning(revenue#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(101) ShuffleQueryStage
Output [2]: [n_name#X, revenue#X]
Arguments: X

(102) InputAdapter
Input [2]: [n_name#X, revenue#X]

(103) InputIteratorTransformer
Input [2]: [n_name#X, revenue#X]

(104) SortExecTransformer
Input [2]: [n_name#X, revenue#X]
Arguments: [revenue#X DESC NULLS LAST], true, 0

(105) WholeStageCodegenTransformer (X)
Input [2]: [n_name#X, revenue#X]
Arguments: false

(106) VeloxColumnarToRowExec
Input [2]: [n_name#X, revenue#X]

(107) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(108) Filter
Input [2]: [c_custkey#X, c_nationkey#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(109) Exchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(110) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1994-01-01), LessThan(o_orderdate,1995-01-01), IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(111) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Condition : ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1994-01-01)) AND (o_orderdate#X < 1995-01-01)) AND isnotnull(o_custkey#X)) AND isnotnull(o_orderkey#X))

(112) Project
Output [2]: [o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(113) Exchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(114) ShuffledHashJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(115) Project
Output [2]: [c_nationkey#X, o_orderkey#X]
Input [4]: [c_custkey#X, c_nationkey#X, o_orderkey#X, o_custkey#X]

(116) Exchange
Input [2]: [c_nationkey#X, o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(117) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(118) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Condition : (isnotnull(l_orderkey#X) AND isnotnull(l_suppkey#X))

(119) Exchange
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(120) ShuffledHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(121) Project
Output [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [c_nationkey#X, o_orderkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(122) Exchange
Input [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_suppkey#X, c_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(123) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(124) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(125) Exchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(126) ShuffledHashJoin
Left keys [2]: [l_suppkey#X, c_nationkey#X]
Right keys [2]: [s_suppkey#X, s_nationkey#X]
Join condition: None

(127) Project
Output [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(128) Exchange
Input [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(129) Scan parquet
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(130) Filter
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Condition : (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(131) Exchange
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(132) ShuffledHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(133) Project
Output [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Input [6]: [l_extendedprice#X, l_discount#X, s_nationkey#X, n_nationkey#X, n_name#X, n_regionkey#X]

(134) Exchange
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Arguments: hashpartitioning(n_regionkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(135) Scan parquet
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(136) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = ASIA)) AND isnotnull(r_regionkey#X))

(137) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(138) Exchange
Input [1]: [r_regionkey#X]
Arguments: hashpartitioning(r_regionkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(139) ShuffledHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(140) Project
Output [3]: [l_extendedprice#X, l_discount#X, n_name#X]
Input [5]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X, r_regionkey#X]

(141) HashAggregate
Input [3]: [l_extendedprice#X, l_discount#X, n_name#X]
Keys [1]: [n_name#X]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [n_name#X, sum#X, isEmpty#X]

(142) Exchange
Input [3]: [n_name#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(n_name#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(143) HashAggregate
Input [3]: [n_name#X, sum#X, isEmpty#X]
Keys [1]: [n_name#X]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))#X]
Results [2]: [n_name#X, sum(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true))#X AS revenue#X]

(144) Exchange
Input [2]: [n_name#X, revenue#X]
Arguments: rangepartitioning(revenue#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(145) Sort
Input [2]: [n_name#X, revenue#X]
Arguments: [revenue#X DESC NULLS LAST], true, 0

(146) AdaptiveSparkPlan
Output [2]: [n_name#X, revenue#X]
Arguments: isFinalPlan=true