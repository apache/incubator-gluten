== Physical Plan ==
AdaptiveSparkPlan (56)
+- == Final Plan ==
   VeloxColumnarToRow (39)
   +- ^ SortExecTransformer (37)
      +- ^ InputIteratorTransformer (36)
         +- ShuffleQueryStage (34), Statistics(X)
            +- ColumnarExchange (33)
               +- VeloxResizeBatches (32)
                  +- ^ RegularHashAggregateExecTransformer (30)
                     +- ^ InputIteratorTransformer (29)
                        +- ShuffleQueryStage (27), Statistics(X)
                           +- ColumnarExchange (26)
                              +- VeloxResizeBatches (25)
                                 +- ^ ProjectExecTransformer (23)
                                    +- ^ FlushableHashAggregateExecTransformer (22)
                                       +- ^ ProjectExecTransformer (21)
                                          +- ^ ProjectExecTransformer (20)
                                             +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (19)
                                                :- ^ InputIteratorTransformer (9)
                                                :  +- ShuffleQueryStage (7), Statistics(X)
                                                :     +- ColumnarExchange (6)
                                                :        +- VeloxResizeBatches (5)
                                                :           +- ^ ProjectExecTransformer (3)
                                                :              +- ^ FilterExecTransformer (2)
                                                :                 +- ^ ScanTransformer parquet  (1)
                                                +- ^ InputIteratorTransformer (18)
                                                   +- ShuffleQueryStage (16), Statistics(X)
                                                      +- ColumnarExchange (15)
                                                         +- VeloxResizeBatches (14)
                                                            +- ^ ProjectExecTransformer (12)
                                                               +- ^ FilterExecTransformer (11)
                                                                  +- ^ ScanTransformer parquet  (10)
+- == Initial Plan ==
   Sort (55)
   +- Exchange (54)
      +- HashAggregate (53)
         +- Exchange (52)
            +- HashAggregate (51)
               +- Project (50)
                  +- SortMergeJoin Inner (49)
                     :- Sort (43)
                     :  +- Exchange (42)
                     :     +- Filter (41)
                     :        +- Scan parquet (40)
                     +- Sort (48)
                        +- Exchange (47)
                           +- Project (46)
                              +- Filter (45)
                                 +- Scan parquet (44)


(1) ScanTransformer parquet 
Output [2]: [o_orderkey#X, o_orderpriority#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderpriority:string>

(2) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: isnotnull(o_orderkey#X)

(3) ProjectExecTransformer
Output [3]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Input [2]: [o_orderkey#X, o_orderpriority#X]

(4) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Arguments: false

(5) VeloxResizeBatches
Input [3]: [hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Arguments: X, X

(6) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_orderpriority#X], [plan_id=X], [shuffle_writer_type=hash]

(7) ShuffleQueryStage
Output [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: X

(8) InputAdapter
Input [2]: [o_orderkey#X, o_orderpriority#X]

(9) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_orderpriority#X]

(10) ScanTransformer parquet 
Output [5]: [l_orderkey#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipmode#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate), IsNotNull(l_shipdate), In(l_shipmode, [MAIL,SHIP]), GreaterThanOrEqual(l_receiptdate,1994-01-01), LessThan(l_receiptdate,1995-01-01), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_shipdate:date,l_commitdate:date,l_receiptdate:date,l_shipmode:string>

(11) FilterExecTransformer
Input [5]: [l_orderkey#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipmode#X]
Arguments: ((((((((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND isnotnull(l_shipdate#X)) AND l_shipmode#X IN (MAIL,SHIP)) AND (l_commitdate#X < l_receiptdate#X)) AND (l_shipdate#X < l_commitdate#X)) AND (l_receiptdate#X >= 1994-01-01)) AND (l_receiptdate#X < 1995-01-01)) AND isnotnull(l_orderkey#X))

(12) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_shipmode#X]
Input [5]: [l_orderkey#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipmode#X]

(13) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_shipmode#X]
Arguments: false

(14) VeloxResizeBatches
Input [3]: [hash_partition_key#X, l_orderkey#X, l_shipmode#X]
Arguments: X, X

(15) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_shipmode#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_shipmode#X], [plan_id=X], [shuffle_writer_type=hash]

(16) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_shipmode#X]
Arguments: X

(17) InputAdapter
Input [2]: [l_orderkey#X, l_shipmode#X]

(18) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_shipmode#X]

(19) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(20) ProjectExecTransformer
Output [3]: [l_shipmode#X, (o_orderpriority#X = 2-HIGH) AS (o_orderpriority#X = 2-HIGH)#X, (o_orderpriority#X = 1-URGENT) AS (o_orderpriority#X = 1-URGENT)#X]
Input [4]: [o_orderkey#X, o_orderpriority#X, l_orderkey#X, l_shipmode#X]

(21) ProjectExecTransformer
Output [3]: [l_shipmode#X, CASE WHEN ((o_orderpriority#X = 1-URGENT)#X OR (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END AS _pre_X#X, CASE WHEN (NOT (o_orderpriority#X = 1-URGENT)#X AND NOT (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END AS _pre_X#X]
Input [3]: [l_shipmode#X, (o_orderpriority#X = 2-HIGH)#X, (o_orderpriority#X = 1-URGENT)#X]

(22) FlushableHashAggregateExecTransformer
Input [3]: [l_shipmode#X, _pre_X#X, _pre_X#X]
Keys [1]: [l_shipmode#X]
Functions [2]: [partial_sum(_pre_X#X), partial_sum(_pre_X#X)]
Aggregate Attributes [2]: [sum#X, sum#X]
Results [3]: [l_shipmode#X, sum#X, sum#X]

(23) ProjectExecTransformer
Output [4]: [hash(l_shipmode#X, 42) AS hash_partition_key#X, l_shipmode#X, sum#X, sum#X]
Input [3]: [l_shipmode#X, sum#X, sum#X]

(24) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_shipmode#X, sum#X, sum#X]
Arguments: false

(25) VeloxResizeBatches
Input [4]: [hash_partition_key#X, l_shipmode#X, sum#X, sum#X]
Arguments: X, X

(26) ColumnarExchange
Input [4]: [hash_partition_key#X, l_shipmode#X, sum#X, sum#X]
Arguments: hashpartitioning(l_shipmode#X, 1), ENSURE_REQUIREMENTS, [l_shipmode#X, sum#X, sum#X], [plan_id=X], [shuffle_writer_type=hash]

(27) ShuffleQueryStage
Output [3]: [l_shipmode#X, sum#X, sum#X]
Arguments: X

(28) InputAdapter
Input [3]: [l_shipmode#X, sum#X, sum#X]

(29) InputIteratorTransformer
Input [3]: [l_shipmode#X, sum#X, sum#X]

(30) RegularHashAggregateExecTransformer
Input [3]: [l_shipmode#X, sum#X, sum#X]
Keys [1]: [l_shipmode#X]
Functions [2]: [sum(CASE WHEN ((o_orderpriority#X = 1-URGENT)#X OR (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END), sum(CASE WHEN (NOT (o_orderpriority#X = 1-URGENT)#X AND NOT (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)]
Aggregate Attributes [2]: [sum(CASE WHEN ((o_orderpriority#X = 1-URGENT)#X OR (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)#X, sum(CASE WHEN (NOT (o_orderpriority#X = 1-URGENT)#X AND NOT (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)#X]
Results [3]: [l_shipmode#X, sum(CASE WHEN ((o_orderpriority#X = 1-URGENT)#X OR (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)#X AS high_line_count#X, sum(CASE WHEN (NOT (o_orderpriority#X = 1-URGENT)#X AND NOT (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)#X AS low_line_count#X]

(31) WholeStageCodegenTransformer (X)
Input [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]
Arguments: false

(32) VeloxResizeBatches
Input [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]
Arguments: X, X

(33) ColumnarExchange
Input [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]
Arguments: rangepartitioning(l_shipmode#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [shuffle_writer_type=hash]

(34) ShuffleQueryStage
Output [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]
Arguments: X

(35) InputAdapter
Input [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]

(36) InputIteratorTransformer
Input [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]

(37) SortExecTransformer
Input [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]
Arguments: [l_shipmode#X ASC NULLS FIRST], true, 0

(38) WholeStageCodegenTransformer (X)
Input [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]
Arguments: false

(39) VeloxColumnarToRow
Input [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]

(40) Scan parquet
Output [2]: [o_orderkey#X, o_orderpriority#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderpriority:string>

(41) Filter
Input [2]: [o_orderkey#X, o_orderpriority#X]
Condition : isnotnull(o_orderkey#X)

(42) Exchange
Input [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(43) Sort
Input [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: [o_orderkey#X ASC NULLS FIRST], false, 0

(44) Scan parquet
Output [5]: [l_orderkey#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipmode#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate), IsNotNull(l_shipdate), In(l_shipmode, [MAIL,SHIP]), GreaterThanOrEqual(l_receiptdate,1994-01-01), LessThan(l_receiptdate,1995-01-01), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_shipdate:date,l_commitdate:date,l_receiptdate:date,l_shipmode:string>

(45) Filter
Input [5]: [l_orderkey#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipmode#X]
Condition : ((((((((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND isnotnull(l_shipdate#X)) AND l_shipmode#X IN (MAIL,SHIP)) AND (l_commitdate#X < l_receiptdate#X)) AND (l_shipdate#X < l_commitdate#X)) AND (l_receiptdate#X >= 1994-01-01)) AND (l_receiptdate#X < 1995-01-01)) AND isnotnull(l_orderkey#X))

(46) Project
Output [2]: [l_orderkey#X, l_shipmode#X]
Input [5]: [l_orderkey#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipmode#X]

(47) Exchange
Input [2]: [l_orderkey#X, l_shipmode#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(48) Sort
Input [2]: [l_orderkey#X, l_shipmode#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(49) SortMergeJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: None

(50) Project
Output [3]: [l_shipmode#X, (o_orderpriority#X = 2-HIGH) AS (o_orderpriority#X = 2-HIGH)#X, (o_orderpriority#X = 1-URGENT) AS (o_orderpriority#X = 1-URGENT)#X]
Input [4]: [o_orderkey#X, o_orderpriority#X, l_orderkey#X, l_shipmode#X]

(51) HashAggregate
Input [3]: [l_shipmode#X, (o_orderpriority#X = 2-HIGH)#X, (o_orderpriority#X = 1-URGENT)#X]
Keys [1]: [l_shipmode#X]
Functions [2]: [partial_sum(CASE WHEN ((o_orderpriority#X = 1-URGENT)#X OR (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (NOT (o_orderpriority#X = 1-URGENT)#X AND NOT (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)]
Aggregate Attributes [2]: [sum#X, sum#X]
Results [3]: [l_shipmode#X, sum#X, sum#X]

(52) Exchange
Input [3]: [l_shipmode#X, sum#X, sum#X]
Arguments: hashpartitioning(l_shipmode#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(53) HashAggregate
Input [3]: [l_shipmode#X, sum#X, sum#X]
Keys [1]: [l_shipmode#X]
Functions [2]: [sum(CASE WHEN ((o_orderpriority#X = 1-URGENT)#X OR (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END), sum(CASE WHEN (NOT (o_orderpriority#X = 1-URGENT)#X AND NOT (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)]
Aggregate Attributes [2]: [sum(CASE WHEN ((o_orderpriority#X = 1-URGENT)#X OR (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)#X, sum(CASE WHEN (NOT (o_orderpriority#X = 1-URGENT)#X AND NOT (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)#X]
Results [3]: [l_shipmode#X, sum(CASE WHEN ((o_orderpriority#X = 1-URGENT)#X OR (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)#X AS high_line_count#X, sum(CASE WHEN (NOT (o_orderpriority#X = 1-URGENT)#X AND NOT (o_orderpriority#X = 2-HIGH)#X) THEN 1 ELSE 0 END)#X AS low_line_count#X]

(54) Exchange
Input [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]
Arguments: rangepartitioning(l_shipmode#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(55) Sort
Input [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]
Arguments: [l_shipmode#X ASC NULLS FIRST], true, 0

(56) AdaptiveSparkPlan
Output [3]: [l_shipmode#X, high_line_count#X, low_line_count#X]
Arguments: isFinalPlan=true