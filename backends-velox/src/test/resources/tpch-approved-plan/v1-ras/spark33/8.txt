== Physical Plan ==
AdaptiveSparkPlan (169)
+- == Final Plan ==
   VeloxColumnarToRowExec (117)
   +- ^ SortExecTransformer (115)
      +- ^ InputIteratorTransformer (114)
         +- ^ InputAdapter (113)
            +- ^ ShuffleQueryStage (112), Statistics(X)
               +- ColumnarExchange (111)
                  +- ^ ProjectExecTransformer (109)
                     +- ^ RegularHashAggregateExecTransformer (108)
                        +- ^ InputIteratorTransformer (107)
                           +- ^ InputAdapter (106)
                              +- ^ ShuffleQueryStage (105), Statistics(X)
                                 +- ColumnarExchange (104)
                                    +- ^ ProjectExecTransformer (102)
                                       +- ^ FlushableHashAggregateExecTransformer (101)
                                          +- ^ ProjectExecTransformer (100)
                                             +- ^ ShuffledHashJoinExecTransformer Inner (99)
                                                :- ^ InputIteratorTransformer (91)
                                                :  +- ^ InputAdapter (90)
                                                :     +- ^ ShuffleQueryStage (89), Statistics(X)
                                                :        +- ColumnarExchange (88)
                                                :           +- ^ ProjectExecTransformer (86)
                                                :              +- ^ ShuffledHashJoinExecTransformer Inner (85)
                                                :                 :- ^ InputIteratorTransformer (77)
                                                :                 :  +- ^ InputAdapter (76)
                                                :                 :     +- ^ ShuffleQueryStage (75), Statistics(X)
                                                :                 :        +- ColumnarExchange (74)
                                                :                 :           +- ^ ProjectExecTransformer (72)
                                                :                 :              +- ^ ShuffledHashJoinExecTransformer Inner (71)
                                                :                 :                 :- ^ InputIteratorTransformer (63)
                                                :                 :                 :  +- ^ InputAdapter (62)
                                                :                 :                 :     +- ^ ShuffleQueryStage (61), Statistics(X)
                                                :                 :                 :        +- ColumnarExchange (60)
                                                :                 :                 :           +- ^ ProjectExecTransformer (58)
                                                :                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner (57)
                                                :                 :                 :                 :- ^ InputIteratorTransformer (49)
                                                :                 :                 :                 :  +- ^ InputAdapter (48)
                                                :                 :                 :                 :     +- ^ ShuffleQueryStage (47), Statistics(X)
                                                :                 :                 :                 :        +- ColumnarExchange (46)
                                                :                 :                 :                 :           +- ^ ProjectExecTransformer (44)
                                                :                 :                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner (43)
                                                :                 :                 :                 :                 :- ^ InputIteratorTransformer (35)
                                                :                 :                 :                 :                 :  +- ^ InputAdapter (34)
                                                :                 :                 :                 :                 :     +- ^ ShuffleQueryStage (33), Statistics(X)
                                                :                 :                 :                 :                 :        +- ColumnarExchange (32)
                                                :                 :                 :                 :                 :           +- ^ ProjectExecTransformer (30)
                                                :                 :                 :                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner (29)
                                                :                 :                 :                 :                 :                 :- ^ InputIteratorTransformer (21)
                                                :                 :                 :                 :                 :                 :  +- ^ InputAdapter (20)
                                                :                 :                 :                 :                 :                 :     +- ^ ShuffleQueryStage (19), Statistics(X)
                                                :                 :                 :                 :                 :                 :        +- ColumnarExchange (18)
                                                :                 :                 :                 :                 :                 :           +- ^ ProjectExecTransformer (16)
                                                :                 :                 :                 :                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner (15)
                                                :                 :                 :                 :                 :                 :                 :- ^ InputIteratorTransformer (7)
                                                :                 :                 :                 :                 :                 :                 :  +- ^ InputAdapter (6)
                                                :                 :                 :                 :                 :                 :                 :     +- ^ ShuffleQueryStage (5), Statistics(X)
                                                :                 :                 :                 :                 :                 :                 :        +- ColumnarExchange (4)
                                                :                 :                 :                 :                 :                 :                 :           +- ^ ProjectExecTransformer (2)
                                                :                 :                 :                 :                 :                 :                 :              +- ^ Scan parquet (1)
                                                :                 :                 :                 :                 :                 :                 +- ^ InputIteratorTransformer (14)
                                                :                 :                 :                 :                 :                 :                    +- ^ InputAdapter (13)
                                                :                 :                 :                 :                 :                 :                       +- ^ ShuffleQueryStage (12), Statistics(X)
                                                :                 :                 :                 :                 :                 :                          +- ColumnarExchange (11)
                                                :                 :                 :                 :                 :                 :                             +- ^ ProjectExecTransformer (9)
                                                :                 :                 :                 :                 :                 :                                +- ^ Scan parquet (8)
                                                :                 :                 :                 :                 :                 +- ^ InputIteratorTransformer (28)
                                                :                 :                 :                 :                 :                    +- ^ InputAdapter (27)
                                                :                 :                 :                 :                 :                       +- ^ ShuffleQueryStage (26), Statistics(X)
                                                :                 :                 :                 :                 :                          +- ColumnarExchange (25)
                                                :                 :                 :                 :                 :                             +- ^ ProjectExecTransformer (23)
                                                :                 :                 :                 :                 :                                +- ^ Scan parquet (22)
                                                :                 :                 :                 :                 +- ^ InputIteratorTransformer (42)
                                                :                 :                 :                 :                    +- ^ InputAdapter (41)
                                                :                 :                 :                 :                       +- ^ ShuffleQueryStage (40), Statistics(X)
                                                :                 :                 :                 :                          +- ColumnarExchange (39)
                                                :                 :                 :                 :                             +- ^ ProjectExecTransformer (37)
                                                :                 :                 :                 :                                +- ^ Scan parquet (36)
                                                :                 :                 :                 +- ^ InputIteratorTransformer (56)
                                                :                 :                 :                    +- ^ InputAdapter (55)
                                                :                 :                 :                       +- ^ ShuffleQueryStage (54), Statistics(X)
                                                :                 :                 :                          +- ColumnarExchange (53)
                                                :                 :                 :                             +- ^ ProjectExecTransformer (51)
                                                :                 :                 :                                +- ^ Scan parquet (50)
                                                :                 :                 +- ^ InputIteratorTransformer (70)
                                                :                 :                    +- ^ InputAdapter (69)
                                                :                 :                       +- ^ ShuffleQueryStage (68), Statistics(X)
                                                :                 :                          +- ColumnarExchange (67)
                                                :                 :                             +- ^ ProjectExecTransformer (65)
                                                :                 :                                +- ^ Scan parquet (64)
                                                :                 +- ^ InputIteratorTransformer (84)
                                                :                    +- ^ InputAdapter (83)
                                                :                       +- ^ ShuffleQueryStage (82), Statistics(X)
                                                :                          +- ColumnarExchange (81)
                                                :                             +- ^ ProjectExecTransformer (79)
                                                :                                +- ^ Scan parquet (78)
                                                +- ^ InputIteratorTransformer (98)
                                                   +- ^ InputAdapter (97)
                                                      +- ^ ShuffleQueryStage (96), Statistics(X)
                                                         +- ColumnarExchange (95)
                                                            +- ^ ProjectExecTransformer (93)
                                                               +- ^ Scan parquet (92)
+- == Initial Plan ==
   Sort (168)
   +- Exchange (167)
      +- HashAggregate (166)
         +- Exchange (165)
            +- HashAggregate (164)
               +- Project (163)
                  +- ShuffledHashJoin Inner BuildRight (162)
                     :- Exchange (157)
                     :  +- Project (156)
                     :     +- ShuffledHashJoin Inner BuildRight (155)
                     :        :- Exchange (151)
                     :        :  +- Project (150)
                     :        :     +- ShuffledHashJoin Inner BuildRight (149)
                     :        :        :- Exchange (145)
                     :        :        :  +- Project (144)
                     :        :        :     +- ShuffledHashJoin Inner BuildRight (143)
                     :        :        :        :- Exchange (139)
                     :        :        :        :  +- Project (138)
                     :        :        :        :     +- ShuffledHashJoin Inner BuildRight (137)
                     :        :        :        :        :- Exchange (133)
                     :        :        :        :        :  +- Project (132)
                     :        :        :        :        :     +- ShuffledHashJoin Inner BuildRight (131)
                     :        :        :        :        :        :- Exchange (127)
                     :        :        :        :        :        :  +- Project (126)
                     :        :        :        :        :        :     +- ShuffledHashJoin Inner BuildLeft (125)
                     :        :        :        :        :        :        :- Exchange (121)
                     :        :        :        :        :        :        :  +- Project (120)
                     :        :        :        :        :        :        :     +- Filter (119)
                     :        :        :        :        :        :        :        +- Scan parquet (118)
                     :        :        :        :        :        :        +- Exchange (124)
                     :        :        :        :        :        :           +- Filter (123)
                     :        :        :        :        :        :              +- Scan parquet (122)
                     :        :        :        :        :        +- Exchange (130)
                     :        :        :        :        :           +- Filter (129)
                     :        :        :        :        :              +- Scan parquet (128)
                     :        :        :        :        +- Exchange (136)
                     :        :        :        :           +- Filter (135)
                     :        :        :        :              +- Scan parquet (134)
                     :        :        :        +- Exchange (142)
                     :        :        :           +- Filter (141)
                     :        :        :              +- Scan parquet (140)
                     :        :        +- Exchange (148)
                     :        :           +- Filter (147)
                     :        :              +- Scan parquet (146)
                     :        +- Exchange (154)
                     :           +- Filter (153)
                     :              +- Scan parquet (152)
                     +- Exchange (161)
                        +- Project (160)
                           +- Filter (159)
                              +- Scan parquet (158)


(1) Scan parquet
Output [2]: [p_partkey#X, p_type#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_type), EqualTo(p_type,ECONOMY ANODIZED STEEL), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string>

(2) ProjectExecTransformer
Output [2]: [hash(p_partkey#X, 42) AS hash_partition_key#X, p_partkey#X]
Input [2]: [p_partkey#X, p_type#X]

(3) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, p_partkey#X]
Arguments: false

(4) ColumnarExchange
Input [2]: [hash_partition_key#X, p_partkey#X]
Arguments: hashpartitioning(p_partkey#X, 1), ENSURE_REQUIREMENTS, [p_partkey#X], [plan_id=X], [id=#X]

(5) ShuffleQueryStage
Output [1]: [p_partkey#X]
Arguments: X

(6) InputAdapter
Input [1]: [p_partkey#X]

(7) InputIteratorTransformer
Input [1]: [p_partkey#X]

(8) Scan parquet
Output [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(9) ProjectExecTransformer
Output [6]: [hash(l_partkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(10) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: false

(11) ColumnarExchange
Input [6]: [hash_partition_key#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_partkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X], [plan_id=X], [id=#X]

(12) ShuffleQueryStage
Output [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: X

(13) InputAdapter
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(14) InputIteratorTransformer
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(15) ShuffledHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(16) ProjectExecTransformer
Output [5]: [hash(l_suppkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(17) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: false

(18) ColumnarExchange
Input [5]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X], [plan_id=X], [id=#X]

(19) ShuffleQueryStage
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: X

(20) InputAdapter
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(21) InputIteratorTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(22) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(23) ProjectExecTransformer
Output [3]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Input [2]: [s_suppkey#X, s_nationkey#X]

(24) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: false

(25) ColumnarExchange
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_nationkey#X], [plan_id=X], [id=#X]

(26) ShuffleQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: X

(27) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(28) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(29) ShuffledHashJoinExecTransformer
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(30) ProjectExecTransformer
Output [5]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(31) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: false

(32) ColumnarExchange
Input [5]: [hash_partition_key#X, l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X], [plan_id=X], [id=#X]

(33) ShuffleQueryStage
Output [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: X

(34) InputAdapter
Input [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]

(35) InputIteratorTransformer
Input [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]

(36) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1995-01-01), LessThanOrEqual(o_orderdate,1996-12-31), IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(37) ProjectExecTransformer
Output [4]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X, o_orderdate#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(38) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: false

(39) ColumnarExchange
Input [4]: [hash_partition_key#X, o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_custkey#X, o_orderdate#X], [plan_id=X], [id=#X]

(40) ShuffleQueryStage
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: X

(41) InputAdapter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(42) InputIteratorTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(43) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(44) ProjectExecTransformer
Output [6]: [hash(o_custkey#X, 42) AS hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Input [7]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderkey#X, o_custkey#X, o_orderdate#X]

(45) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Arguments: false

(46) ColumnarExchange
Input [6]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X], [plan_id=X], [id=#X]

(47) ShuffleQueryStage
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Arguments: X

(48) InputAdapter
Input [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]

(49) InputIteratorTransformer
Input [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]

(50) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(51) ProjectExecTransformer
Output [3]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_nationkey#X]
Input [2]: [c_custkey#X, c_nationkey#X]

(52) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_custkey#X, c_nationkey#X]
Arguments: false

(53) ColumnarExchange
Input [3]: [hash_partition_key#X, c_custkey#X, c_nationkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_nationkey#X], [plan_id=X], [id=#X]

(54) ShuffleQueryStage
Output [2]: [c_custkey#X, c_nationkey#X]
Arguments: X

(55) InputAdapter
Input [2]: [c_custkey#X, c_nationkey#X]

(56) InputIteratorTransformer
Input [2]: [c_custkey#X, c_nationkey#X]

(57) ShuffledHashJoinExecTransformer
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(58) ProjectExecTransformer
Output [6]: [hash(c_nationkey#X, 42) AS hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X, c_custkey#X, c_nationkey#X]

(59) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Arguments: false

(60) ColumnarExchange
Input [6]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Arguments: hashpartitioning(c_nationkey#X, 1), ENSURE_REQUIREMENTS, [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X], [plan_id=X], [id=#X]

(61) ShuffleQueryStage
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Arguments: X

(62) InputAdapter
Input [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]

(63) InputIteratorTransformer
Input [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]

(64) Scan parquet
Output [2]: [n_nationkey#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(65) ProjectExecTransformer
Output [3]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X, n_regionkey#X]
Input [2]: [n_nationkey#X, n_regionkey#X]

(66) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, n_nationkey#X, n_regionkey#X]
Arguments: false

(67) ColumnarExchange
Input [3]: [hash_partition_key#X, n_nationkey#X, n_regionkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X, n_regionkey#X], [plan_id=X], [id=#X]

(68) ShuffleQueryStage
Output [2]: [n_nationkey#X, n_regionkey#X]
Arguments: X

(69) InputAdapter
Input [2]: [n_nationkey#X, n_regionkey#X]

(70) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]

(71) ShuffledHashJoinExecTransformer
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(72) ProjectExecTransformer
Output [6]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X, n_nationkey#X, n_regionkey#X]

(73) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Arguments: false

(74) ColumnarExchange
Input [6]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X], [plan_id=X], [id=#X]

(75) ShuffleQueryStage
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Arguments: X

(76) InputAdapter
Input [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]

(77) InputIteratorTransformer
Input [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]

(78) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(79) ProjectExecTransformer
Output [3]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X, n_name#X]
Input [2]: [n_nationkey#X, n_name#X]

(80) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, n_nationkey#X, n_name#X]
Arguments: false

(81) ColumnarExchange
Input [3]: [hash_partition_key#X, n_nationkey#X, n_name#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X, n_name#X], [plan_id=X], [id=#X]

(82) ShuffleQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: X

(83) InputAdapter
Input [2]: [n_nationkey#X, n_name#X]

(84) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(85) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(86) ProjectExecTransformer
Output [6]: [hash(n_regionkey#X, 42) AS hash_partition_key#X, l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X, n_nationkey#X, n_name#X]

(87) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Arguments: false

(88) ColumnarExchange
Input [6]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Arguments: hashpartitioning(n_regionkey#X, 1), ENSURE_REQUIREMENTS, [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X], [plan_id=X], [id=#X]

(89) ShuffleQueryStage
Output [5]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Arguments: X

(90) InputAdapter
Input [5]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]

(91) InputIteratorTransformer
Input [5]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]

(92) Scan parquet
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(93) ProjectExecTransformer
Output [2]: [hash(r_regionkey#X, 42) AS hash_partition_key#X, r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(94) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, r_regionkey#X]
Arguments: false

(95) ColumnarExchange
Input [2]: [hash_partition_key#X, r_regionkey#X]
Arguments: hashpartitioning(r_regionkey#X, 1), ENSURE_REQUIREMENTS, [r_regionkey#X], [plan_id=X], [id=#X]

(96) ShuffleQueryStage
Output [1]: [r_regionkey#X]
Arguments: X

(97) InputAdapter
Input [1]: [r_regionkey#X]

(98) InputIteratorTransformer
Input [1]: [r_regionkey#X]

(99) ShuffledHashJoinExecTransformer
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(100) ProjectExecTransformer
Output [4]: [year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) AS volume#X, n_name#X AS nation#X, CASE WHEN (n_name#X = BRAZIL) THEN CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) ELSE 0.0000 END AS _pre_X#X]
Input [6]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X, r_regionkey#X]

(101) FlushableHashAggregateExecTransformer
Input [4]: [o_year#X, volume#X, nation#X, _pre_X#X]
Keys [1]: [o_year#X]
Functions [2]: [partial_sum(_pre_X#X), partial_sum(volume#X)]
Aggregate Attributes [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Results [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(102) ProjectExecTransformer
Output [6]: [hash(o_year#X, 42) AS hash_partition_key#X, o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(103) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: false

(104) ColumnarExchange
Input [6]: [hash_partition_key#X, o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(o_year#X, 1), ENSURE_REQUIREMENTS, [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(105) ShuffleQueryStage
Output [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: X

(106) InputAdapter
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(107) InputIteratorTransformer
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(108) RegularHashAggregateExecTransformer
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Keys [1]: [o_year#X]
Functions [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), sum(volume#X)]
Aggregate Attributes [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]
Results [3]: [o_year#X, sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]

(109) ProjectExecTransformer
Output [2]: [o_year#X, CheckOverflow((promote_precision(sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X) / promote_precision(sum(volume#X)#X)), DecimalType(38,6)) AS mkt_share#X]
Input [3]: [o_year#X, sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]

(110) WholeStageCodegenTransformer (X)
Input [2]: [o_year#X, mkt_share#X]
Arguments: false

(111) ColumnarExchange
Input [2]: [o_year#X, mkt_share#X]
Arguments: rangepartitioning(o_year#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(112) ShuffleQueryStage
Output [2]: [o_year#X, mkt_share#X]
Arguments: X

(113) InputAdapter
Input [2]: [o_year#X, mkt_share#X]

(114) InputIteratorTransformer
Input [2]: [o_year#X, mkt_share#X]

(115) SortExecTransformer
Input [2]: [o_year#X, mkt_share#X]
Arguments: [o_year#X ASC NULLS FIRST], true, 0

(116) WholeStageCodegenTransformer (X)
Input [2]: [o_year#X, mkt_share#X]
Arguments: false

(117) VeloxColumnarToRowExec
Input [2]: [o_year#X, mkt_share#X]

(118) Scan parquet
Output [2]: [p_partkey#X, p_type#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_type), EqualTo(p_type,ECONOMY ANODIZED STEEL), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string>

(119) Filter
Input [2]: [p_partkey#X, p_type#X]
Condition : ((isnotnull(p_type#X) AND (p_type#X = ECONOMY ANODIZED STEEL)) AND isnotnull(p_partkey#X))

(120) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_type#X]

(121) Exchange
Input [1]: [p_partkey#X]
Arguments: hashpartitioning(p_partkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(122) Scan parquet
Output [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(123) Filter
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Condition : ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(124) Exchange
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_partkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(125) ShuffledHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(126) Project
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(127) Exchange
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(128) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(129) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(130) Exchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(131) ShuffledHashJoin
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(132) Project
Output [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(133) Exchange
Input [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(134) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1995-01-01), LessThanOrEqual(o_orderdate,1996-12-31), IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(135) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Condition : ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1995-01-01)) AND (o_orderdate#X <= 1996-12-31)) AND isnotnull(o_orderkey#X)) AND isnotnull(o_custkey#X))

(136) Exchange
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(137) ShuffledHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(138) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Input [7]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderkey#X, o_custkey#X, o_orderdate#X]

(139) Exchange
Input [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(140) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(141) Filter
Input [2]: [c_custkey#X, c_nationkey#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(142) Exchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(143) ShuffledHashJoin
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(144) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X, c_custkey#X, c_nationkey#X]

(145) Exchange
Input [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Arguments: hashpartitioning(c_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(146) Scan parquet
Output [2]: [n_nationkey#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(147) Filter
Input [2]: [n_nationkey#X, n_regionkey#X]
Condition : (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(148) Exchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(149) ShuffledHashJoin
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(150) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X, n_nationkey#X, n_regionkey#X]

(151) Exchange
Input [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(152) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(153) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : isnotnull(n_nationkey#X)

(154) Exchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(155) ShuffledHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(156) Project
Output [5]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X, n_nationkey#X, n_name#X]

(157) Exchange
Input [5]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Arguments: hashpartitioning(n_regionkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(158) Scan parquet
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(159) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = AMERICA)) AND isnotnull(r_regionkey#X))

(160) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(161) Exchange
Input [1]: [r_regionkey#X]
Arguments: hashpartitioning(r_regionkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(162) ShuffledHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(163) Project
Output [3]: [year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) AS volume#X, n_name#X AS nation#X]
Input [6]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X, r_regionkey#X]

(164) HashAggregate
Input [3]: [o_year#X, volume#X, nation#X]
Keys [1]: [o_year#X]
Functions [2]: [partial_sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), partial_sum(volume#X)]
Aggregate Attributes [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Results [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(165) Exchange
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(o_year#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(166) HashAggregate
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Keys [1]: [o_year#X]
Functions [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), sum(volume#X)]
Aggregate Attributes [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]
Results [2]: [o_year#X, CheckOverflow((promote_precision(sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X) / promote_precision(sum(volume#X)#X)), DecimalType(38,6)) AS mkt_share#X]

(167) Exchange
Input [2]: [o_year#X, mkt_share#X]
Arguments: rangepartitioning(o_year#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(168) Sort
Input [2]: [o_year#X, mkt_share#X]
Arguments: [o_year#X ASC NULLS FIRST], true, 0

(169) AdaptiveSparkPlan
Output [2]: [o_year#X, mkt_share#X]
Arguments: isFinalPlan=true