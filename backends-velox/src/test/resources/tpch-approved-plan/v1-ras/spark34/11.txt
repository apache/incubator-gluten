== Physical Plan ==
AdaptiveSparkPlan (69)
+- == Final Plan ==
   VeloxColumnarToRowExec (47)
   +- ^ SortExecTransformer (45)
      +- ^ InputIteratorTransformer (44)
         +- ^ InputAdapter (43)
            +- ^ ShuffleQueryStage (42), Statistics(X)
               +- ColumnarExchange (41)
                  +- ^ FilterExecTransformer (39)
                     +- ^ RegularHashAggregateExecTransformer (38)
                        +- ^ InputIteratorTransformer (37)
                           +- ^ InputAdapter (36)
                              +- ^ ShuffleQueryStage (35), Statistics(X)
                                 +- ColumnarExchange (34)
                                    +- ^ ProjectExecTransformer (32)
                                       +- ^ FlushableHashAggregateExecTransformer (31)
                                          +- ^ ProjectExecTransformer (30)
                                             +- ^ ShuffledHashJoinExecTransformer Inner (29)
                                                :- ^ InputIteratorTransformer (21)
                                                :  +- ^ InputAdapter (20)
                                                :     +- ^ ShuffleQueryStage (19), Statistics(X)
                                                :        +- ColumnarExchange (18)
                                                :           +- ^ ProjectExecTransformer (16)
                                                :              +- ^ ShuffledHashJoinExecTransformer Inner (15)
                                                :                 :- ^ InputIteratorTransformer (7)
                                                :                 :  +- ^ InputAdapter (6)
                                                :                 :     +- ^ ShuffleQueryStage (5), Statistics(X)
                                                :                 :        +- ColumnarExchange (4)
                                                :                 :           +- ^ ProjectExecTransformer (2)
                                                :                 :              +- ^ Scan parquet (1)
                                                :                 +- ^ InputIteratorTransformer (14)
                                                :                    +- ^ InputAdapter (13)
                                                :                       +- ^ ShuffleQueryStage (12), Statistics(X)
                                                :                          +- ColumnarExchange (11)
                                                :                             +- ^ ProjectExecTransformer (9)
                                                :                                +- ^ Scan parquet (8)
                                                +- ^ InputIteratorTransformer (28)
                                                   +- ^ InputAdapter (27)
                                                      +- ^ ShuffleQueryStage (26), Statistics(X)
                                                         +- ColumnarExchange (25)
                                                            +- ^ ProjectExecTransformer (23)
                                                               +- ^ Scan parquet (22)
+- == Initial Plan ==
   Sort (68)
   +- Exchange (67)
      +- Filter (66)
         +- HashAggregate (65)
            +- Exchange (64)
               +- HashAggregate (63)
                  +- Project (62)
                     +- ShuffledHashJoin Inner BuildRight (61)
                        :- Exchange (56)
                        :  +- Project (55)
                        :     +- ShuffledHashJoin Inner BuildRight (54)
                        :        :- Exchange (50)
                        :        :  +- Filter (49)
                        :        :     +- Scan parquet (48)
                        :        +- Exchange (53)
                        :           +- Filter (52)
                        :              +- Scan parquet (51)
                        +- Exchange (60)
                           +- Project (59)
                              +- Filter (58)
                                 +- Scan parquet (57)


(1) Scan parquet
Output [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(2) ProjectExecTransformer
Output [5]: [hash(ps_suppkey#X, 42) AS hash_partition_key#X, ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(3) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: false

(4) ColumnarExchange
Input [5]: [hash_partition_key#X, ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X], [plan_id=X], [id=#X]

(5) ShuffleQueryStage
Output [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: X

(6) InputAdapter
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(7) InputIteratorTransformer
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(8) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(9) ProjectExecTransformer
Output [3]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Input [2]: [s_suppkey#X, s_nationkey#X]

(10) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: false

(11) ColumnarExchange
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_nationkey#X], [plan_id=X], [id=#X]

(12) ShuffleQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: X

(13) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(14) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(15) ShuffledHashJoinExecTransformer
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join type: Inner
Join condition: None

(16) ProjectExecTransformer
Output [5]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]

(17) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: false

(18) ColumnarExchange
Input [5]: [hash_partition_key#X, ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X], [plan_id=X], [id=#X]

(19) ShuffleQueryStage
Output [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: X

(20) InputAdapter
Input [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]

(21) InputIteratorTransformer
Input [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]

(22) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,GERMANY), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(23) ProjectExecTransformer
Output [2]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(24) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: false

(25) ColumnarExchange
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X], [plan_id=X], [id=#X]

(26) ShuffleQueryStage
Output [1]: [n_nationkey#X]
Arguments: X

(27) InputAdapter
Input [1]: [n_nationkey#X]

(28) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(29) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(30) ProjectExecTransformer
Output [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, (ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))) AS _pre_X#X]
Input [5]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X]

(31) FlushableHashAggregateExecTransformer
Input [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, _pre_X#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [partial_sum(_pre_X#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [ps_partkey#X, sum#X, isEmpty#X]

(32) ProjectExecTransformer
Output [4]: [hash(ps_partkey#X, 42) AS hash_partition_key#X, ps_partkey#X, sum#X, isEmpty#X]
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]

(33) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, ps_partkey#X, sum#X, isEmpty#X]
Arguments: false

(34) ColumnarExchange
Input [4]: [hash_partition_key#X, ps_partkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(ps_partkey#X, 1), ENSURE_REQUIREMENTS, [ps_partkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(35) ShuffleQueryStage
Output [3]: [ps_partkey#X, sum#X, isEmpty#X]
Arguments: X

(36) InputAdapter
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]

(37) InputIteratorTransformer
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]

(38) RegularHashAggregateExecTransformer
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))]
Aggregate Attributes [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X]
Results [2]: [ps_partkey#X, sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X AS value#X]

(39) FilterExecTransformer
Input [2]: [ps_partkey#X, value#X]
Arguments: (isnotnull(value#X) AND (cast(value#X as decimal(38,6)) > Subquery subquery#X, [id=#X]))

(40) WholeStageCodegenTransformer (X)
Input [2]: [ps_partkey#X, value#X]
Arguments: false

(41) ColumnarExchange
Input [2]: [ps_partkey#X, value#X]
Arguments: rangepartitioning(value#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(42) ShuffleQueryStage
Output [2]: [ps_partkey#X, value#X]
Arguments: X

(43) InputAdapter
Input [2]: [ps_partkey#X, value#X]

(44) InputIteratorTransformer
Input [2]: [ps_partkey#X, value#X]

(45) SortExecTransformer
Input [2]: [ps_partkey#X, value#X]
Arguments: [value#X DESC NULLS LAST], true, 0

(46) WholeStageCodegenTransformer (X)
Input [2]: [ps_partkey#X, value#X]
Arguments: false

(47) VeloxColumnarToRowExec
Input [2]: [ps_partkey#X, value#X]

(48) Scan parquet
Output [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(49) Filter
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Condition : isnotnull(ps_suppkey#X)

(50) Exchange
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(51) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(52) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(53) Exchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(54) ShuffledHashJoin
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join type: Inner
Join condition: None

(55) Project
Output [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]

(56) Exchange
Input [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(57) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,GERMANY), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(58) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = GERMANY)) AND isnotnull(n_nationkey#X))

(59) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(60) Exchange
Input [1]: [n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(61) ShuffledHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(62) Project
Output [3]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X]
Input [5]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X]

(63) HashAggregate
Input [3]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [partial_sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [ps_partkey#X, sum#X, isEmpty#X]

(64) Exchange
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(ps_partkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(65) HashAggregate
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))]
Aggregate Attributes [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X]
Results [2]: [ps_partkey#X, sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X AS value#X]

(66) Filter
Input [2]: [ps_partkey#X, value#X]
Condition : (isnotnull(value#X) AND (cast(value#X as decimal(38,6)) > Subquery subquery#X, [id=#X]))

(67) Exchange
Input [2]: [ps_partkey#X, value#X]
Arguments: rangepartitioning(value#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(68) Sort
Input [2]: [ps_partkey#X, value#X]
Arguments: [value#X DESC NULLS LAST], true, 0

(69) AdaptiveSparkPlan
Output [2]: [ps_partkey#X, value#X]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 39 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (116)
+- == Final Plan ==
   VeloxColumnarToRowExec (98)
   +- ^ ProjectExecTransformer (96)
      +- ^ RegularHashAggregateExecTransformer (95)
         +- ^ RegularHashAggregateExecTransformer (94)
            +- ^ ProjectExecTransformer (93)
               +- ^ ShuffledHashJoinExecTransformer Inner (92)
                  :- ^ InputIteratorTransformer (87)
                  :  +- ^ InputAdapter (86)
                  :     +- ^ ShuffleQueryStage (85), Statistics(X)
                  :        +- ColumnarExchange (84)
                  :           +- ^ ProjectExecTransformer (82)
                  :              +- ^ ShuffledHashJoinExecTransformer Inner (81)
                  :                 :- ^ InputIteratorTransformer (76)
                  :                 :  +- ^ InputAdapter (75)
                  :                 :     +- ^ ShuffleQueryStage (74), Statistics(X)
                  :                 :        +- ColumnarExchange (73)
                  :                 :           +- ^ ProjectExecTransformer (71)
                  :                 :              +- ^ Scan parquet (70)
                  :                 +- ^ InputIteratorTransformer (80)
                  :                    +- ^ InputAdapter (79)
                  :                       +- ^ ShuffleQueryStage (78), Statistics(X)
                  :                          +- ReusedExchange (77)
                  +- ^ InputIteratorTransformer (91)
                     +- ^ InputAdapter (90)
                        +- ^ ShuffleQueryStage (89), Statistics(X)
                           +- ReusedExchange (88)
+- == Initial Plan ==
   HashAggregate (115)
   +- HashAggregate (114)
      +- Project (113)
         +- ShuffledHashJoin Inner BuildRight (112)
            :- Exchange (107)
            :  +- Project (106)
            :     +- ShuffledHashJoin Inner BuildRight (105)
            :        :- Exchange (101)
            :        :  +- Filter (100)
            :        :     +- Scan parquet (99)
            :        +- Exchange (104)
            :           +- Filter (103)
            :              +- Scan parquet (102)
            +- Exchange (111)
               +- Project (110)
                  +- Filter (109)
                     +- Scan parquet (108)


(70) Scan parquet
Output [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(71) ProjectExecTransformer
Output [4]: [hash(ps_suppkey#X, 42) AS hash_partition_key#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(72) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: false

(73) ColumnarExchange
Input [4]: [hash_partition_key#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [ps_suppkey#X, ps_availqty#X, ps_supplycost#X], [plan_id=X], [id=#X]

(74) ShuffleQueryStage
Output [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: X

(75) InputAdapter
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(76) InputIteratorTransformer
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(77) ReusedExchange [Reuses operator id: 11]
Output [2]: [s_suppkey#X, s_nationkey#X]

(78) ShuffleQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: X

(79) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(80) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(81) ShuffledHashJoinExecTransformer
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join type: Inner
Join condition: None

(82) ProjectExecTransformer
Output [4]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Input [5]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]

(83) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: false

(84) ColumnarExchange
Input [4]: [hash_partition_key#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [ps_availqty#X, ps_supplycost#X, s_nationkey#X], [plan_id=X], [id=#X]

(85) ShuffleQueryStage
Output [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: X

(86) InputAdapter
Input [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]

(87) InputIteratorTransformer
Input [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]

(88) ReusedExchange [Reuses operator id: 25]
Output [1]: [n_nationkey#X]

(89) ShuffleQueryStage
Output [1]: [n_nationkey#X]
Arguments: X

(90) InputAdapter
Input [1]: [n_nationkey#X]

(91) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(92) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(93) ProjectExecTransformer
Output [3]: [ps_availqty#X, ps_supplycost#X, (ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))) AS _pre_X#X]
Input [4]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X]

(94) RegularHashAggregateExecTransformer
Input [3]: [ps_availqty#X, ps_supplycost#X, _pre_X#X]
Keys: []
Functions [1]: [partial_sum(_pre_X#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(95) RegularHashAggregateExecTransformer
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))]
Aggregate Attributes [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X]
Results [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X]

(96) ProjectExecTransformer
Output [1]: [(sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X * 0.0001000000) AS (sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]
Input [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X]

(97) WholeStageCodegenTransformer (X)
Input [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]
Arguments: false

(98) VeloxColumnarToRowExec
Input [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]

(99) Scan parquet
Output [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(100) Filter
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Condition : isnotnull(ps_suppkey#X)

(101) Exchange
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(102) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(103) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(104) Exchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(105) ShuffledHashJoin
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join type: Inner
Join condition: None

(106) Project
Output [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Input [5]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]

(107) Exchange
Input [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(108) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,GERMANY), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(109) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = GERMANY)) AND isnotnull(n_nationkey#X))

(110) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(111) Exchange
Input [1]: [n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(112) ShuffledHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(113) Project
Output [2]: [ps_availqty#X, ps_supplycost#X]
Input [4]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X]

(114) HashAggregate
Input [2]: [ps_availqty#X, ps_supplycost#X]
Keys: []
Functions [1]: [partial_sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(115) HashAggregate
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))]
Aggregate Attributes [1]: [sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X]
Results [1]: [(sum((ps_supplycost#X * cast(ps_availqty#X as decimal(10,0))))#X * 0.0001000000) AS (sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]

(116) AdaptiveSparkPlan
Output [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]
Arguments: isFinalPlan=true