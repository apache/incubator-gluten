== Physical Plan ==
AdaptiveSparkPlan (134)
+- == Final Plan ==
   VeloxColumnarToRowExec (94)
   +- ^ SortExecTransformer (92)
      +- ^ InputIteratorTransformer (91)
         +- ^ InputAdapter (90)
            +- ^ ShuffleQueryStage (89), Statistics(X)
               +- ColumnarExchange (88)
                  +- ^ RegularHashAggregateExecTransformer (86)
                     +- ^ InputIteratorTransformer (85)
                        +- ^ InputAdapter (84)
                           +- ^ ShuffleQueryStage (83), Statistics(X)
                              +- ColumnarExchange (82)
                                 +- ^ ProjectExecTransformer (80)
                                    +- ^ FlushableHashAggregateExecTransformer (79)
                                       +- ^ ProjectExecTransformer (78)
                                          +- ^ ShuffledHashJoinExecTransformer Inner (77)
                                             :- ^ InputIteratorTransformer (68)
                                             :  +- ^ InputAdapter (67)
                                             :     +- ^ ShuffleQueryStage (66), Statistics(X)
                                             :        +- ColumnarExchange (65)
                                             :           +- ^ ProjectExecTransformer (63)
                                             :              +- ^ ShuffledHashJoinExecTransformer Inner (62)
                                             :                 :- ^ InputIteratorTransformer (53)
                                             :                 :  +- ^ InputAdapter (52)
                                             :                 :     +- ^ ShuffleQueryStage (51), Statistics(X)
                                             :                 :        +- ColumnarExchange (50)
                                             :                 :           +- ^ ProjectExecTransformer (48)
                                             :                 :              +- ^ ShuffledHashJoinExecTransformer Inner (47)
                                             :                 :                 :- ^ InputIteratorTransformer (38)
                                             :                 :                 :  +- ^ InputAdapter (37)
                                             :                 :                 :     +- ^ ShuffleQueryStage (36), Statistics(X)
                                             :                 :                 :        +- ColumnarExchange (35)
                                             :                 :                 :           +- ^ ProjectExecTransformer (33)
                                             :                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner (32)
                                             :                 :                 :                 :- ^ InputIteratorTransformer (23)
                                             :                 :                 :                 :  +- ^ InputAdapter (22)
                                             :                 :                 :                 :     +- ^ ShuffleQueryStage (21), Statistics(X)
                                             :                 :                 :                 :        +- ColumnarExchange (20)
                                             :                 :                 :                 :           +- ^ ProjectExecTransformer (18)
                                             :                 :                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner (17)
                                             :                 :                 :                 :                 :- ^ InputIteratorTransformer (8)
                                             :                 :                 :                 :                 :  +- ^ InputAdapter (7)
                                             :                 :                 :                 :                 :     +- ^ ShuffleQueryStage (6), Statistics(X)
                                             :                 :                 :                 :                 :        +- ColumnarExchange (5)
                                             :                 :                 :                 :                 :           +- ^ ProjectExecTransformer (3)
                                             :                 :                 :                 :                 :              +- ^ FilterExecTransformer (2)
                                             :                 :                 :                 :                 :                 +- ^ Scan parquet (1)
                                             :                 :                 :                 :                 +- ^ InputIteratorTransformer (16)
                                             :                 :                 :                 :                    +- ^ InputAdapter (15)
                                             :                 :                 :                 :                       +- ^ ShuffleQueryStage (14), Statistics(X)
                                             :                 :                 :                 :                          +- ColumnarExchange (13)
                                             :                 :                 :                 :                             +- ^ ProjectExecTransformer (11)
                                             :                 :                 :                 :                                +- ^ FilterExecTransformer (10)
                                             :                 :                 :                 :                                   +- ^ Scan parquet (9)
                                             :                 :                 :                 +- ^ InputIteratorTransformer (31)
                                             :                 :                 :                    +- ^ InputAdapter (30)
                                             :                 :                 :                       +- ^ ShuffleQueryStage (29), Statistics(X)
                                             :                 :                 :                          +- ColumnarExchange (28)
                                             :                 :                 :                             +- ^ ProjectExecTransformer (26)
                                             :                 :                 :                                +- ^ FilterExecTransformer (25)
                                             :                 :                 :                                   +- ^ Scan parquet (24)
                                             :                 :                 +- ^ InputIteratorTransformer (46)
                                             :                 :                    +- ^ InputAdapter (45)
                                             :                 :                       +- ^ ShuffleQueryStage (44), Statistics(X)
                                             :                 :                          +- ColumnarExchange (43)
                                             :                 :                             +- ^ ProjectExecTransformer (41)
                                             :                 :                                +- ^ FilterExecTransformer (40)
                                             :                 :                                   +- ^ Scan parquet (39)
                                             :                 +- ^ InputIteratorTransformer (61)
                                             :                    +- ^ InputAdapter (60)
                                             :                       +- ^ ShuffleQueryStage (59), Statistics(X)
                                             :                          +- ColumnarExchange (58)
                                             :                             +- ^ ProjectExecTransformer (56)
                                             :                                +- ^ FilterExecTransformer (55)
                                             :                                   +- ^ Scan parquet (54)
                                             +- ^ InputIteratorTransformer (76)
                                                +- ^ InputAdapter (75)
                                                   +- ^ ShuffleQueryStage (74), Statistics(X)
                                                      +- ColumnarExchange (73)
                                                         +- ^ ProjectExecTransformer (71)
                                                            +- ^ FilterExecTransformer (70)
                                                               +- ^ Scan parquet (69)
+- == Initial Plan ==
   Sort (133)
   +- Exchange (132)
      +- HashAggregate (131)
         +- Exchange (130)
            +- HashAggregate (129)
               +- Project (128)
                  +- ShuffledHashJoin Inner BuildRight (127)
                     :- Exchange (122)
                     :  +- Project (121)
                     :     +- ShuffledHashJoin Inner BuildRight (120)
                     :        :- Exchange (116)
                     :        :  +- Project (115)
                     :        :     +- ShuffledHashJoin Inner BuildRight (114)
                     :        :        :- Exchange (110)
                     :        :        :  +- Project (109)
                     :        :        :     +- ShuffledHashJoin Inner BuildRight (108)
                     :        :        :        :- Exchange (104)
                     :        :        :        :  +- Project (103)
                     :        :        :        :     +- ShuffledHashJoin Inner BuildLeft (102)
                     :        :        :        :        :- Exchange (97)
                     :        :        :        :        :  +- Filter (96)
                     :        :        :        :        :     +- Scan parquet (95)
                     :        :        :        :        +- Exchange (101)
                     :        :        :        :           +- Project (100)
                     :        :        :        :              +- Filter (99)
                     :        :        :        :                 +- Scan parquet (98)
                     :        :        :        +- Exchange (107)
                     :        :        :           +- Filter (106)
                     :        :        :              +- Scan parquet (105)
                     :        :        +- Exchange (113)
                     :        :           +- Filter (112)
                     :        :              +- Scan parquet (111)
                     :        +- Exchange (119)
                     :           +- Filter (118)
                     :              +- Scan parquet (117)
                     +- Exchange (126)
                        +- Project (125)
                           +- Filter (124)
                              +- Scan parquet (123)


(1) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(2) FilterExecTransformer
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(3) ProjectExecTransformer
Output [3]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_nationkey#X]
Input [2]: [c_custkey#X, c_nationkey#X]

(4) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_custkey#X, c_nationkey#X]
Arguments: false

(5) ColumnarExchange
Input [3]: [hash_partition_key#X, c_custkey#X, c_nationkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_nationkey#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [2]: [c_custkey#X, c_nationkey#X]
Arguments: X

(7) InputAdapter
Input [2]: [c_custkey#X, c_nationkey#X]

(8) InputIteratorTransformer
Input [2]: [c_custkey#X, c_nationkey#X]

(9) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1994-01-01), LessThan(o_orderdate,1995-01-01), IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(10) FilterExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1994-01-01)) AND (o_orderdate#X < 1995-01-01)) AND isnotnull(o_custkey#X)) AND isnotnull(o_orderkey#X))

(11) ProjectExecTransformer
Output [3]: [hash(o_custkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(12) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: false

(13) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_custkey#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [2]: [o_orderkey#X, o_custkey#X]
Arguments: X

(15) InputAdapter
Input [2]: [o_orderkey#X, o_custkey#X]

(16) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_custkey#X]

(17) ShuffledHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: Inner
Join condition: None

(18) ProjectExecTransformer
Output [3]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, c_nationkey#X, o_orderkey#X]
Input [4]: [c_custkey#X, c_nationkey#X, o_orderkey#X, o_custkey#X]

(19) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_nationkey#X, o_orderkey#X]
Arguments: false

(20) ColumnarExchange
Input [3]: [hash_partition_key#X, c_nationkey#X, o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [c_nationkey#X, o_orderkey#X], [plan_id=X], [id=#X]

(21) ShuffleQueryStage
Output [2]: [c_nationkey#X, o_orderkey#X]
Arguments: X

(22) InputAdapter
Input [2]: [c_nationkey#X, o_orderkey#X]

(23) InputIteratorTransformer
Input [2]: [c_nationkey#X, o_orderkey#X]

(24) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(25) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: (isnotnull(l_orderkey#X) AND isnotnull(l_suppkey#X))

(26) ProjectExecTransformer
Output [5]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(27) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: false

(28) ColumnarExchange
Input [5]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X], [plan_id=X], [id=#X]

(29) ShuffleQueryStage
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: X

(30) InputAdapter
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(31) InputIteratorTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(32) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join type: Inner
Join condition: None

(33) ProjectExecTransformer
Output [5]: [hash(l_suppkey#X, c_nationkey#X, 42) AS hash_partition_key#X, c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [c_nationkey#X, o_orderkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(34) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: false

(35) ColumnarExchange
Input [5]: [hash_partition_key#X, c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_suppkey#X, c_nationkey#X, 1), ENSURE_REQUIREMENTS, [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X], [plan_id=X], [id=#X]

(36) ShuffleQueryStage
Output [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: X

(37) InputAdapter
Input [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(38) InputIteratorTransformer
Input [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(39) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(40) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(41) ProjectExecTransformer
Output [3]: [hash(s_suppkey#X, s_nationkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Input [2]: [s_suppkey#X, s_nationkey#X]

(42) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: false

(43) ColumnarExchange
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, s_nationkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_nationkey#X], [plan_id=X], [id=#X]

(44) ShuffleQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: X

(45) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(46) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(47) ShuffledHashJoinExecTransformer
Left keys [2]: [l_suppkey#X, c_nationkey#X]
Right keys [2]: [s_suppkey#X, s_nationkey#X]
Join type: Inner
Join condition: None

(48) ProjectExecTransformer
Output [4]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(49) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: false

(50) ColumnarExchange
Input [4]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [l_extendedprice#X, l_discount#X, s_nationkey#X], [plan_id=X], [id=#X]

(51) ShuffleQueryStage
Output [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: X

(52) InputAdapter
Input [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]

(53) InputIteratorTransformer
Input [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]

(54) Scan parquet
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(55) FilterExecTransformer
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(56) ProjectExecTransformer
Output [4]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X, n_name#X, n_regionkey#X]
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]

(57) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: false

(58) ColumnarExchange
Input [4]: [hash_partition_key#X, n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X, n_name#X, n_regionkey#X], [plan_id=X], [id=#X]

(59) ShuffleQueryStage
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: X

(60) InputAdapter
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]

(61) InputIteratorTransformer
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]

(62) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(63) ProjectExecTransformer
Output [5]: [hash(n_regionkey#X, 42) AS hash_partition_key#X, l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Input [6]: [l_extendedprice#X, l_discount#X, s_nationkey#X, n_nationkey#X, n_name#X, n_regionkey#X]

(64) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Arguments: false

(65) ColumnarExchange
Input [5]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Arguments: hashpartitioning(n_regionkey#X, 1), ENSURE_REQUIREMENTS, [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X], [plan_id=X], [id=#X]

(66) ShuffleQueryStage
Output [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Arguments: X

(67) InputAdapter
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]

(68) InputIteratorTransformer
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]

(69) Scan parquet
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(70) FilterExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: ((isnotnull(r_name#X) AND (r_name#X = ASIA)) AND isnotnull(r_regionkey#X))

(71) ProjectExecTransformer
Output [2]: [hash(r_regionkey#X, 42) AS hash_partition_key#X, r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(72) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, r_regionkey#X]
Arguments: false

(73) ColumnarExchange
Input [2]: [hash_partition_key#X, r_regionkey#X]
Arguments: hashpartitioning(r_regionkey#X, 1), ENSURE_REQUIREMENTS, [r_regionkey#X], [plan_id=X], [id=#X]

(74) ShuffleQueryStage
Output [1]: [r_regionkey#X]
Arguments: X

(75) InputAdapter
Input [1]: [r_regionkey#X]

(76) InputIteratorTransformer
Input [1]: [r_regionkey#X]

(77) ShuffledHashJoinExecTransformer
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join type: Inner
Join condition: None

(78) ProjectExecTransformer
Output [4]: [l_extendedprice#X, l_discount#X, n_name#X, (l_extendedprice#X * (1 - l_discount#X)) AS _pre_X#X]
Input [5]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X, r_regionkey#X]

(79) FlushableHashAggregateExecTransformer
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, _pre_X#X]
Keys [1]: [n_name#X]
Functions [1]: [partial_sum(_pre_X#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [n_name#X, sum#X, isEmpty#X]

(80) ProjectExecTransformer
Output [4]: [hash(n_name#X, 42) AS hash_partition_key#X, n_name#X, sum#X, isEmpty#X]
Input [3]: [n_name#X, sum#X, isEmpty#X]

(81) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, n_name#X, sum#X, isEmpty#X]
Arguments: false

(82) ColumnarExchange
Input [4]: [hash_partition_key#X, n_name#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(n_name#X, 1), ENSURE_REQUIREMENTS, [n_name#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(83) ShuffleQueryStage
Output [3]: [n_name#X, sum#X, isEmpty#X]
Arguments: X

(84) InputAdapter
Input [3]: [n_name#X, sum#X, isEmpty#X]

(85) InputIteratorTransformer
Input [3]: [n_name#X, sum#X, isEmpty#X]

(86) RegularHashAggregateExecTransformer
Input [3]: [n_name#X, sum#X, isEmpty#X]
Keys [1]: [n_name#X]
Functions [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))#X]
Results [2]: [n_name#X, sum((l_extendedprice#X * (1 - l_discount#X)))#X AS revenue#X]

(87) WholeStageCodegenTransformer (X)
Input [2]: [n_name#X, revenue#X]
Arguments: false

(88) ColumnarExchange
Input [2]: [n_name#X, revenue#X]
Arguments: rangepartitioning(revenue#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(89) ShuffleQueryStage
Output [2]: [n_name#X, revenue#X]
Arguments: X

(90) InputAdapter
Input [2]: [n_name#X, revenue#X]

(91) InputIteratorTransformer
Input [2]: [n_name#X, revenue#X]

(92) SortExecTransformer
Input [2]: [n_name#X, revenue#X]
Arguments: [revenue#X DESC NULLS LAST], true, 0

(93) WholeStageCodegenTransformer (X)
Input [2]: [n_name#X, revenue#X]
Arguments: false

(94) VeloxColumnarToRowExec
Input [2]: [n_name#X, revenue#X]

(95) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(96) Filter
Input [2]: [c_custkey#X, c_nationkey#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(97) Exchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(98) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1994-01-01), LessThan(o_orderdate,1995-01-01), IsNotNull(o_custkey), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(99) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Condition : ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1994-01-01)) AND (o_orderdate#X < 1995-01-01)) AND isnotnull(o_custkey#X)) AND isnotnull(o_orderkey#X))

(100) Project
Output [2]: [o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(101) Exchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(102) ShuffledHashJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: Inner
Join condition: None

(103) Project
Output [2]: [c_nationkey#X, o_orderkey#X]
Input [4]: [c_custkey#X, c_nationkey#X, o_orderkey#X, o_custkey#X]

(104) Exchange
Input [2]: [c_nationkey#X, o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(105) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(106) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Condition : (isnotnull(l_orderkey#X) AND isnotnull(l_suppkey#X))

(107) Exchange
Input [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(108) ShuffledHashJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join type: Inner
Join condition: None

(109) Project
Output [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [c_nationkey#X, o_orderkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(110) Exchange
Input [4]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: hashpartitioning(l_suppkey#X, c_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(111) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(112) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(113) Exchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(114) ShuffledHashJoin
Left keys [2]: [l_suppkey#X, c_nationkey#X]
Right keys [2]: [s_suppkey#X, s_nationkey#X]
Join type: Inner
Join condition: None

(115) Project
Output [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [c_nationkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(116) Exchange
Input [3]: [l_extendedprice#X, l_discount#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(117) Scan parquet
Output [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>

(118) Filter
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Condition : (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(119) Exchange
Input [3]: [n_nationkey#X, n_name#X, n_regionkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(120) ShuffledHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(121) Project
Output [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Input [6]: [l_extendedprice#X, l_discount#X, s_nationkey#X, n_nationkey#X, n_name#X, n_regionkey#X]

(122) Exchange
Input [4]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X]
Arguments: hashpartitioning(n_regionkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(123) Scan parquet
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(124) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = ASIA)) AND isnotnull(r_regionkey#X))

(125) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(126) Exchange
Input [1]: [r_regionkey#X]
Arguments: hashpartitioning(r_regionkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(127) ShuffledHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join type: Inner
Join condition: None

(128) Project
Output [3]: [l_extendedprice#X, l_discount#X, n_name#X]
Input [5]: [l_extendedprice#X, l_discount#X, n_name#X, n_regionkey#X, r_regionkey#X]

(129) HashAggregate
Input [3]: [l_extendedprice#X, l_discount#X, n_name#X]
Keys [1]: [n_name#X]
Functions [1]: [partial_sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [n_name#X, sum#X, isEmpty#X]

(130) Exchange
Input [3]: [n_name#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(n_name#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(131) HashAggregate
Input [3]: [n_name#X, sum#X, isEmpty#X]
Keys [1]: [n_name#X]
Functions [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))]
Aggregate Attributes [1]: [sum((l_extendedprice#X * (1 - l_discount#X)))#X]
Results [2]: [n_name#X, sum((l_extendedprice#X * (1 - l_discount#X)))#X AS revenue#X]

(132) Exchange
Input [2]: [n_name#X, revenue#X]
Arguments: rangepartitioning(revenue#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(133) Sort
Input [2]: [n_name#X, revenue#X]
Arguments: [revenue#X DESC NULLS LAST], true, 0

(134) AdaptiveSparkPlan
Output [2]: [n_name#X, revenue#X]
Arguments: isFinalPlan=true