== Physical Plan ==
AdaptiveSparkPlan (55)
+- == Final Plan ==
   VeloxColumnarToRowExec (28)
   +- ^ SortExecTransformer (26)
      +- ^ RegularHashAggregateExecTransformer (25)
         +- ^ RegularHashAggregateExecTransformer (24)
            +- ^ ProjectExecTransformer (23)
               +- ^ ShuffledHashJoinExecTransformer Inner (22)
                  :- ^ ProjectExecTransformer (19)
                  :  +- ^ ShuffledHashJoinExecTransformer Inner (18)
                  :     :- ^ ProjectExecTransformer (15)
                  :     :  +- ^ ShuffledHashJoinExecTransformer Inner (14)
                  :     :     :- ^ ProjectExecTransformer (11)
                  :     :     :  +- ^ ShuffledHashJoinExecTransformer Inner (10)
                  :     :     :     :- ^ ProjectExecTransformer (7)
                  :     :     :     :  +- ^ ShuffledHashJoinExecTransformer Inner (6)
                  :     :     :     :     :- ^ ProjectExecTransformer (3)
                  :     :     :     :     :  +- ^ FilterExecTransformer (2)
                  :     :     :     :     :     +- ^ BatchScanExecTransformer (1)
                  :     :     :     :     +- ^ FilterExecTransformer (5)
                  :     :     :     :        +- ^ BatchScanExecTransformer (4)
                  :     :     :     +- ^ FilterExecTransformer (9)
                  :     :     :        +- ^ BatchScanExecTransformer (8)
                  :     :     +- ^ FilterExecTransformer (13)
                  :     :        +- ^ BatchScanExecTransformer (12)
                  :     +- ^ FilterExecTransformer (17)
                  :        +- ^ BatchScanExecTransformer (16)
                  +- ^ FilterExecTransformer (21)
                     +- ^ BatchScanExecTransformer (20)
+- == Initial Plan ==
   Sort (54)
   +- HashAggregate (53)
      +- HashAggregate (52)
         +- Project (51)
            +- ShuffledHashJoin Inner BuildRight (50)
               :- Project (47)
               :  +- ShuffledHashJoin Inner BuildRight (46)
               :     :- Project (43)
               :     :  +- ShuffledHashJoin Inner BuildRight (42)
               :     :     :- Project (39)
               :     :     :  +- ShuffledHashJoin Inner BuildRight (38)
               :     :     :     :- Project (35)
               :     :     :     :  +- ShuffledHashJoin Inner BuildLeft (34)
               :     :     :     :     :- Project (31)
               :     :     :     :     :  +- Filter (30)
               :     :     :     :     :     +- BatchScan (29)
               :     :     :     :     +- Filter (33)
               :     :     :     :        +- BatchScan (32)
               :     :     :     +- Filter (37)
               :     :     :        +- BatchScan (36)
               :     :     +- Filter (41)
               :     :        +- BatchScan (40)
               :     +- Filter (45)
               :        +- BatchScan (44)
               +- Filter (49)
                  +- BatchScan (48)


(1) BatchScanExecTransformer
Output [2]: [p_partkey#X, p_name#X]
DataFilters: [isnotnull(p_name#X), Contains(p_name#X, green), isnotnull(p_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(p_name), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(2) FilterExecTransformer
Input [2]: [p_partkey#X, p_name#X]
Arguments: ((isnotnull(p_name#X) AND Contains(p_name#X, green)) AND isnotnull(p_partkey#X))

(3) ProjectExecTransformer
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(4) BatchScanExecTransformer
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
DataFilters: [isnotnull(l_partkey#X), isnotnull(l_suppkey#X), isnotnull(l_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(5) FilterExecTransformer
Input [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Arguments: ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(6) ShuffledHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(7) ProjectExecTransformer
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Input [7]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]

(8) BatchScanExecTransformer
Output [2]: [s_suppkey#X, s_nationkey#X]
DataFilters: [isnotnull(s_suppkey#X), isnotnull(s_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(9) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(10) ShuffledHashJoinExecTransformer
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(11) ProjectExecTransformer
Output [7]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [8]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(12) BatchScanExecTransformer
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
DataFilters: [isnotnull(ps_suppkey#X), isnotnull(ps_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(13) FilterExecTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: (isnotnull(ps_suppkey#X) AND isnotnull(ps_partkey#X))

(14) ShuffledHashJoinExecTransformer
Left keys [2]: [l_suppkey#X, l_partkey#X]
Right keys [2]: [ps_suppkey#X, ps_partkey#X]
Join condition: None

(15) ProjectExecTransformer
Output [6]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X]
Input [10]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_partkey#X, ps_suppkey#X, ps_supplycost#X]

(16) BatchScanExecTransformer
Output [2]: [o_orderkey#X, o_orderdate#X]
DataFilters: [isnotnull(o_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date>

(17) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderdate#X]
Arguments: isnotnull(o_orderkey#X)

(18) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(19) ProjectExecTransformer
Output [6]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X]
Input [8]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderkey#X, o_orderdate#X]

(20) BatchScanExecTransformer
Output [2]: [n_nationkey#X, n_name#X]
DataFilters: [isnotnull(n_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(21) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: isnotnull(n_nationkey#X)

(22) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(23) ProjectExecTransformer
Output [3]: [n_name#X AS nation#X, year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) as decimal(27,4))) - promote_precision(cast(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(l_quantity#X)), DecimalType(25,4), true) as decimal(27,4)))), DecimalType(27,4), true) AS amount#X]
Input [8]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X, n_nationkey#X, n_name#X]

(24) RegularHashAggregateExecTransformer
Input [3]: [nation#X, o_year#X, amount#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [partial_sum(amount#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [nation#X, o_year#X, sum#X, isEmpty#X]

(25) RegularHashAggregateExecTransformer
Input [4]: [nation#X, o_year#X, sum#X, isEmpty#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [sum(amount#X)]
Aggregate Attributes [1]: [sum(amount#X)#X]
Results [3]: [nation#X, o_year#X, sum(amount#X)#X AS sum_profit#X]

(26) SortExecTransformer
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: [nation#X ASC NULLS FIRST, o_year#X DESC NULLS LAST], true, 0

(27) WholeStageCodegenTransformer (X)
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: false

(28) VeloxColumnarToRowExec
Input [3]: [nation#X, o_year#X, sum_profit#X]

(29) BatchScan
Output [2]: [p_partkey#X, p_name#X]
DataFilters: [isnotnull(p_name#X), Contains(p_name#X, green), isnotnull(p_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(p_name), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(30) Filter
Input [2]: [p_partkey#X, p_name#X]
Condition : ((isnotnull(p_name#X) AND Contains(p_name#X, green)) AND isnotnull(p_partkey#X))

(31) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(32) BatchScan
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
DataFilters: [isnotnull(l_partkey#X), isnotnull(l_suppkey#X), isnotnull(l_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(33) Filter
Input [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Condition : ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(34) ShuffledHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(35) Project
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Input [7]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]

(36) BatchScan
Output [2]: [s_suppkey#X, s_nationkey#X]
DataFilters: [isnotnull(s_suppkey#X), isnotnull(s_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(37) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(38) ShuffledHashJoin
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(39) Project
Output [7]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [8]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(40) BatchScan
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
DataFilters: [isnotnull(ps_suppkey#X), isnotnull(ps_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(41) Filter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Condition : (isnotnull(ps_suppkey#X) AND isnotnull(ps_partkey#X))

(42) ShuffledHashJoin
Left keys [2]: [l_suppkey#X, l_partkey#X]
Right keys [2]: [ps_suppkey#X, ps_partkey#X]
Join condition: None

(43) Project
Output [6]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X]
Input [10]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_partkey#X, ps_suppkey#X, ps_supplycost#X]

(44) BatchScan
Output [2]: [o_orderkey#X, o_orderdate#X]
DataFilters: [isnotnull(o_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date>

(45) Filter
Input [2]: [o_orderkey#X, o_orderdate#X]
Condition : isnotnull(o_orderkey#X)

(46) ShuffledHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(47) Project
Output [6]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X]
Input [8]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderkey#X, o_orderdate#X]

(48) BatchScan
Output [2]: [n_nationkey#X, n_name#X]
DataFilters: [isnotnull(n_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(49) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : isnotnull(n_nationkey#X)

(50) ShuffledHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(51) Project
Output [3]: [n_name#X AS nation#X, year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) as decimal(27,4))) - promote_precision(cast(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(l_quantity#X)), DecimalType(25,4), true) as decimal(27,4)))), DecimalType(27,4), true) AS amount#X]
Input [8]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X, n_nationkey#X, n_name#X]

(52) HashAggregate
Input [3]: [nation#X, o_year#X, amount#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [partial_sum(amount#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [nation#X, o_year#X, sum#X, isEmpty#X]

(53) HashAggregate
Input [4]: [nation#X, o_year#X, sum#X, isEmpty#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [sum(amount#X)]
Aggregate Attributes [1]: [sum(amount#X)#X]
Results [3]: [nation#X, o_year#X, sum(amount#X)#X AS sum_profit#X]

(54) Sort
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: [nation#X ASC NULLS FIRST, o_year#X DESC NULLS LAST], true, 0

(55) AdaptiveSparkPlan
Output [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: isFinalPlan=true