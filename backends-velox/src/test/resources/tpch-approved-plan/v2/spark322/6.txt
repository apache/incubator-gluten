== Physical Plan ==
AdaptiveSparkPlan (13)
+- == Final Plan ==
   VeloxColumnarToRowExec (7)
   +- ^ RegularHashAggregateExecTransformer (5)
      +- ^ RegularHashAggregateExecTransformer (4)
         +- ^ ProjectExecTransformer (3)
            +- ^ FilterExecTransformer (2)
               +- ^ BatchScanExecTransformer (1)
+- == Initial Plan ==
   HashAggregate (12)
   +- HashAggregate (11)
      +- Project (10)
         +- Filter (9)
            +- BatchScan (8)


(1) BatchScanExecTransformer
Output [4]: [l_quantity#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
DataFilters: [isnotnull(l_shipdate#X), isnotnull(l_discount#X), isnotnull(l_quantity#X), (l_shipdate#X >= 1994-01-01), (l_shipdate#X < 1995-01-01), (l_discount#X >= 0.05), (l_discount#X <= 0.07), (l_quantity#X < 24.00)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_shipdate), IsNotNull(l_discount), IsNotNull(l_quantity), GreaterThanOrEqual(l_shipdate,1994-01-01), LessThan(l_shipdate,1995-01-01), GreaterThanOrEqual(l_discount,0.05), LessThanOrEqual(l_discount,0.07), LessThan(l_quantity,24.00)]
ReadSchema: struct<l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(2) FilterExecTransformer
Input [4]: [l_quantity#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: (((((((isnotnull(l_shipdate#X) AND isnotnull(l_discount#X)) AND isnotnull(l_quantity#X)) AND (l_shipdate#X >= 1994-01-01)) AND (l_shipdate#X < 1995-01-01)) AND (l_discount#X >= 0.05)) AND (l_discount#X <= 0.07)) AND (l_quantity#X < 24.00))

(3) ProjectExecTransformer
Output [3]: [l_extendedprice#X, l_discount#X, CheckOverflow((promote_precision(l_extendedprice#X) * promote_precision(l_discount#X)), DecimalType(25,4), true) AS _pre_193#X]
Input [4]: [l_quantity#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(4) RegularHashAggregateExecTransformer
Input [3]: [l_extendedprice#X, l_discount#X, _pre_193#X]
Keys: []
Functions [1]: [partial_sum(_pre_193#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(5) RegularHashAggregateExecTransformer
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum(CheckOverflow((promote_precision(l_extendedprice#X) * promote_precision(l_discount#X)), DecimalType(25,4), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(l_extendedprice#X) * promote_precision(l_discount#X)), DecimalType(25,4), true))#X]
Results [1]: [sum(CheckOverflow((promote_precision(l_extendedprice#X) * promote_precision(l_discount#X)), DecimalType(25,4), true))#X AS revenue#X]

(6) WholeStageCodegenTransformer (X)
Input [1]: [revenue#X]
Arguments: false

(7) VeloxColumnarToRowExec
Input [1]: [revenue#X]

(8) BatchScan
Output [4]: [l_quantity#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
DataFilters: [isnotnull(l_shipdate#X), isnotnull(l_discount#X), isnotnull(l_quantity#X), (l_shipdate#X >= 1994-01-01), (l_shipdate#X < 1995-01-01), (l_discount#X >= 0.05), (l_discount#X <= 0.07), (l_quantity#X < 24.00)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_shipdate), IsNotNull(l_discount), IsNotNull(l_quantity), GreaterThanOrEqual(l_shipdate,1994-01-01), LessThan(l_shipdate,1995-01-01), GreaterThanOrEqual(l_discount,0.05), LessThanOrEqual(l_discount,0.07), LessThan(l_quantity,24.00)]
ReadSchema: struct<l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(9) Filter
Input [4]: [l_quantity#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Condition : (((((((isnotnull(l_shipdate#X) AND isnotnull(l_discount#X)) AND isnotnull(l_quantity#X)) AND (l_shipdate#X >= 1994-01-01)) AND (l_shipdate#X < 1995-01-01)) AND (l_discount#X >= 0.05)) AND (l_discount#X <= 0.07)) AND (l_quantity#X < 24.00))

(10) Project
Output [2]: [l_extendedprice#X, l_discount#X]
Input [4]: [l_quantity#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(11) HashAggregate
Input [2]: [l_extendedprice#X, l_discount#X]
Keys: []
Functions [1]: [partial_sum(CheckOverflow((promote_precision(l_extendedprice#X) * promote_precision(l_discount#X)), DecimalType(25,4), true))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(12) HashAggregate
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum(CheckOverflow((promote_precision(l_extendedprice#X) * promote_precision(l_discount#X)), DecimalType(25,4), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(l_extendedprice#X) * promote_precision(l_discount#X)), DecimalType(25,4), true))#X]
Results [1]: [sum(CheckOverflow((promote_precision(l_extendedprice#X) * promote_precision(l_discount#X)), DecimalType(25,4), true))#X AS revenue#X]

(13) AdaptiveSparkPlan
Output [1]: [revenue#X]
Arguments: isFinalPlan=true