== Physical Plan ==
AdaptiveSparkPlan (103)
+- == Final Plan ==
   VeloxColumnarToRowExec (70)
   +- TakeOrderedAndProjectExecTransformer (69)
      +- ^ ProjectExecTransformer (67)
         +- ^ RegularHashAggregateExecTransformer (66)
            +- ^ InputIteratorTransformer (65)
               +- ^ InputAdapter (64)
                  +- ^ ShuffleQueryStage (63)
                     +- ColumnarExchange (62)
                        +- ^ ProjectExecTransformer (60)
                           +- ^ FlushableHashAggregateExecTransformer (59)
                              +- ^ ProjectExecTransformer (58)
                                 +- ^ GlutenBroadcastHashJoinExecTransformer Inner (57)
                                    :- ^ ProjectExecTransformer (46)
                                    :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (45)
                                    :     :- ^ ProjectExecTransformer (34)
                                    :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (33)
                                    :     :     :- ^ InputIteratorTransformer (9)
                                    :     :     :  +- ^ InputAdapter (8)
                                    :     :     :     +- ^ RowToVeloxColumnar (7)
                                    :     :     :        +- ^ BroadcastQueryStage (6)
                                    :     :     :           +- BroadcastExchange (5)
                                    :     :     :              +- VeloxColumnarToRowExec (4)
                                    :     :     :                 +- ^ FilterExecTransformer (2)
                                    :     :     :                    +- ^ Scan parquet (1)
                                    :     :     +- ^ GlutenBroadcastHashJoinExecTransformer LeftAnti (32)
                                    :     :        :- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (21)
                                    :     :        :  :- ^ ProjectExecTransformer (12)
                                    :     :        :  :  +- ^ FilterExecTransformer (11)
                                    :     :        :  :     +- ^ Scan parquet (10)
                                    :     :        :  +- ^ InputIteratorTransformer (20)
                                    :     :        :     +- ^ InputAdapter (19)
                                    :     :        :        +- ^ RowToVeloxColumnar (18)
                                    :     :        :           +- ^ BroadcastQueryStage (17)
                                    :     :        :              +- BroadcastExchange (16)
                                    :     :        :                 +- VeloxColumnarToRowExec (15)
                                    :     :        :                    +- ^ Scan parquet (13)
                                    :     :        +- ^ InputIteratorTransformer (31)
                                    :     :           +- ^ InputAdapter (30)
                                    :     :              +- ^ RowToVeloxColumnar (29)
                                    :     :                 +- ^ BroadcastQueryStage (28)
                                    :     :                    +- BroadcastExchange (27)
                                    :     :                       +- VeloxColumnarToRowExec (26)
                                    :     :                          +- ^ ProjectExecTransformer (24)
                                    :     :                             +- ^ FilterExecTransformer (23)
                                    :     :                                +- ^ Scan parquet (22)
                                    :     +- ^ InputIteratorTransformer (44)
                                    :        +- ^ InputAdapter (43)
                                    :           +- ^ RowToVeloxColumnar (42)
                                    :              +- ^ BroadcastQueryStage (41)
                                    :                 +- BroadcastExchange (40)
                                    :                    +- VeloxColumnarToRowExec (39)
                                    :                       +- ^ ProjectExecTransformer (37)
                                    :                          +- ^ FilterExecTransformer (36)
                                    :                             +- ^ Scan parquet (35)
                                    +- ^ InputIteratorTransformer (56)
                                       +- ^ InputAdapter (55)
                                          +- ^ RowToVeloxColumnar (54)
                                             +- ^ BroadcastQueryStage (53)
                                                +- BroadcastExchange (52)
                                                   +- VeloxColumnarToRowExec (51)
                                                      +- ^ ProjectExecTransformer (49)
                                                         +- ^ FilterExecTransformer (48)
                                                            +- ^ Scan parquet (47)
+- == Initial Plan ==
   TakeOrderedAndProject (102)
   +- HashAggregate (101)
      +- Exchange (100)
         +- HashAggregate (99)
            +- Project (98)
               +- BroadcastHashJoin Inner BuildRight (97)
                  :- Project (92)
                  :  +- BroadcastHashJoin Inner BuildRight (91)
                  :     :- Project (86)
                  :     :  +- BroadcastHashJoin Inner BuildLeft (85)
                  :     :     :- BroadcastExchange (73)
                  :     :     :  +- Filter (72)
                  :     :     :     +- Scan parquet (71)
                  :     :     +- BroadcastHashJoin LeftAnti BuildRight (84)
                  :     :        :- BroadcastHashJoin LeftSemi BuildRight (79)
                  :     :        :  :- Project (76)
                  :     :        :  :  +- Filter (75)
                  :     :        :  :     +- Scan parquet (74)
                  :     :        :  +- BroadcastExchange (78)
                  :     :        :     +- Scan parquet (77)
                  :     :        +- BroadcastExchange (83)
                  :     :           +- Project (82)
                  :     :              +- Filter (81)
                  :     :                 +- Scan parquet (80)
                  :     +- BroadcastExchange (90)
                  :        +- Project (89)
                  :           +- Filter (88)
                  :              +- Scan parquet (87)
                  +- BroadcastExchange (96)
                     +- Project (95)
                        +- Filter (94)
                           +- Scan parquet (93)


(1) Scan parquet
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(3) WholeStageCodegenTransformer (X)
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: false

(4) VeloxColumnarToRowExec
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(5) BroadcastExchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(6) BroadcastQueryStage
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: 0

(7) RowToVeloxColumnar
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(8) InputAdapter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(9) InputIteratorTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(10) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(11) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(12) ProjectExecTransformer
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(13) Scan parquet
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(14) WholeStageCodegenTransformer (X)
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: false

(15) VeloxColumnarToRowExec
Input [2]: [l_orderkey#X, l_suppkey#X]

(16) BroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(17) BroadcastQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: 1

(18) RowToVeloxColumnar
Input [2]: [l_orderkey#X, l_suppkey#X]

(19) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(20) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(21) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(22) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(23) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(24) ProjectExecTransformer
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(25) WholeStageCodegenTransformer (X)
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: false

(26) VeloxColumnarToRowExec
Input [2]: [l_orderkey#X, l_suppkey#X]

(27) BroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(28) BroadcastQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: 2

(29) RowToVeloxColumnar
Input [2]: [l_orderkey#X, l_suppkey#X]

(30) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(31) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(32) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(33) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(34) ProjectExecTransformer
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(35) Scan parquet
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(36) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderstatus#X]
Arguments: ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(37) ProjectExecTransformer
Output [1]: [o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(38) WholeStageCodegenTransformer (X)
Input [1]: [o_orderkey#X]
Arguments: false

(39) VeloxColumnarToRowExec
Input [1]: [o_orderkey#X]

(40) BroadcastExchange
Input [1]: [o_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(41) BroadcastQueryStage
Output [1]: [o_orderkey#X]
Arguments: 3

(42) RowToVeloxColumnar
Input [1]: [o_orderkey#X]

(43) InputAdapter
Input [1]: [o_orderkey#X]

(44) InputIteratorTransformer
Input [1]: [o_orderkey#X]

(45) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(46) ProjectExecTransformer
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(47) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(48) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(49) ProjectExecTransformer
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(50) WholeStageCodegenTransformer (X)
Input [1]: [n_nationkey#X]
Arguments: false

(51) VeloxColumnarToRowExec
Input [1]: [n_nationkey#X]

(52) BroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(53) BroadcastQueryStage
Output [1]: [n_nationkey#X]
Arguments: 4

(54) RowToVeloxColumnar
Input [1]: [n_nationkey#X]

(55) InputAdapter
Input [1]: [n_nationkey#X]

(56) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(57) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(58) ProjectExecTransformer
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(59) FlushableHashAggregateExecTransformer
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(60) ProjectExecTransformer
Output [3]: [hash(s_name#X, 42) AS hash_partition_key#X, s_name#X, count#X]
Input [2]: [s_name#X, count#X]

(61) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: false

(62) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [s_name#X, count#X], [plan_id=X], [id=#X]

(63) ShuffleQueryStage
Output [2]: [s_name#X, count#X]
Arguments: 5

(64) InputAdapter
Input [2]: [s_name#X, count#X]

(65) InputIteratorTransformer
Input [2]: [s_name#X, count#X]

(66) RegularHashAggregateExecTransformer
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X]

(67) ProjectExecTransformer
Output [2]: [s_name#X, count(1)#X AS numwait#X]
Input [2]: [s_name#X, count(1)#X]

(68) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, numwait#X]
Arguments: false

(69) TakeOrderedAndProjectExecTransformer
Input [2]: [s_name#X, numwait#X]
Arguments: 100, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X], 0

(70) VeloxColumnarToRowExec
Input [2]: [s_name#X, numwait#X]

(71) Scan parquet
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(72) Filter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(73) BroadcastExchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(74) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(75) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(76) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(77) Scan parquet
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(78) BroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(79) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(80) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(81) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(82) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(83) BroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(84) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(85) BroadcastHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(86) Project
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(87) Scan parquet
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(88) Filter
Input [2]: [o_orderkey#X, o_orderstatus#X]
Condition : ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(89) Project
Output [1]: [o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(90) BroadcastExchange
Input [1]: [o_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(91) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(92) Project
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(93) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(94) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(95) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(96) BroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(97) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(98) Project
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(99) HashAggregate
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(100) Exchange
Input [2]: [s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(101) HashAggregate
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(102) TakeOrderedAndProject
Input [2]: [s_name#X, numwait#X]
Arguments: 100, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X]

(103) AdaptiveSparkPlan
Output [2]: [s_name#X, numwait#X]
Arguments: isFinalPlan=true