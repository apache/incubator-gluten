== Physical Plan ==
AdaptiveSparkPlan (119)
+- == Final Plan ==
   VeloxColumnarToRowExec (82)
   +- ^ SortExecTransformer (80)
      +- ^ InputIteratorTransformer (79)
         +- ^ InputAdapter (78)
            +- ^ ShuffleQueryStage (77)
               +- ColumnarExchange (76)
                  +- ^ ProjectExecTransformer (74)
                     +- ^ GlutenBroadcastHashJoinExecTransformer Inner (73)
                        :- ^ ProjectExecTransformer (62)
                        :  +- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (61)
                        :     :- ^ InputIteratorTransformer (9)
                        :     :  +- ^ InputAdapter (8)
                        :     :     +- ^ AQEShuffleRead (7)
                        :     :        +- ^ ShuffleQueryStage (6)
                        :     :           +- ColumnarExchange (5)
                        :     :              +- ^ ProjectExecTransformer (3)
                        :     :                 +- ^ FilterExecTransformer (2)
                        :     :                    +- ^ Scan parquet (1)
                        :     +- ^ InputIteratorTransformer (60)
                        :        +- ^ InputAdapter (59)
                        :           +- ^ RowToVeloxColumnar (58)
                        :              +- ^ BroadcastQueryStage (57)
                        :                 +- BroadcastExchange (56)
                        :                    +- VeloxColumnarToRowExec (55)
                        :                       +- AQEShuffleRead (54)
                        :                          +- ShuffleQueryStage (53)
                        :                             +- ColumnarExchange (52)
                        :                                +- ^ ProjectExecTransformer (50)
                        :                                   +- ^ GlutenBroadcastHashJoinExecTransformer Inner (49)
                        :                                      :- ^ InputIteratorTransformer (29)
                        :                                      :  +- ^ InputAdapter (28)
                        :                                      :     +- ^ RowToVeloxColumnar (27)
                        :                                      :        +- ^ BroadcastQueryStage (26)
                        :                                      :           +- BroadcastExchange (25)
                        :                                      :              +- VeloxColumnarToRowExec (24)
                        :                                      :                 +- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (22)
                        :                                      :                    :- ^ FilterExecTransformer (11)
                        :                                      :                    :  +- ^ Scan parquet (10)
                        :                                      :                    +- ^ InputIteratorTransformer (21)
                        :                                      :                       +- ^ InputAdapter (20)
                        :                                      :                          +- ^ RowToVeloxColumnar (19)
                        :                                      :                             +- ^ BroadcastQueryStage (18)
                        :                                      :                                +- BroadcastExchange (17)
                        :                                      :                                   +- VeloxColumnarToRowExec (16)
                        :                                      :                                      +- ^ ProjectExecTransformer (14)
                        :                                      :                                         +- ^ FilterExecTransformer (13)
                        :                                      :                                            +- ^ Scan parquet (12)
                        :                                      +- ^ FilterExecTransformer (48)
                        :                                         +- ^ ProjectExecTransformer (47)
                        :                                            +- ^ RegularHashAggregateExecTransformer (46)
                        :                                               +- ^ InputIteratorTransformer (45)
                        :                                                  +- ^ InputAdapter (44)
                        :                                                     +- ^ ShuffleQueryStage (43)
                        :                                                        +- ColumnarExchange (42)
                        :                                                           +- ^ ProjectExecTransformer (40)
                        :                                                              +- ^ FlushableHashAggregateExecTransformer (39)
                        :                                                                 +- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (38)
                        :                                                                    :- ^ ProjectExecTransformer (32)
                        :                                                                    :  +- ^ FilterExecTransformer (31)
                        :                                                                    :     +- ^ Scan parquet (30)
                        :                                                                    +- ^ InputIteratorTransformer (37)
                        :                                                                       +- ^ InputAdapter (36)
                        :                                                                          +- ^ RowToVeloxColumnar (35)
                        :                                                                             +- ^ BroadcastQueryStage (34)
                        :                                                                                +- ReusedExchange (33)
                        +- ^ InputIteratorTransformer (72)
                           +- ^ InputAdapter (71)
                              +- ^ RowToVeloxColumnar (70)
                                 +- ^ BroadcastQueryStage (69)
                                    +- BroadcastExchange (68)
                                       +- VeloxColumnarToRowExec (67)
                                          +- ^ ProjectExecTransformer (65)
                                             +- ^ FilterExecTransformer (64)
                                                +- ^ Scan parquet (63)
+- == Initial Plan ==
   Sort (118)
   +- Exchange (117)
      +- Project (116)
         +- BroadcastHashJoin Inner BuildRight (115)
            :- Project (110)
            :  +- ShuffledHashJoin LeftSemi BuildRight (109)
            :     :- Exchange (85)
            :     :  +- Filter (84)
            :     :     +- Scan parquet (83)
            :     +- Exchange (108)
            :        +- Project (107)
            :           +- BroadcastHashJoin Inner BuildLeft (106)
            :              :- BroadcastExchange (93)
            :              :  +- BroadcastHashJoin LeftSemi BuildRight (92)
            :              :     :- Filter (87)
            :              :     :  +- Scan parquet (86)
            :              :     +- BroadcastExchange (91)
            :              :        +- Project (90)
            :              :           +- Filter (89)
            :              :              +- Scan parquet (88)
            :              +- Filter (105)
            :                 +- HashAggregate (104)
            :                    +- Exchange (103)
            :                       +- HashAggregate (102)
            :                          +- BroadcastHashJoin LeftSemi BuildRight (101)
            :                             :- Project (96)
            :                             :  +- Filter (95)
            :                             :     +- Scan parquet (94)
            :                             +- BroadcastExchange (100)
            :                                +- Project (99)
            :                                   +- Filter (98)
            :                                      +- Scan parquet (97)
            +- BroadcastExchange (114)
               +- Project (113)
                  +- Filter (112)
                     +- Scan parquet (111)


(1) Scan parquet
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: isnotnull(s_nationkey#X)

(3) ProjectExecTransformer
Output [5]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(4) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: false

(5) ColumnarExchange
Input [5]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: 0

(7) AQEShuffleRead
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: local

(8) InputAdapter
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(9) InputIteratorTransformer
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(10) Scan parquet
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>

(11) FilterExecTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: ((isnotnull(ps_availqty#X) AND isnotnull(ps_partkey#X)) AND isnotnull(ps_suppkey#X))

(12) Scan parquet
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,forest)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(13) FilterExecTransformer
Input [2]: [p_partkey#X, p_name#X]
Arguments: (isnotnull(p_name#X) AND StartsWith(p_name#X, forest))

(14) ProjectExecTransformer
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(15) WholeStageCodegenTransformer (X)
Input [1]: [p_partkey#X]
Arguments: false

(16) VeloxColumnarToRowExec
Input [1]: [p_partkey#X]

(17) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(18) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 1

(19) RowToVeloxColumnar
Input [1]: [p_partkey#X]

(20) InputAdapter
Input [1]: [p_partkey#X]

(21) InputIteratorTransformer
Input [1]: [p_partkey#X]

(22) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(23) WholeStageCodegenTransformer (X)
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: false

(24) VeloxColumnarToRowExec
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]

(25) BroadcastExchange
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [plan_id=X]

(26) BroadcastQueryStage
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: 5

(27) RowToVeloxColumnar
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]

(28) InputAdapter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]

(29) InputIteratorTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]

(30) Scan parquet
Output [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1994-01-01), LessThan(l_shipdate,1995-01-01), IsNotNull(l_partkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_shipdate:date>

(31) FilterExecTransformer
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Arguments: ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1994-01-01)) AND (l_shipdate#X < 1995-01-01)) AND isnotnull(l_partkey#X)) AND isnotnull(l_suppkey#X))

(32) ProjectExecTransformer
Output [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]

(33) ReusedExchange [Reuses operator id: 17]
Output [1]: [p_partkey#X]

(34) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 3

(35) RowToVeloxColumnar
Input [1]: [p_partkey#X]

(36) InputAdapter
Input [1]: [p_partkey#X]

(37) InputIteratorTransformer
Input [1]: [p_partkey#X]

(38) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(39) FlushableHashAggregateExecTransformer
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(40) ProjectExecTransformer
Output [5]: [hash(l_partkey#X, l_suppkey#X, 42) AS hash_partition_key#X, l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(41) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: false

(42) ColumnarExchange
Input [5]: [hash_partition_key#X, l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_partkey#X, l_suppkey#X, 1), ENSURE_REQUIREMENTS, [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(43) ShuffleQueryStage
Output [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: 6

(44) InputAdapter
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(45) InputIteratorTransformer
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(46) RegularHashAggregateExecTransformer
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [3]: [l_partkey#X, l_suppkey#X, sum(l_quantity#X)#X]

(47) ProjectExecTransformer
Output [3]: [CheckOverflow((0.50 * promote_precision(sum(l_quantity#X)#X)), DecimalType(24,3), true) AS (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]
Input [3]: [l_partkey#X, l_suppkey#X, sum(l_quantity#X)#X]

(48) FilterExecTransformer
Input [3]: [(0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]
Arguments: isnotnull((0.5 * sum(l_quantity))#X)

(49) GlutenBroadcastHashJoinExecTransformer
Left keys [2]: [ps_partkey#X, ps_suppkey#X]
Right keys [2]: [l_partkey#X, l_suppkey#X]
Join condition: (cast(cast(ps_availqty#X as decimal(10,0)) as decimal(24,3)) > (0.5 * sum(l_quantity))#X)

(50) ProjectExecTransformer
Output [2]: [hash(ps_suppkey#X, 42) AS hash_partition_key#X, ps_suppkey#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(51) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, ps_suppkey#X]
Arguments: false

(52) ColumnarExchange
Input [2]: [hash_partition_key#X, ps_suppkey#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [ps_suppkey#X], [plan_id=X], [id=#X]

(53) ShuffleQueryStage
Output [1]: [ps_suppkey#X]
Arguments: 7

(54) AQEShuffleRead
Input [1]: [ps_suppkey#X]
Arguments: local

(55) VeloxColumnarToRowExec
Input [1]: [ps_suppkey#X]

(56) BroadcastExchange
Input [1]: [ps_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(57) BroadcastQueryStage
Output [1]: [ps_suppkey#X]
Arguments: 8

(58) RowToVeloxColumnar
Input [1]: [ps_suppkey#X]

(59) InputAdapter
Input [1]: [ps_suppkey#X]

(60) InputIteratorTransformer
Input [1]: [ps_suppkey#X]

(61) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [ps_suppkey#X]
Join condition: None

(62) ProjectExecTransformer
Output [3]: [s_name#X, s_address#X, s_nationkey#X]
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(63) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,CANADA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(64) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = CANADA)) AND isnotnull(n_nationkey#X))

(65) ProjectExecTransformer
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(66) WholeStageCodegenTransformer (X)
Input [1]: [n_nationkey#X]
Arguments: false

(67) VeloxColumnarToRowExec
Input [1]: [n_nationkey#X]

(68) BroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(69) BroadcastQueryStage
Output [1]: [n_nationkey#X]
Arguments: 4

(70) RowToVeloxColumnar
Input [1]: [n_nationkey#X]

(71) InputAdapter
Input [1]: [n_nationkey#X]

(72) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(73) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(74) ProjectExecTransformer
Output [2]: [s_name#X, s_address#X]
Input [4]: [s_name#X, s_address#X, s_nationkey#X, n_nationkey#X]

(75) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, s_address#X]
Arguments: false

(76) ColumnarExchange
Input [2]: [s_name#X, s_address#X]
Arguments: rangepartitioning(s_name#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(77) ShuffleQueryStage
Output [2]: [s_name#X, s_address#X]
Arguments: 9

(78) InputAdapter
Input [2]: [s_name#X, s_address#X]

(79) InputIteratorTransformer
Input [2]: [s_name#X, s_address#X]

(80) SortExecTransformer
Input [2]: [s_name#X, s_address#X]
Arguments: [s_name#X ASC NULLS FIRST], true, 0

(81) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, s_address#X]
Arguments: false

(82) VeloxColumnarToRowExec
Input [2]: [s_name#X, s_address#X]

(83) Scan parquet
Output [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint>

(84) Filter
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Condition : isnotnull(s_nationkey#X)

(85) Exchange
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(86) Scan parquet
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>

(87) Filter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Condition : ((isnotnull(ps_availqty#X) AND isnotnull(ps_partkey#X)) AND isnotnull(ps_suppkey#X))

(88) Scan parquet
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,forest)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(89) Filter
Input [2]: [p_partkey#X, p_name#X]
Condition : (isnotnull(p_name#X) AND StartsWith(p_name#X, forest))

(90) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(91) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(92) BroadcastHashJoin
Left keys [1]: [ps_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(93) BroadcastExchange
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [plan_id=X]

(94) Scan parquet
Output [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1994-01-01), LessThan(l_shipdate,1995-01-01), IsNotNull(l_partkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_shipdate:date>

(95) Filter
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]
Condition : ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1994-01-01)) AND (l_shipdate#X < 1995-01-01)) AND isnotnull(l_partkey#X)) AND isnotnull(l_suppkey#X))

(96) Project
Output [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Input [4]: [l_partkey#X, l_suppkey#X, l_quantity#X, l_shipdate#X]

(97) Scan parquet
Output [2]: [p_partkey#X, p_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,forest)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(98) Filter
Input [2]: [p_partkey#X, p_name#X]
Condition : (isnotnull(p_name#X) AND StartsWith(p_name#X, forest))

(99) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(100) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(101) BroadcastHashJoin
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(102) HashAggregate
Input [3]: [l_partkey#X, l_suppkey#X, l_quantity#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [partial_sum(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]

(103) Exchange
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(l_partkey#X, l_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(104) HashAggregate
Input [4]: [l_partkey#X, l_suppkey#X, sum#X, isEmpty#X]
Keys [2]: [l_partkey#X, l_suppkey#X]
Functions [1]: [sum(l_quantity#X)]
Aggregate Attributes [1]: [sum(l_quantity#X)#X]
Results [3]: [CheckOverflow((0.50 * promote_precision(sum(l_quantity#X)#X)), DecimalType(24,3), true) AS (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(105) Filter
Input [3]: [(0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]
Condition : isnotnull((0.5 * sum(l_quantity))#X)

(106) BroadcastHashJoin
Left keys [2]: [ps_partkey#X, ps_suppkey#X]
Right keys [2]: [l_partkey#X, l_suppkey#X]
Join condition: (cast(cast(ps_availqty#X as decimal(10,0)) as decimal(24,3)) > (0.5 * sum(l_quantity))#X)

(107) Project
Output [1]: [ps_suppkey#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, (0.5 * sum(l_quantity))#X, l_partkey#X, l_suppkey#X]

(108) Exchange
Input [1]: [ps_suppkey#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(109) ShuffledHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [ps_suppkey#X]
Join condition: None

(110) Project
Output [3]: [s_name#X, s_address#X, s_nationkey#X]
Input [4]: [s_suppkey#X, s_name#X, s_address#X, s_nationkey#X]

(111) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,CANADA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(112) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = CANADA)) AND isnotnull(n_nationkey#X))

(113) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(114) BroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(115) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(116) Project
Output [2]: [s_name#X, s_address#X]
Input [4]: [s_name#X, s_address#X, s_nationkey#X, n_nationkey#X]

(117) Exchange
Input [2]: [s_name#X, s_address#X]
Arguments: rangepartitioning(s_name#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(118) Sort
Input [2]: [s_name#X, s_address#X]
Arguments: [s_name#X ASC NULLS FIRST], true, 0

(119) AdaptiveSparkPlan
Output [2]: [s_name#X, s_address#X]
Arguments: isFinalPlan=true