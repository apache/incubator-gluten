== Physical Plan ==
AdaptiveSparkPlan (143)
+- == Final Plan ==
   VeloxColumnarToRowExec (98)
   +- ^ SortExecTransformer (96)
      +- ^ InputIteratorTransformer (95)
         +- ^ InputAdapter (94)
            +- ^ ShuffleQueryStage (93)
               +- ColumnarExchange (92)
                  +- ^ ProjectExecTransformer (90)
                     +- ^ RegularHashAggregateExecTransformer (89)
                        +- ^ InputIteratorTransformer (88)
                           +- ^ InputAdapter (87)
                              +- ^ ShuffleQueryStage (86)
                                 +- ColumnarExchange (85)
                                    +- ^ ProjectExecTransformer (83)
                                       +- ^ FlushableHashAggregateExecTransformer (82)
                                          +- ^ ProjectExecTransformer (81)
                                             +- ^ GlutenBroadcastHashJoinExecTransformer Inner (80)
                                                :- ^ ProjectExecTransformer (69)
                                                :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (68)
                                                :     :- ^ ProjectExecTransformer (58)
                                                :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (57)
                                                :     :     :- ^ ProjectExecTransformer (47)
                                                :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (46)
                                                :     :     :     :- ^ ProjectExecTransformer (36)
                                                :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (35)
                                                :     :     :     :     :- ^ ProjectExecTransformer (25)
                                                :     :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (24)
                                                :     :     :     :     :     :- ^ ProjectExecTransformer (14)
                                                :     :     :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (13)
                                                :     :     :     :     :     :     :- ^ InputIteratorTransformer (10)
                                                :     :     :     :     :     :     :  +- ^ InputAdapter (9)
                                                :     :     :     :     :     :     :     +- ^ RowToVeloxColumnar (8)
                                                :     :     :     :     :     :     :        +- ^ BroadcastQueryStage (7)
                                                :     :     :     :     :     :     :           +- BroadcastExchange (6)
                                                :     :     :     :     :     :     :              +- VeloxColumnarToRowExec (5)
                                                :     :     :     :     :     :     :                 +- ^ ProjectExecTransformer (3)
                                                :     :     :     :     :     :     :                    +- ^ FilterExecTransformer (2)
                                                :     :     :     :     :     :     :                       +- ^ Scan parquet (1)
                                                :     :     :     :     :     :     +- ^ FilterExecTransformer (12)
                                                :     :     :     :     :     :        +- ^ Scan parquet (11)
                                                :     :     :     :     :     +- ^ InputIteratorTransformer (23)
                                                :     :     :     :     :        +- ^ InputAdapter (22)
                                                :     :     :     :     :           +- ^ RowToVeloxColumnar (21)
                                                :     :     :     :     :              +- ^ BroadcastQueryStage (20)
                                                :     :     :     :     :                 +- BroadcastExchange (19)
                                                :     :     :     :     :                    +- VeloxColumnarToRowExec (18)
                                                :     :     :     :     :                       +- ^ FilterExecTransformer (16)
                                                :     :     :     :     :                          +- ^ Scan parquet (15)
                                                :     :     :     :     +- ^ InputIteratorTransformer (34)
                                                :     :     :     :        +- ^ InputAdapter (33)
                                                :     :     :     :           +- ^ RowToVeloxColumnar (32)
                                                :     :     :     :              +- ^ BroadcastQueryStage (31)
                                                :     :     :     :                 +- BroadcastExchange (30)
                                                :     :     :     :                    +- VeloxColumnarToRowExec (29)
                                                :     :     :     :                       +- ^ FilterExecTransformer (27)
                                                :     :     :     :                          +- ^ Scan parquet (26)
                                                :     :     :     +- ^ InputIteratorTransformer (45)
                                                :     :     :        +- ^ InputAdapter (44)
                                                :     :     :           +- ^ RowToVeloxColumnar (43)
                                                :     :     :              +- ^ BroadcastQueryStage (42)
                                                :     :     :                 +- BroadcastExchange (41)
                                                :     :     :                    +- VeloxColumnarToRowExec (40)
                                                :     :     :                       +- ^ FilterExecTransformer (38)
                                                :     :     :                          +- ^ Scan parquet (37)
                                                :     :     +- ^ InputIteratorTransformer (56)
                                                :     :        +- ^ InputAdapter (55)
                                                :     :           +- ^ RowToVeloxColumnar (54)
                                                :     :              +- ^ BroadcastQueryStage (53)
                                                :     :                 +- BroadcastExchange (52)
                                                :     :                    +- VeloxColumnarToRowExec (51)
                                                :     :                       +- ^ FilterExecTransformer (49)
                                                :     :                          +- ^ Scan parquet (48)
                                                :     +- ^ InputIteratorTransformer (67)
                                                :        +- ^ InputAdapter (66)
                                                :           +- ^ RowToVeloxColumnar (65)
                                                :              +- ^ BroadcastQueryStage (64)
                                                :                 +- BroadcastExchange (63)
                                                :                    +- VeloxColumnarToRowExec (62)
                                                :                       +- ^ FilterExecTransformer (60)
                                                :                          +- ^ Scan parquet (59)
                                                +- ^ InputIteratorTransformer (79)
                                                   +- ^ InputAdapter (78)
                                                      +- ^ RowToVeloxColumnar (77)
                                                         +- ^ BroadcastQueryStage (76)
                                                            +- BroadcastExchange (75)
                                                               +- VeloxColumnarToRowExec (74)
                                                                  +- ^ ProjectExecTransformer (72)
                                                                     +- ^ FilterExecTransformer (71)
                                                                        +- ^ Scan parquet (70)
+- == Initial Plan ==
   Sort (142)
   +- Exchange (141)
      +- HashAggregate (140)
         +- Exchange (139)
            +- HashAggregate (138)
               +- Project (137)
                  +- BroadcastHashJoin Inner BuildRight (136)
                     :- Project (131)
                     :  +- BroadcastHashJoin Inner BuildRight (130)
                     :     :- Project (126)
                     :     :  +- BroadcastHashJoin Inner BuildRight (125)
                     :     :     :- Project (121)
                     :     :     :  +- BroadcastHashJoin Inner BuildRight (120)
                     :     :     :     :- Project (116)
                     :     :     :     :  +- BroadcastHashJoin Inner BuildRight (115)
                     :     :     :     :     :- Project (111)
                     :     :     :     :     :  +- BroadcastHashJoin Inner BuildRight (110)
                     :     :     :     :     :     :- Project (106)
                     :     :     :     :     :     :  +- BroadcastHashJoin Inner BuildLeft (105)
                     :     :     :     :     :     :     :- BroadcastExchange (102)
                     :     :     :     :     :     :     :  +- Project (101)
                     :     :     :     :     :     :     :     +- Filter (100)
                     :     :     :     :     :     :     :        +- Scan parquet (99)
                     :     :     :     :     :     :     +- Filter (104)
                     :     :     :     :     :     :        +- Scan parquet (103)
                     :     :     :     :     :     +- BroadcastExchange (109)
                     :     :     :     :     :        +- Filter (108)
                     :     :     :     :     :           +- Scan parquet (107)
                     :     :     :     :     +- BroadcastExchange (114)
                     :     :     :     :        +- Filter (113)
                     :     :     :     :           +- Scan parquet (112)
                     :     :     :     +- BroadcastExchange (119)
                     :     :     :        +- Filter (118)
                     :     :     :           +- Scan parquet (117)
                     :     :     +- BroadcastExchange (124)
                     :     :        +- Filter (123)
                     :     :           +- Scan parquet (122)
                     :     +- BroadcastExchange (129)
                     :        +- Filter (128)
                     :           +- Scan parquet (127)
                     +- BroadcastExchange (135)
                        +- Project (134)
                           +- Filter (133)
                              +- Scan parquet (132)


(1) Scan parquet
Output [2]: [p_partkey#X, p_type#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_type), EqualTo(p_type,ECONOMY ANODIZED STEEL), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string>

(2) FilterExecTransformer
Input [2]: [p_partkey#X, p_type#X]
Arguments: ((isnotnull(p_type#X) AND (p_type#X = ECONOMY ANODIZED STEEL)) AND isnotnull(p_partkey#X))

(3) ProjectExecTransformer
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_type#X]

(4) WholeStageCodegenTransformer (X)
Input [1]: [p_partkey#X]
Arguments: false

(5) VeloxColumnarToRowExec
Input [1]: [p_partkey#X]

(6) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(7) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 0

(8) RowToVeloxColumnar
Input [1]: [p_partkey#X]

(9) InputAdapter
Input [1]: [p_partkey#X]

(10) InputIteratorTransformer
Input [1]: [p_partkey#X]

(11) Scan parquet
Output [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(12) FilterExecTransformer
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(13) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(14) ProjectExecTransformer
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(15) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(16) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(17) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false

(18) VeloxColumnarToRowExec
Input [2]: [s_suppkey#X, s_nationkey#X]

(19) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(20) BroadcastQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: 1

(21) RowToVeloxColumnar
Input [2]: [s_suppkey#X, s_nationkey#X]

(22) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(23) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(24) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(25) ProjectExecTransformer
Output [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(26) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1995-01-01), LessThanOrEqual(o_orderdate,1996-12-31), IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(27) FilterExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1995-01-01)) AND (o_orderdate#X <= 1996-12-31)) AND isnotnull(o_orderkey#X)) AND isnotnull(o_custkey#X))

(28) WholeStageCodegenTransformer (X)
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: false

(29) VeloxColumnarToRowExec
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(30) BroadcastExchange
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(31) BroadcastQueryStage
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: 2

(32) RowToVeloxColumnar
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(33) InputAdapter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(34) InputIteratorTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(35) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(36) ProjectExecTransformer
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Input [7]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderkey#X, o_custkey#X, o_orderdate#X]

(37) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(38) FilterExecTransformer
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(39) WholeStageCodegenTransformer (X)
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: false

(40) VeloxColumnarToRowExec
Input [2]: [c_custkey#X, c_nationkey#X]

(41) BroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(42) BroadcastQueryStage
Output [2]: [c_custkey#X, c_nationkey#X]
Arguments: 3

(43) RowToVeloxColumnar
Input [2]: [c_custkey#X, c_nationkey#X]

(44) InputAdapter
Input [2]: [c_custkey#X, c_nationkey#X]

(45) InputIteratorTransformer
Input [2]: [c_custkey#X, c_nationkey#X]

(46) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(47) ProjectExecTransformer
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X, c_custkey#X, c_nationkey#X]

(48) Scan parquet
Output [2]: [n_nationkey#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(49) FilterExecTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(50) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: false

(51) VeloxColumnarToRowExec
Input [2]: [n_nationkey#X, n_regionkey#X]

(52) BroadcastExchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(53) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_regionkey#X]
Arguments: 4

(54) RowToVeloxColumnar
Input [2]: [n_nationkey#X, n_regionkey#X]

(55) InputAdapter
Input [2]: [n_nationkey#X, n_regionkey#X]

(56) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]

(57) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(58) ProjectExecTransformer
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X, n_nationkey#X, n_regionkey#X]

(59) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(60) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: isnotnull(n_nationkey#X)

(61) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_name#X]
Arguments: false

(62) VeloxColumnarToRowExec
Input [2]: [n_nationkey#X, n_name#X]

(63) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(64) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: 5

(65) RowToVeloxColumnar
Input [2]: [n_nationkey#X, n_name#X]

(66) InputAdapter
Input [2]: [n_nationkey#X, n_name#X]

(67) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(68) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(69) ProjectExecTransformer
Output [5]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X, n_nationkey#X, n_name#X]

(70) Scan parquet
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(71) FilterExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: ((isnotnull(r_name#X) AND (r_name#X = AMERICA)) AND isnotnull(r_regionkey#X))

(72) ProjectExecTransformer
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(73) WholeStageCodegenTransformer (X)
Input [1]: [r_regionkey#X]
Arguments: false

(74) VeloxColumnarToRowExec
Input [1]: [r_regionkey#X]

(75) BroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(76) BroadcastQueryStage
Output [1]: [r_regionkey#X]
Arguments: 6

(77) RowToVeloxColumnar
Input [1]: [r_regionkey#X]

(78) InputAdapter
Input [1]: [r_regionkey#X]

(79) InputIteratorTransformer
Input [1]: [r_regionkey#X]

(80) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(81) ProjectExecTransformer
Output [4]: [year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) AS volume#X, n_name#X AS nation#X, CASE WHEN (n_name#X = BRAZIL) THEN CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) ELSE 0.0000 END AS _pre_178#X]
Input [6]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X, r_regionkey#X]

(82) FlushableHashAggregateExecTransformer
Input [4]: [o_year#X, volume#X, nation#X, _pre_178#X]
Keys [1]: [o_year#X]
Functions [2]: [partial_sum(_pre_178#X), partial_sum(volume#X)]
Aggregate Attributes [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Results [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(83) ProjectExecTransformer
Output [6]: [hash(o_year#X, 42) AS hash_partition_key#X, o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(84) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: false

(85) ColumnarExchange
Input [6]: [hash_partition_key#X, o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(o_year#X, 1), ENSURE_REQUIREMENTS, [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(86) ShuffleQueryStage
Output [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: 7

(87) InputAdapter
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(88) InputIteratorTransformer
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(89) RegularHashAggregateExecTransformer
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Keys [1]: [o_year#X]
Functions [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), sum(volume#X)]
Aggregate Attributes [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]
Results [3]: [o_year#X, sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]

(90) ProjectExecTransformer
Output [2]: [o_year#X, CheckOverflow((promote_precision(sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X) / promote_precision(sum(volume#X)#X)), DecimalType(38,6), true) AS mkt_share#X]
Input [3]: [o_year#X, sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]

(91) WholeStageCodegenTransformer (X)
Input [2]: [o_year#X, mkt_share#X]
Arguments: false

(92) ColumnarExchange
Input [2]: [o_year#X, mkt_share#X]
Arguments: rangepartitioning(o_year#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(93) ShuffleQueryStage
Output [2]: [o_year#X, mkt_share#X]
Arguments: 8

(94) InputAdapter
Input [2]: [o_year#X, mkt_share#X]

(95) InputIteratorTransformer
Input [2]: [o_year#X, mkt_share#X]

(96) SortExecTransformer
Input [2]: [o_year#X, mkt_share#X]
Arguments: [o_year#X ASC NULLS FIRST], true, 0

(97) WholeStageCodegenTransformer (X)
Input [2]: [o_year#X, mkt_share#X]
Arguments: false

(98) VeloxColumnarToRowExec
Input [2]: [o_year#X, mkt_share#X]

(99) Scan parquet
Output [2]: [p_partkey#X, p_type#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_type), EqualTo(p_type,ECONOMY ANODIZED STEEL), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string>

(100) Filter
Input [2]: [p_partkey#X, p_type#X]
Condition : ((isnotnull(p_type#X) AND (p_type#X = ECONOMY ANODIZED STEEL)) AND isnotnull(p_partkey#X))

(101) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_type#X]

(102) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(103) Scan parquet
Output [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(104) Filter
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Condition : ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(105) BroadcastHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(106) Project
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(107) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(108) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(109) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(110) BroadcastHashJoin
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(111) Project
Output [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(112) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1995-01-01), LessThanOrEqual(o_orderdate,1996-12-31), IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(113) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Condition : ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1995-01-01)) AND (o_orderdate#X <= 1996-12-31)) AND isnotnull(o_orderkey#X)) AND isnotnull(o_custkey#X))

(114) BroadcastExchange
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(115) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(116) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Input [7]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderkey#X, o_custkey#X, o_orderdate#X]

(117) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(118) Filter
Input [2]: [c_custkey#X, c_nationkey#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(119) BroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(120) BroadcastHashJoin
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(121) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X, c_custkey#X, c_nationkey#X]

(122) Scan parquet
Output [2]: [n_nationkey#X, n_regionkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(123) Filter
Input [2]: [n_nationkey#X, n_regionkey#X]
Condition : (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(124) BroadcastExchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(125) BroadcastHashJoin
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(126) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X, n_nationkey#X, n_regionkey#X]

(127) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(128) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : isnotnull(n_nationkey#X)

(129) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(130) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(131) Project
Output [5]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X, n_nationkey#X, n_name#X]

(132) Scan parquet
Output [2]: [r_regionkey#X, r_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(133) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = AMERICA)) AND isnotnull(r_regionkey#X))

(134) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(135) BroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(136) BroadcastHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(137) Project
Output [3]: [year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) AS volume#X, n_name#X AS nation#X]
Input [6]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X, r_regionkey#X]

(138) HashAggregate
Input [3]: [o_year#X, volume#X, nation#X]
Keys [1]: [o_year#X]
Functions [2]: [partial_sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), partial_sum(volume#X)]
Aggregate Attributes [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Results [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(139) Exchange
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(o_year#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(140) HashAggregate
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Keys [1]: [o_year#X]
Functions [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), sum(volume#X)]
Aggregate Attributes [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]
Results [2]: [o_year#X, CheckOverflow((promote_precision(sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X) / promote_precision(sum(volume#X)#X)), DecimalType(38,6), true) AS mkt_share#X]

(141) Exchange
Input [2]: [o_year#X, mkt_share#X]
Arguments: rangepartitioning(o_year#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(142) Sort
Input [2]: [o_year#X, mkt_share#X]
Arguments: [o_year#X ASC NULLS FIRST], true, 0

(143) AdaptiveSparkPlan
Output [2]: [o_year#X, mkt_share#X]
Arguments: isFinalPlan=true