== Physical Plan ==
AdaptiveSparkPlan (54)
+- == Final Plan ==
   VeloxColumnarToRowExec (38)
   +- ^ SortExecTransformer (36)
      +- ^ InputIteratorTransformer (35)
         +- ^ InputAdapter (34)
            +- ^ ShuffleQueryStage (33)
               +- ColumnarExchange (32)
                  +- ^ RegularHashAggregateExecTransformer (30)
                     +- ^ InputIteratorTransformer (29)
                        +- ^ InputAdapter (28)
                           +- ^ ShuffleQueryStage (27)
                              +- ColumnarExchange (26)
                                 +- ^ ProjectExecTransformer (24)
                                    +- ^ FlushableHashAggregateExecTransformer (23)
                                       +- ^ ProjectExecTransformer (22)
                                          +- ^ RegularHashAggregateExecTransformer (21)
                                             +- ^ InputIteratorTransformer (20)
                                                +- ^ InputAdapter (19)
                                                   +- ^ ShuffleQueryStage (18)
                                                      +- ColumnarExchange (17)
                                                         +- ^ ProjectExecTransformer (15)
                                                            +- ^ FlushableHashAggregateExecTransformer (14)
                                                               +- ^ ProjectExecTransformer (13)
                                                                  +- ^ GlutenBroadcastHashJoinExecTransformer LeftOuter (12)
                                                                     :- ^ Scan parquet (1)
                                                                     +- ^ InputIteratorTransformer (11)
                                                                        +- ^ InputAdapter (10)
                                                                           +- ^ RowToVeloxColumnar (9)
                                                                              +- ^ BroadcastQueryStage (8)
                                                                                 +- BroadcastExchange (7)
                                                                                    +- VeloxColumnarToRowExec (6)
                                                                                       +- ^ ProjectExecTransformer (4)
                                                                                          +- ^ FilterExecTransformer (3)
                                                                                             +- ^ Scan parquet (2)
+- == Initial Plan ==
   Sort (53)
   +- Exchange (52)
      +- HashAggregate (51)
         +- Exchange (50)
            +- HashAggregate (49)
               +- HashAggregate (48)
                  +- Exchange (47)
                     +- HashAggregate (46)
                        +- Project (45)
                           +- BroadcastHashJoin LeftOuter BuildRight (44)
                              :- Scan parquet (39)
                              +- BroadcastExchange (43)
                                 +- Project (42)
                                    +- Filter (41)
                                       +- Scan parquet (40)


(1) Scan parquet
Output [1]: [c_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<c_custkey:bigint>

(2) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_comment), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_comment:string>

(3) FilterExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Arguments: ((isnotnull(o_comment#X) AND NOT o_comment#X LIKE %special%requests%) AND isnotnull(o_custkey#X))

(4) ProjectExecTransformer
Output [2]: [o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]

(5) WholeStageCodegenTransformer (X)
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: false

(6) VeloxColumnarToRowExec
Input [2]: [o_orderkey#X, o_custkey#X]

(7) BroadcastExchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=X]

(8) BroadcastQueryStage
Output [2]: [o_orderkey#X, o_custkey#X]
Arguments: 0

(9) RowToVeloxColumnar
Input [2]: [o_orderkey#X, o_custkey#X]

(10) InputAdapter
Input [2]: [o_orderkey#X, o_custkey#X]

(11) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_custkey#X]

(12) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(13) ProjectExecTransformer
Output [2]: [c_custkey#X, o_orderkey#X]
Input [3]: [c_custkey#X, o_orderkey#X, o_custkey#X]

(14) FlushableHashAggregateExecTransformer
Input [2]: [c_custkey#X, o_orderkey#X]
Keys [1]: [c_custkey#X]
Functions [1]: [partial_count(o_orderkey#X)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_custkey#X, count#X]

(15) ProjectExecTransformer
Output [3]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, count#X]
Input [2]: [c_custkey#X, count#X]

(16) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_custkey#X, count#X]
Arguments: false

(17) ColumnarExchange
Input [3]: [hash_partition_key#X, c_custkey#X, count#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, count#X], [plan_id=X], [id=#X]

(18) ShuffleQueryStage
Output [2]: [c_custkey#X, count#X]
Arguments: 1

(19) InputAdapter
Input [2]: [c_custkey#X, count#X]

(20) InputIteratorTransformer
Input [2]: [c_custkey#X, count#X]

(21) RegularHashAggregateExecTransformer
Input [2]: [c_custkey#X, count#X]
Keys [1]: [c_custkey#X]
Functions [1]: [count(o_orderkey#X)]
Aggregate Attributes [1]: [count(o_orderkey#X)#X]
Results [2]: [c_custkey#X, count(o_orderkey#X)#X]

(22) ProjectExecTransformer
Output [1]: [count(o_orderkey#X)#X AS c_count#X]
Input [2]: [c_custkey#X, count(o_orderkey#X)#X]

(23) FlushableHashAggregateExecTransformer
Input [1]: [c_count#X]
Keys [1]: [c_count#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_count#X, count#X]

(24) ProjectExecTransformer
Output [3]: [hash(c_count#X, 42) AS hash_partition_key#X, c_count#X, count#X]
Input [2]: [c_count#X, count#X]

(25) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: false

(26) ColumnarExchange
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: hashpartitioning(c_count#X, 1), ENSURE_REQUIREMENTS, [c_count#X, count#X], [plan_id=X], [id=#X]

(27) ShuffleQueryStage
Output [2]: [c_count#X, count#X]
Arguments: 2

(28) InputAdapter
Input [2]: [c_count#X, count#X]

(29) InputIteratorTransformer
Input [2]: [c_count#X, count#X]

(30) RegularHashAggregateExecTransformer
Input [2]: [c_count#X, count#X]
Keys [1]: [c_count#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [c_count#X, count(1)#X AS custdist#X]

(31) WholeStageCodegenTransformer (X)
Input [2]: [c_count#X, custdist#X]
Arguments: false

(32) ColumnarExchange
Input [2]: [c_count#X, custdist#X]
Arguments: rangepartitioning(custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(33) ShuffleQueryStage
Output [2]: [c_count#X, custdist#X]
Arguments: 3

(34) InputAdapter
Input [2]: [c_count#X, custdist#X]

(35) InputIteratorTransformer
Input [2]: [c_count#X, custdist#X]

(36) SortExecTransformer
Input [2]: [c_count#X, custdist#X]
Arguments: [custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST], true, 0

(37) WholeStageCodegenTransformer (X)
Input [2]: [c_count#X, custdist#X]
Arguments: false

(38) VeloxColumnarToRowExec
Input [2]: [c_count#X, custdist#X]

(39) Scan parquet
Output [1]: [c_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<c_custkey:bigint>

(40) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_comment), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_comment:string>

(41) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Condition : ((isnotnull(o_comment#X) AND NOT o_comment#X LIKE %special%requests%) AND isnotnull(o_custkey#X))

(42) Project
Output [2]: [o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]

(43) BroadcastExchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=X]

(44) BroadcastHashJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(45) Project
Output [2]: [c_custkey#X, o_orderkey#X]
Input [3]: [c_custkey#X, o_orderkey#X, o_custkey#X]

(46) HashAggregate
Input [2]: [c_custkey#X, o_orderkey#X]
Keys [1]: [c_custkey#X]
Functions [1]: [partial_count(o_orderkey#X)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_custkey#X, count#X]

(47) Exchange
Input [2]: [c_custkey#X, count#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(48) HashAggregate
Input [2]: [c_custkey#X, count#X]
Keys [1]: [c_custkey#X]
Functions [1]: [count(o_orderkey#X)]
Aggregate Attributes [1]: [count(o_orderkey#X)#X]
Results [1]: [count(o_orderkey#X)#X AS c_count#X]

(49) HashAggregate
Input [1]: [c_count#X]
Keys [1]: [c_count#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_count#X, count#X]

(50) Exchange
Input [2]: [c_count#X, count#X]
Arguments: hashpartitioning(c_count#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(51) HashAggregate
Input [2]: [c_count#X, count#X]
Keys [1]: [c_count#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [c_count#X, count(1)#X AS custdist#X]

(52) Exchange
Input [2]: [c_count#X, custdist#X]
Arguments: rangepartitioning(custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(53) Sort
Input [2]: [c_count#X, custdist#X]
Arguments: [custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST], true, 0

(54) AdaptiveSparkPlan
Output [2]: [c_count#X, custdist#X]
Arguments: isFinalPlan=true