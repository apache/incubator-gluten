== Physical Plan ==
AdaptiveSparkPlan (58)
+- == Final Plan ==
   VeloxColumnarToRowExec (37)
   +- ^ SortExecTransformer (35)
      +- ^ InputIteratorTransformer (34)
         +- ^ InputAdapter (33)
            +- ^ ShuffleQueryStage (32)
               +- ColumnarExchange (31)
                  +- ^ RegularHashAggregateExecTransformer (29)
                     +- ^ InputIteratorTransformer (28)
                        +- ^ InputAdapter (27)
                           +- ^ ShuffleQueryStage (26)
                              +- ColumnarExchange (25)
                                 +- ^ ProjectExecTransformer (23)
                                    +- ^ FlushableHashAggregateExecTransformer (22)
                                       +- ^ RegularHashAggregateExecTransformer (21)
                                          +- ^ InputIteratorTransformer (20)
                                             +- ^ InputAdapter (19)
                                                +- ^ ShuffleQueryStage (18)
                                                   +- ColumnarExchange (17)
                                                      +- ^ ProjectExecTransformer (15)
                                                         +- ^ FlushableHashAggregateExecTransformer (14)
                                                            +- ^ ProjectExecTransformer (13)
                                                               +- ^ GlutenBroadcastHashJoinExecTransformer Inner (12)
                                                                  :- ^ FilterExecTransformer (2)
                                                                  :  +- ^ Scan parquet (1)
                                                                  +- ^ InputIteratorTransformer (11)
                                                                     +- ^ InputAdapter (10)
                                                                        +- ^ RowToVeloxColumnar (9)
                                                                           +- ^ BroadcastQueryStage (8)
                                                                              +- BroadcastExchange (7)
                                                                                 +- VeloxColumnarToRowExec (6)
                                                                                    +- ^ FilterExecTransformer (4)
                                                                                       +- ^ Scan parquet (3)
+- == Initial Plan ==
   Sort (57)
   +- Exchange (56)
      +- HashAggregate (55)
         +- Exchange (54)
            +- HashAggregate (53)
               +- HashAggregate (52)
                  +- Exchange (51)
                     +- HashAggregate (50)
                        +- Project (49)
                           +- BroadcastHashJoin Inner BuildRight (48)
                              :- BroadcastHashJoin LeftAnti BuildRight (44)
                              :  :- Filter (39)
                              :  :  +- Scan parquet (38)
                              :  +- BroadcastExchange (43)
                              :     +- Project (42)
                              :        +- Filter (41)
                              :           +- Scan parquet (40)
                              +- BroadcastExchange (47)
                                 +- Filter (46)
                                    +- Scan parquet (45)


(1) Scan parquet
Output [2]: [ps_partkey#X, ps_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint>

(2) FilterExecTransformer
Input [2]: [ps_partkey#X, ps_suppkey#X]
Arguments: isnotnull(ps_partkey#X)

(3) Scan parquet
Output [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_type), Not(EqualTo(p_brand,Brand#X)), Not(StringStartsWith(p_type,MEDIUM POLISHED)), In(p_size, [14,19,23,3,36,45,49,9]), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_brand:string,p_type:string,p_size:int>

(4) FilterExecTransformer
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Arguments: (((((isnotnull(p_brand#X) AND isnotnull(p_type#X)) AND NOT (p_brand#X = Brand#X)) AND NOT StartsWith(p_type#X, MEDIUM POLISHED)) AND p_size#X IN (49,14,23,45,19,3,36,9)) AND isnotnull(p_partkey#X))

(5) WholeStageCodegenTransformer (X)
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Arguments: false

(6) VeloxColumnarToRowExec
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]

(7) BroadcastExchange
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(8) BroadcastQueryStage
Output [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Arguments: 1

(9) RowToVeloxColumnar
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]

(10) InputAdapter
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]

(11) InputIteratorTransformer
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]

(12) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [ps_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(13) ProjectExecTransformer
Output [4]: [ps_suppkey#X, p_brand#X, p_type#X, p_size#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, p_partkey#X, p_brand#X, p_type#X, p_size#X]

(14) FlushableHashAggregateExecTransformer
Input [4]: [ps_suppkey#X, p_brand#X, p_type#X, p_size#X]
Keys [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(15) ProjectExecTransformer
Output [5]: [hash(p_brand#X, p_type#X, p_size#X, ps_suppkey#X, 42) AS hash_partition_key#X, p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(16) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Arguments: false

(17) ColumnarExchange
Input [5]: [hash_partition_key#X, p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Arguments: hashpartitioning(p_brand#X, p_type#X, p_size#X, ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [p_brand#X, p_type#X, p_size#X, ps_suppkey#X], [plan_id=X], [id=#X]

(18) ShuffleQueryStage
Output [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Arguments: 2

(19) InputAdapter
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(20) InputIteratorTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(21) RegularHashAggregateExecTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Keys [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(22) FlushableHashAggregateExecTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Keys [3]: [p_brand#X, p_type#X, p_size#X]
Functions [1]: [partial_count(distinct ps_suppkey#X)]
Aggregate Attributes [1]: [count(ps_suppkey#X)#X]
Results [4]: [p_brand#X, p_type#X, p_size#X, count#X]

(23) ProjectExecTransformer
Output [5]: [hash(p_brand#X, p_type#X, p_size#X, 42) AS hash_partition_key#X, p_brand#X, p_type#X, p_size#X, count#X]
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]

(24) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, p_brand#X, p_type#X, p_size#X, count#X]
Arguments: false

(25) ColumnarExchange
Input [5]: [hash_partition_key#X, p_brand#X, p_type#X, p_size#X, count#X]
Arguments: hashpartitioning(p_brand#X, p_type#X, p_size#X, 1), ENSURE_REQUIREMENTS, [p_brand#X, p_type#X, p_size#X, count#X], [plan_id=X], [id=#X]

(26) ShuffleQueryStage
Output [4]: [p_brand#X, p_type#X, p_size#X, count#X]
Arguments: 3

(27) InputAdapter
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]

(28) InputIteratorTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]

(29) RegularHashAggregateExecTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]
Keys [3]: [p_brand#X, p_type#X, p_size#X]
Functions [1]: [count(distinct ps_suppkey#X)]
Aggregate Attributes [1]: [count(ps_suppkey#X)#X]
Results [4]: [p_brand#X, p_type#X, p_size#X, count(ps_suppkey#X)#X AS supplier_cnt#X]

(30) WholeStageCodegenTransformer (X)
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: false

(31) ColumnarExchange
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: rangepartitioning(supplier_cnt#X DESC NULLS LAST, p_brand#X ASC NULLS FIRST, p_type#X ASC NULLS FIRST, p_size#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(32) ShuffleQueryStage
Output [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: 4

(33) InputAdapter
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]

(34) InputIteratorTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]

(35) SortExecTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: [supplier_cnt#X DESC NULLS LAST, p_brand#X ASC NULLS FIRST, p_type#X ASC NULLS FIRST, p_size#X ASC NULLS FIRST], true, 0

(36) WholeStageCodegenTransformer (X)
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: false

(37) VeloxColumnarToRowExec
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]

(38) Scan parquet
Output [2]: [ps_partkey#X, ps_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint>

(39) Filter
Input [2]: [ps_partkey#X, ps_suppkey#X]
Condition : isnotnull(ps_partkey#X)

(40) Scan parquet
Output [2]: [s_suppkey#X, s_comment#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_comment)]
ReadSchema: struct<s_suppkey:bigint,s_comment:string>

(41) Filter
Input [2]: [s_suppkey#X, s_comment#X]
Condition : (isnotnull(s_comment#X) AND s_comment#X LIKE %Customer%Complaints%)

(42) Project
Output [1]: [s_suppkey#X]
Input [2]: [s_suppkey#X, s_comment#X]

(43) BroadcastExchange
Input [1]: [s_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),true), [plan_id=X]

(44) BroadcastHashJoin
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(45) Scan parquet
Output [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_type), Not(EqualTo(p_brand,Brand#X)), Not(StringStartsWith(p_type,MEDIUM POLISHED)), In(p_size, [14,19,23,3,36,45,49,9]), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_brand:string,p_type:string,p_size:int>

(46) Filter
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Condition : (((((isnotnull(p_brand#X) AND isnotnull(p_type#X)) AND NOT (p_brand#X = Brand#X)) AND NOT StartsWith(p_type#X, MEDIUM POLISHED)) AND p_size#X IN (49,14,23,45,19,3,36,9)) AND isnotnull(p_partkey#X))

(47) BroadcastExchange
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(48) BroadcastHashJoin
Left keys [1]: [ps_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(49) Project
Output [4]: [ps_suppkey#X, p_brand#X, p_type#X, p_size#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, p_partkey#X, p_brand#X, p_type#X, p_size#X]

(50) HashAggregate
Input [4]: [ps_suppkey#X, p_brand#X, p_type#X, p_size#X]
Keys [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(51) Exchange
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Arguments: hashpartitioning(p_brand#X, p_type#X, p_size#X, ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(52) HashAggregate
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Keys [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(53) HashAggregate
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Keys [3]: [p_brand#X, p_type#X, p_size#X]
Functions [1]: [partial_count(distinct ps_suppkey#X)]
Aggregate Attributes [1]: [count(ps_suppkey#X)#X]
Results [4]: [p_brand#X, p_type#X, p_size#X, count#X]

(54) Exchange
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]
Arguments: hashpartitioning(p_brand#X, p_type#X, p_size#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(55) HashAggregate
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]
Keys [3]: [p_brand#X, p_type#X, p_size#X]
Functions [1]: [count(distinct ps_suppkey#X)]
Aggregate Attributes [1]: [count(ps_suppkey#X)#X]
Results [4]: [p_brand#X, p_type#X, p_size#X, count(ps_suppkey#X)#X AS supplier_cnt#X]

(56) Exchange
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: rangepartitioning(supplier_cnt#X DESC NULLS LAST, p_brand#X ASC NULLS FIRST, p_type#X ASC NULLS FIRST, p_size#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(57) Sort
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: [supplier_cnt#X DESC NULLS LAST, p_brand#X ASC NULLS FIRST, p_type#X ASC NULLS FIRST, p_size#X ASC NULLS FIRST], true, 0

(58) AdaptiveSparkPlan
Output [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: isFinalPlan=true