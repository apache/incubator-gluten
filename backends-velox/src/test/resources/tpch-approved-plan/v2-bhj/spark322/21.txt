== Physical Plan ==
AdaptiveSparkPlan (87)
+- == Final Plan ==
   VeloxColumnarToRowExec (54)
   +- TakeOrderedAndProjectExecTransformer (53)
      +- ^ RegularHashAggregateExecTransformer (51)
         +- ^ RegularHashAggregateExecTransformer (50)
            +- ^ ProjectExecTransformer (49)
               +- ^ GlutenBroadcastHashJoinExecTransformer Inner (48)
                  :- ^ ProjectExecTransformer (39)
                  :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (38)
                  :     :- ^ ProjectExecTransformer (29)
                  :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (28)
                  :     :     :- ^ InputIteratorTransformer (7)
                  :     :     :  +- ^ InputAdapter (6)
                  :     :     :     +- ^ BroadcastQueryStage (5)
                  :     :     :        +- ColumnarBroadcastExchange (4)
                  :     :     :           +- ^ FilterExecTransformer (2)
                  :     :     :              +- ^ BatchScanExecTransformer (1)
                  :     :     +- ^ GlutenBroadcastHashJoinExecTransformer LeftAnti (27)
                  :     :        :- ^ GlutenBroadcastHashJoinExecTransformer LeftSemi (18)
                  :     :        :  :- ^ ProjectExecTransformer (10)
                  :     :        :  :  +- ^ FilterExecTransformer (9)
                  :     :        :  :     +- ^ BatchScanExecTransformer (8)
                  :     :        :  +- ^ InputIteratorTransformer (17)
                  :     :        :     +- ^ InputAdapter (16)
                  :     :        :        +- ^ BroadcastQueryStage (15)
                  :     :        :           +- ColumnarBroadcastExchange (14)
                  :     :        :              +- ^ ProjectExecTransformer (12)
                  :     :        :                 +- ^ BatchScanExecTransformer (11)
                  :     :        +- ^ InputIteratorTransformer (26)
                  :     :           +- ^ InputAdapter (25)
                  :     :              +- ^ BroadcastQueryStage (24)
                  :     :                 +- ColumnarBroadcastExchange (23)
                  :     :                    +- ^ ProjectExecTransformer (21)
                  :     :                       +- ^ FilterExecTransformer (20)
                  :     :                          +- ^ BatchScanExecTransformer (19)
                  :     +- ^ InputIteratorTransformer (37)
                  :        +- ^ InputAdapter (36)
                  :           +- ^ BroadcastQueryStage (35)
                  :              +- ColumnarBroadcastExchange (34)
                  :                 +- ^ ProjectExecTransformer (32)
                  :                    +- ^ FilterExecTransformer (31)
                  :                       +- ^ BatchScanExecTransformer (30)
                  +- ^ InputIteratorTransformer (47)
                     +- ^ InputAdapter (46)
                        +- ^ BroadcastQueryStage (45)
                           +- ColumnarBroadcastExchange (44)
                              +- ^ ProjectExecTransformer (42)
                                 +- ^ FilterExecTransformer (41)
                                    +- ^ BatchScanExecTransformer (40)
+- == Initial Plan ==
   TakeOrderedAndProject (86)
   +- HashAggregate (85)
      +- HashAggregate (84)
         +- Project (83)
            +- BroadcastHashJoin Inner BuildRight (82)
               :- Project (77)
               :  +- BroadcastHashJoin Inner BuildRight (76)
               :     :- Project (71)
               :     :  +- BroadcastHashJoin Inner BuildLeft (70)
               :     :     :- BroadcastExchange (57)
               :     :     :  +- Filter (56)
               :     :     :     +- BatchScan (55)
               :     :     +- BroadcastHashJoin LeftAnti BuildRight (69)
               :     :        :- BroadcastHashJoin LeftSemi BuildRight (64)
               :     :        :  :- Project (60)
               :     :        :  :  +- Filter (59)
               :     :        :  :     +- BatchScan (58)
               :     :        :  +- BroadcastExchange (63)
               :     :        :     +- Project (62)
               :     :        :        +- BatchScan (61)
               :     :        +- BroadcastExchange (68)
               :     :           +- Project (67)
               :     :              +- Filter (66)
               :     :                 +- BatchScan (65)
               :     +- BroadcastExchange (75)
               :        +- Project (74)
               :           +- Filter (73)
               :              +- BatchScan (72)
               +- BroadcastExchange (81)
                  +- Project (80)
                     +- Filter (79)
                        +- BatchScan (78)


(1) BatchScanExecTransformer
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
DataFilters: [isnotnull(s_suppkey#X), isnotnull(s_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(3) WholeStageCodegenTransformer (X)
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: false

(4) ColumnarBroadcastExchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(5) BroadcastQueryStage
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: 0

(6) InputAdapter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(7) InputIteratorTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(8) BatchScanExecTransformer
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
DataFilters: [(l_receiptdate#X > l_commitdate#X), isnotnull(l_receiptdate#X), isnotnull(l_commitdate#X), isnotnull(l_suppkey#X), isnotnull(l_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(9) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: (((((l_receiptdate#X > l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND isnotnull(l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(10) ProjectExecTransformer
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(11) BatchScanExecTransformer
Output [16]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_linenumber#X, l_quantity#X, l_extendedprice#X, l_discount#X, l_tax#X, l_returnflag#X, l_linestatus#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipinstruct#X, l_shipmode#X, l_comment#X]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_linenumber:int,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_tax:decimal(12,2),l_returnflag:string,l_linestatus:string,l_shipdate:date,l_commitdate:date,l_receiptdate:date,l_shipinstruct:string,l_shipmode:string,l_comment:string>

(12) ProjectExecTransformer
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [16]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_linenumber#X, l_quantity#X, l_extendedprice#X, l_discount#X, l_tax#X, l_returnflag#X, l_linestatus#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipinstruct#X, l_shipmode#X, l_comment#X]

(13) WholeStageCodegenTransformer (X)
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: false

(14) ColumnarBroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(15) BroadcastQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: 1

(16) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(17) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(18) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(19) BatchScanExecTransformer
Output [16]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_linenumber#X, l_quantity#X, l_extendedprice#X, l_discount#X, l_tax#X, l_returnflag#X, l_linestatus#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipinstruct#X, l_shipmode#X, l_comment#X]
DataFilters: [(l_receiptdate#X > l_commitdate#X), isnotnull(l_receiptdate#X), isnotnull(l_commitdate#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_linenumber:int,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_tax:decimal(12,2),l_returnflag:string,l_linestatus:string,l_shipdate:date,l_commitdate:date,l_receiptdate:date,l_shipinstruct:string,l_shipmode:string,l_comment:string>

(20) FilterExecTransformer
Input [16]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_linenumber#X, l_quantity#X, l_extendedprice#X, l_discount#X, l_tax#X, l_returnflag#X, l_linestatus#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipinstruct#X, l_shipmode#X, l_comment#X]
Arguments: (((l_receiptdate#X > l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND isnotnull(l_commitdate#X))

(21) ProjectExecTransformer
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [16]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_linenumber#X, l_quantity#X, l_extendedprice#X, l_discount#X, l_tax#X, l_returnflag#X, l_linestatus#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipinstruct#X, l_shipmode#X, l_comment#X]

(22) WholeStageCodegenTransformer (X)
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: false

(23) ColumnarBroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(24) BroadcastQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: 2

(25) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(26) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(27) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(28) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(29) ProjectExecTransformer
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(30) BatchScanExecTransformer
Output [2]: [o_orderkey#X, o_orderstatus#X]
DataFilters: [isnotnull(o_orderstatus#X), (o_orderstatus#X = F), isnotnull(o_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(31) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderstatus#X]
Arguments: ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(32) ProjectExecTransformer
Output [1]: [o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(33) WholeStageCodegenTransformer (X)
Input [1]: [o_orderkey#X]
Arguments: false

(34) ColumnarBroadcastExchange
Input [1]: [o_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(35) BroadcastQueryStage
Output [1]: [o_orderkey#X]
Arguments: 3

(36) InputAdapter
Input [1]: [o_orderkey#X]

(37) InputIteratorTransformer
Input [1]: [o_orderkey#X]

(38) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(39) ProjectExecTransformer
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(40) BatchScanExecTransformer
Output [2]: [n_nationkey#X, n_name#X]
DataFilters: [isnotnull(n_name#X), (n_name#X = SAUDI ARABIA), isnotnull(n_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(41) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(42) ProjectExecTransformer
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(43) WholeStageCodegenTransformer (X)
Input [1]: [n_nationkey#X]
Arguments: false

(44) ColumnarBroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(45) BroadcastQueryStage
Output [1]: [n_nationkey#X]
Arguments: 4

(46) InputAdapter
Input [1]: [n_nationkey#X]

(47) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(48) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(49) ProjectExecTransformer
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(50) RegularHashAggregateExecTransformer
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(51) RegularHashAggregateExecTransformer
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(52) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, numwait#X]
Arguments: false

(53) TakeOrderedAndProjectExecTransformer
Input [2]: [s_name#X, numwait#X]
Arguments: 100, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X], 0

(54) VeloxColumnarToRowExec
Input [2]: [s_name#X, numwait#X]

(55) BatchScan
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
DataFilters: [isnotnull(s_suppkey#X), isnotnull(s_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(56) Filter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(57) BroadcastExchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(58) BatchScan
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
DataFilters: [(l_receiptdate#X > l_commitdate#X), isnotnull(l_receiptdate#X), isnotnull(l_commitdate#X), isnotnull(l_suppkey#X), isnotnull(l_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(59) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : (((((l_receiptdate#X > l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND isnotnull(l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(60) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(61) BatchScan
Output [16]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_linenumber#X, l_quantity#X, l_extendedprice#X, l_discount#X, l_tax#X, l_returnflag#X, l_linestatus#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipinstruct#X, l_shipmode#X, l_comment#X]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_linenumber:int,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_tax:decimal(12,2),l_returnflag:string,l_linestatus:string,l_shipdate:date,l_commitdate:date,l_receiptdate:date,l_shipinstruct:string,l_shipmode:string,l_comment:string>

(62) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [16]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_linenumber#X, l_quantity#X, l_extendedprice#X, l_discount#X, l_tax#X, l_returnflag#X, l_linestatus#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipinstruct#X, l_shipmode#X, l_comment#X]

(63) BroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(64) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(65) BatchScan
Output [16]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_linenumber#X, l_quantity#X, l_extendedprice#X, l_discount#X, l_tax#X, l_returnflag#X, l_linestatus#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipinstruct#X, l_shipmode#X, l_comment#X]
DataFilters: [(l_receiptdate#X > l_commitdate#X), isnotnull(l_receiptdate#X), isnotnull(l_commitdate#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_linenumber:int,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_tax:decimal(12,2),l_returnflag:string,l_linestatus:string,l_shipdate:date,l_commitdate:date,l_receiptdate:date,l_shipinstruct:string,l_shipmode:string,l_comment:string>

(66) Filter
Input [16]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_linenumber#X, l_quantity#X, l_extendedprice#X, l_discount#X, l_tax#X, l_returnflag#X, l_linestatus#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipinstruct#X, l_shipmode#X, l_comment#X]
Condition : (((l_receiptdate#X > l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND isnotnull(l_commitdate#X))

(67) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [16]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_linenumber#X, l_quantity#X, l_extendedprice#X, l_discount#X, l_tax#X, l_returnflag#X, l_linestatus#X, l_shipdate#X, l_commitdate#X, l_receiptdate#X, l_shipinstruct#X, l_shipmode#X, l_comment#X]

(68) BroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(69) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(70) BroadcastHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(71) Project
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(72) BatchScan
Output [2]: [o_orderkey#X, o_orderstatus#X]
DataFilters: [isnotnull(o_orderstatus#X), (o_orderstatus#X = F), isnotnull(o_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(73) Filter
Input [2]: [o_orderkey#X, o_orderstatus#X]
Condition : ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(74) Project
Output [1]: [o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(75) BroadcastExchange
Input [1]: [o_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(76) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(77) Project
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(78) BatchScan
Output [2]: [n_nationkey#X, n_name#X]
DataFilters: [isnotnull(n_name#X), (n_name#X = SAUDI ARABIA), isnotnull(n_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(79) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(80) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(81) BroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(82) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(83) Project
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(84) HashAggregate
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(85) HashAggregate
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(86) TakeOrderedAndProject
Input [2]: [s_name#X, numwait#X]
Arguments: 100, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X]

(87) AdaptiveSparkPlan
Output [2]: [s_name#X, numwait#X]
Arguments: isFinalPlan=true