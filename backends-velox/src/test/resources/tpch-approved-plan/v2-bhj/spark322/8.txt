== Physical Plan ==
AdaptiveSparkPlan (116)
+- == Final Plan ==
   VeloxColumnarToRowExec (73)
   +- ^ SortExecTransformer (71)
      +- ^ ProjectExecTransformer (70)
         +- ^ RegularHashAggregateExecTransformer (69)
            +- ^ RegularHashAggregateExecTransformer (68)
               +- ^ ProjectExecTransformer (67)
                  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (66)
                     :- ^ ProjectExecTransformer (57)
                     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (56)
                     :     :- ^ ProjectExecTransformer (48)
                     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (47)
                     :     :     :- ^ ProjectExecTransformer (39)
                     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (38)
                     :     :     :     :- ^ ProjectExecTransformer (30)
                     :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (29)
                     :     :     :     :     :- ^ ProjectExecTransformer (21)
                     :     :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (20)
                     :     :     :     :     :     :- ^ ProjectExecTransformer (12)
                     :     :     :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (11)
                     :     :     :     :     :     :     :- ^ InputIteratorTransformer (8)
                     :     :     :     :     :     :     :  +- ^ InputAdapter (7)
                     :     :     :     :     :     :     :     +- ^ BroadcastQueryStage (6)
                     :     :     :     :     :     :     :        +- ColumnarBroadcastExchange (5)
                     :     :     :     :     :     :     :           +- ^ ProjectExecTransformer (3)
                     :     :     :     :     :     :     :              +- ^ FilterExecTransformer (2)
                     :     :     :     :     :     :     :                 +- ^ BatchScanExecTransformer (1)
                     :     :     :     :     :     :     +- ^ FilterExecTransformer (10)
                     :     :     :     :     :     :        +- ^ BatchScanExecTransformer (9)
                     :     :     :     :     :     +- ^ InputIteratorTransformer (19)
                     :     :     :     :     :        +- ^ InputAdapter (18)
                     :     :     :     :     :           +- ^ BroadcastQueryStage (17)
                     :     :     :     :     :              +- ColumnarBroadcastExchange (16)
                     :     :     :     :     :                 +- ^ FilterExecTransformer (14)
                     :     :     :     :     :                    +- ^ BatchScanExecTransformer (13)
                     :     :     :     :     +- ^ InputIteratorTransformer (28)
                     :     :     :     :        +- ^ InputAdapter (27)
                     :     :     :     :           +- ^ BroadcastQueryStage (26)
                     :     :     :     :              +- ColumnarBroadcastExchange (25)
                     :     :     :     :                 +- ^ FilterExecTransformer (23)
                     :     :     :     :                    +- ^ BatchScanExecTransformer (22)
                     :     :     :     +- ^ InputIteratorTransformer (37)
                     :     :     :        +- ^ InputAdapter (36)
                     :     :     :           +- ^ BroadcastQueryStage (35)
                     :     :     :              +- ColumnarBroadcastExchange (34)
                     :     :     :                 +- ^ FilterExecTransformer (32)
                     :     :     :                    +- ^ BatchScanExecTransformer (31)
                     :     :     +- ^ InputIteratorTransformer (46)
                     :     :        +- ^ InputAdapter (45)
                     :     :           +- ^ BroadcastQueryStage (44)
                     :     :              +- ColumnarBroadcastExchange (43)
                     :     :                 +- ^ FilterExecTransformer (41)
                     :     :                    +- ^ BatchScanExecTransformer (40)
                     :     +- ^ InputIteratorTransformer (55)
                     :        +- ^ InputAdapter (54)
                     :           +- ^ BroadcastQueryStage (53)
                     :              +- ColumnarBroadcastExchange (52)
                     :                 +- ^ FilterExecTransformer (50)
                     :                    +- ^ BatchScanExecTransformer (49)
                     +- ^ InputIteratorTransformer (65)
                        +- ^ InputAdapter (64)
                           +- ^ BroadcastQueryStage (63)
                              +- ColumnarBroadcastExchange (62)
                                 +- ^ ProjectExecTransformer (60)
                                    +- ^ FilterExecTransformer (59)
                                       +- ^ BatchScanExecTransformer (58)
+- == Initial Plan ==
   Sort (115)
   +- HashAggregate (114)
      +- HashAggregate (113)
         +- Project (112)
            +- BroadcastHashJoin Inner BuildRight (111)
               :- Project (106)
               :  +- BroadcastHashJoin Inner BuildRight (105)
               :     :- Project (101)
               :     :  +- BroadcastHashJoin Inner BuildRight (100)
               :     :     :- Project (96)
               :     :     :  +- BroadcastHashJoin Inner BuildRight (95)
               :     :     :     :- Project (91)
               :     :     :     :  +- BroadcastHashJoin Inner BuildRight (90)
               :     :     :     :     :- Project (86)
               :     :     :     :     :  +- BroadcastHashJoin Inner BuildRight (85)
               :     :     :     :     :     :- Project (81)
               :     :     :     :     :     :  +- BroadcastHashJoin Inner BuildLeft (80)
               :     :     :     :     :     :     :- BroadcastExchange (77)
               :     :     :     :     :     :     :  +- Project (76)
               :     :     :     :     :     :     :     +- Filter (75)
               :     :     :     :     :     :     :        +- BatchScan (74)
               :     :     :     :     :     :     +- Filter (79)
               :     :     :     :     :     :        +- BatchScan (78)
               :     :     :     :     :     +- BroadcastExchange (84)
               :     :     :     :     :        +- Filter (83)
               :     :     :     :     :           +- BatchScan (82)
               :     :     :     :     +- BroadcastExchange (89)
               :     :     :     :        +- Filter (88)
               :     :     :     :           +- BatchScan (87)
               :     :     :     +- BroadcastExchange (94)
               :     :     :        +- Filter (93)
               :     :     :           +- BatchScan (92)
               :     :     +- BroadcastExchange (99)
               :     :        +- Filter (98)
               :     :           +- BatchScan (97)
               :     +- BroadcastExchange (104)
               :        +- Filter (103)
               :           +- BatchScan (102)
               +- BroadcastExchange (110)
                  +- Project (109)
                     +- Filter (108)
                        +- BatchScan (107)


(1) BatchScanExecTransformer
Output [2]: [p_partkey#X, p_type#X]
DataFilters: [isnotnull(p_type#X), (p_type#X = ECONOMY ANODIZED STEEL), isnotnull(p_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(p_type), EqualTo(p_type,ECONOMY ANODIZED STEEL), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string>

(2) FilterExecTransformer
Input [2]: [p_partkey#X, p_type#X]
Arguments: ((isnotnull(p_type#X) AND (p_type#X = ECONOMY ANODIZED STEEL)) AND isnotnull(p_partkey#X))

(3) ProjectExecTransformer
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_type#X]

(4) WholeStageCodegenTransformer (X)
Input [1]: [p_partkey#X]
Arguments: false

(5) ColumnarBroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(6) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 0

(7) InputAdapter
Input [1]: [p_partkey#X]

(8) InputIteratorTransformer
Input [1]: [p_partkey#X]

(9) BatchScanExecTransformer
Output [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
DataFilters: [isnotnull(l_partkey#X), isnotnull(l_suppkey#X), isnotnull(l_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(10) FilterExecTransformer
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Arguments: ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(11) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(12) ProjectExecTransformer
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(13) BatchScanExecTransformer
Output [2]: [s_suppkey#X, s_nationkey#X]
DataFilters: [isnotnull(s_suppkey#X), isnotnull(s_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(14) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(15) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false

(16) ColumnarBroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(17) BroadcastQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: 1

(18) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(19) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(20) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(21) ProjectExecTransformer
Output [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(22) BatchScanExecTransformer
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
DataFilters: [isnotnull(o_orderdate#X), (o_orderdate#X >= 1995-01-01), (o_orderdate#X <= 1996-12-31), isnotnull(o_orderkey#X), isnotnull(o_custkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1995-01-01), LessThanOrEqual(o_orderdate,1996-12-31), IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(23) FilterExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1995-01-01)) AND (o_orderdate#X <= 1996-12-31)) AND isnotnull(o_orderkey#X)) AND isnotnull(o_custkey#X))

(24) WholeStageCodegenTransformer (X)
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: false

(25) ColumnarBroadcastExchange
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(26) BroadcastQueryStage
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: 2

(27) InputAdapter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(28) InputIteratorTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]

(29) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(30) ProjectExecTransformer
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Input [7]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderkey#X, o_custkey#X, o_orderdate#X]

(31) BatchScanExecTransformer
Output [2]: [c_custkey#X, c_nationkey#X]
DataFilters: [isnotnull(c_custkey#X), isnotnull(c_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(32) FilterExecTransformer
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(33) WholeStageCodegenTransformer (X)
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: false

(34) ColumnarBroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(35) BroadcastQueryStage
Output [2]: [c_custkey#X, c_nationkey#X]
Arguments: 3

(36) InputAdapter
Input [2]: [c_custkey#X, c_nationkey#X]

(37) InputIteratorTransformer
Input [2]: [c_custkey#X, c_nationkey#X]

(38) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(39) ProjectExecTransformer
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X, c_custkey#X, c_nationkey#X]

(40) BatchScanExecTransformer
Output [2]: [n_nationkey#X, n_regionkey#X]
DataFilters: [isnotnull(n_nationkey#X), isnotnull(n_regionkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(41) FilterExecTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(42) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: false

(43) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(44) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_regionkey#X]
Arguments: 4

(45) InputAdapter
Input [2]: [n_nationkey#X, n_regionkey#X]

(46) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_regionkey#X]

(47) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(48) ProjectExecTransformer
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X, n_nationkey#X, n_regionkey#X]

(49) BatchScanExecTransformer
Output [2]: [n_nationkey#X, n_name#X]
DataFilters: [isnotnull(n_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(50) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: isnotnull(n_nationkey#X)

(51) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_name#X]
Arguments: false

(52) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(53) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: 5

(54) InputAdapter
Input [2]: [n_nationkey#X, n_name#X]

(55) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(56) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(57) ProjectExecTransformer
Output [5]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X, n_nationkey#X, n_name#X]

(58) BatchScanExecTransformer
Output [2]: [r_regionkey#X, r_name#X]
DataFilters: [isnotnull(r_name#X), (r_name#X = AMERICA), isnotnull(r_regionkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(59) FilterExecTransformer
Input [2]: [r_regionkey#X, r_name#X]
Arguments: ((isnotnull(r_name#X) AND (r_name#X = AMERICA)) AND isnotnull(r_regionkey#X))

(60) ProjectExecTransformer
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(61) WholeStageCodegenTransformer (X)
Input [1]: [r_regionkey#X]
Arguments: false

(62) ColumnarBroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(63) BroadcastQueryStage
Output [1]: [r_regionkey#X]
Arguments: 6

(64) InputAdapter
Input [1]: [r_regionkey#X]

(65) InputIteratorTransformer
Input [1]: [r_regionkey#X]

(66) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(67) ProjectExecTransformer
Output [4]: [year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) AS volume#X, n_name#X AS nation#X, CASE WHEN (n_name#X = BRAZIL) THEN CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) ELSE 0.0000 END AS _pre_288#X]
Input [6]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X, r_regionkey#X]

(68) RegularHashAggregateExecTransformer
Input [4]: [o_year#X, volume#X, nation#X, _pre_288#X]
Keys [1]: [o_year#X]
Functions [2]: [partial_sum(_pre_288#X), partial_sum(volume#X)]
Aggregate Attributes [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Results [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(69) RegularHashAggregateExecTransformer
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Keys [1]: [o_year#X]
Functions [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), sum(volume#X)]
Aggregate Attributes [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]
Results [3]: [o_year#X, sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]

(70) ProjectExecTransformer
Output [2]: [o_year#X, CheckOverflow((promote_precision(sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X) / promote_precision(sum(volume#X)#X)), DecimalType(38,6), true) AS mkt_share#X]
Input [3]: [o_year#X, sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]

(71) SortExecTransformer
Input [2]: [o_year#X, mkt_share#X]
Arguments: [o_year#X ASC NULLS FIRST], true, 0

(72) WholeStageCodegenTransformer (X)
Input [2]: [o_year#X, mkt_share#X]
Arguments: false

(73) VeloxColumnarToRowExec
Input [2]: [o_year#X, mkt_share#X]

(74) BatchScan
Output [2]: [p_partkey#X, p_type#X]
DataFilters: [isnotnull(p_type#X), (p_type#X = ECONOMY ANODIZED STEEL), isnotnull(p_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(p_type), EqualTo(p_type,ECONOMY ANODIZED STEEL), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_type:string>

(75) Filter
Input [2]: [p_partkey#X, p_type#X]
Condition : ((isnotnull(p_type#X) AND (p_type#X = ECONOMY ANODIZED STEEL)) AND isnotnull(p_partkey#X))

(76) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_type#X]

(77) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(78) BatchScan
Output [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
DataFilters: [isnotnull(l_partkey#X), isnotnull(l_suppkey#X), isnotnull(l_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(79) Filter
Input [5]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Condition : ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(80) BroadcastHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(81) Project
Output [4]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]
Input [6]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X]

(82) BatchScan
Output [2]: [s_suppkey#X, s_nationkey#X]
DataFilters: [isnotnull(s_suppkey#X), isnotnull(s_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(83) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(84) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(85) BroadcastHashJoin
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(86) Project
Output [4]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [6]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(87) BatchScan
Output [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
DataFilters: [isnotnull(o_orderdate#X), (o_orderdate#X >= 1995-01-01), (o_orderdate#X <= 1996-12-31), isnotnull(o_orderkey#X), isnotnull(o_custkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1995-01-01), LessThanOrEqual(o_orderdate,1996-12-31), IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_orderdate:date>

(88) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Condition : ((((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1995-01-01)) AND (o_orderdate#X <= 1996-12-31)) AND isnotnull(o_orderkey#X)) AND isnotnull(o_custkey#X))

(89) BroadcastExchange
Input [3]: [o_orderkey#X, o_custkey#X, o_orderdate#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(90) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(91) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X]
Input [7]: [l_orderkey#X, l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderkey#X, o_custkey#X, o_orderdate#X]

(92) BatchScan
Output [2]: [c_custkey#X, c_nationkey#X]
DataFilters: [isnotnull(c_custkey#X), isnotnull(c_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(93) Filter
Input [2]: [c_custkey#X, c_nationkey#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(94) BroadcastExchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(95) BroadcastHashJoin
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(96) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_custkey#X, o_orderdate#X, c_custkey#X, c_nationkey#X]

(97) BatchScan
Output [2]: [n_nationkey#X, n_regionkey#X]
DataFilters: [isnotnull(n_nationkey#X), isnotnull(n_regionkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)]
ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>

(98) Filter
Input [2]: [n_nationkey#X, n_regionkey#X]
Condition : (isnotnull(n_nationkey#X) AND isnotnull(n_regionkey#X))

(99) BroadcastExchange
Input [2]: [n_nationkey#X, n_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(100) BroadcastHashJoin
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(101) Project
Output [5]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, c_nationkey#X, n_nationkey#X, n_regionkey#X]

(102) BatchScan
Output [2]: [n_nationkey#X, n_name#X]
DataFilters: [isnotnull(n_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(103) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : isnotnull(n_nationkey#X)

(104) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(105) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(106) Project
Output [5]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X]
Input [7]: [l_extendedprice#X, l_discount#X, s_nationkey#X, o_orderdate#X, n_regionkey#X, n_nationkey#X, n_name#X]

(107) BatchScan
Output [2]: [r_regionkey#X, r_name#X]
DataFilters: [isnotnull(r_name#X), (r_name#X = AMERICA), isnotnull(r_regionkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)]
ReadSchema: struct<r_regionkey:bigint,r_name:string>

(108) Filter
Input [2]: [r_regionkey#X, r_name#X]
Condition : ((isnotnull(r_name#X) AND (r_name#X = AMERICA)) AND isnotnull(r_regionkey#X))

(109) Project
Output [1]: [r_regionkey#X]
Input [2]: [r_regionkey#X, r_name#X]

(110) BroadcastExchange
Input [1]: [r_regionkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(111) BroadcastHashJoin
Left keys [1]: [n_regionkey#X]
Right keys [1]: [r_regionkey#X]
Join condition: None

(112) Project
Output [3]: [year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) AS volume#X, n_name#X AS nation#X]
Input [6]: [l_extendedprice#X, l_discount#X, o_orderdate#X, n_regionkey#X, n_name#X, r_regionkey#X]

(113) HashAggregate
Input [3]: [o_year#X, volume#X, nation#X]
Keys [1]: [o_year#X]
Functions [2]: [partial_sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), partial_sum(volume#X)]
Aggregate Attributes [4]: [sum#X, isEmpty#X, sum#X, isEmpty#X]
Results [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]

(114) HashAggregate
Input [5]: [o_year#X, sum#X, isEmpty#X, sum#X, isEmpty#X]
Keys [1]: [o_year#X]
Functions [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END), sum(volume#X)]
Aggregate Attributes [2]: [sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X, sum(volume#X)#X]
Results [2]: [o_year#X, CheckOverflow((promote_precision(sum(CASE WHEN (nation#X = BRAZIL) THEN volume#X ELSE 0.0000 END)#X) / promote_precision(sum(volume#X)#X)), DecimalType(38,6), true) AS mkt_share#X]

(115) Sort
Input [2]: [o_year#X, mkt_share#X]
Arguments: [o_year#X ASC NULLS FIRST], true, 0

(116) AdaptiveSparkPlan
Output [2]: [o_year#X, mkt_share#X]
Arguments: isFinalPlan=true