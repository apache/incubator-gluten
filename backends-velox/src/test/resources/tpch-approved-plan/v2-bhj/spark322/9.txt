== Physical Plan ==
AdaptiveSparkPlan (85)
+- == Final Plan ==
   VeloxColumnarToRowExec (53)
   +- ^ SortExecTransformer (51)
      +- ^ RegularHashAggregateExecTransformer (50)
         +- ^ RegularHashAggregateExecTransformer (49)
            +- ^ ProjectExecTransformer (48)
               +- ^ GlutenBroadcastHashJoinExecTransformer Inner (47)
                  :- ^ ProjectExecTransformer (39)
                  :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (38)
                  :     :- ^ ProjectExecTransformer (30)
                  :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (29)
                  :     :     :- ^ ProjectExecTransformer (21)
                  :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (20)
                  :     :     :     :- ^ ProjectExecTransformer (12)
                  :     :     :     :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (11)
                  :     :     :     :     :- ^ InputIteratorTransformer (8)
                  :     :     :     :     :  +- ^ InputAdapter (7)
                  :     :     :     :     :     +- ^ BroadcastQueryStage (6)
                  :     :     :     :     :        +- ColumnarBroadcastExchange (5)
                  :     :     :     :     :           +- ^ ProjectExecTransformer (3)
                  :     :     :     :     :              +- ^ FilterExecTransformer (2)
                  :     :     :     :     :                 +- ^ BatchScanExecTransformer (1)
                  :     :     :     :     +- ^ FilterExecTransformer (10)
                  :     :     :     :        +- ^ BatchScanExecTransformer (9)
                  :     :     :     +- ^ InputIteratorTransformer (19)
                  :     :     :        +- ^ InputAdapter (18)
                  :     :     :           +- ^ BroadcastQueryStage (17)
                  :     :     :              +- ColumnarBroadcastExchange (16)
                  :     :     :                 +- ^ FilterExecTransformer (14)
                  :     :     :                    +- ^ BatchScanExecTransformer (13)
                  :     :     +- ^ InputIteratorTransformer (28)
                  :     :        +- ^ InputAdapter (27)
                  :     :           +- ^ BroadcastQueryStage (26)
                  :     :              +- ColumnarBroadcastExchange (25)
                  :     :                 +- ^ FilterExecTransformer (23)
                  :     :                    +- ^ BatchScanExecTransformer (22)
                  :     +- ^ InputIteratorTransformer (37)
                  :        +- ^ InputAdapter (36)
                  :           +- ^ BroadcastQueryStage (35)
                  :              +- ColumnarBroadcastExchange (34)
                  :                 +- ^ FilterExecTransformer (32)
                  :                    +- ^ BatchScanExecTransformer (31)
                  +- ^ InputIteratorTransformer (46)
                     +- ^ InputAdapter (45)
                        +- ^ BroadcastQueryStage (44)
                           +- ColumnarBroadcastExchange (43)
                              +- ^ FilterExecTransformer (41)
                                 +- ^ BatchScanExecTransformer (40)
+- == Initial Plan ==
   Sort (84)
   +- HashAggregate (83)
      +- HashAggregate (82)
         +- Project (81)
            +- BroadcastHashJoin Inner BuildRight (80)
               :- Project (76)
               :  +- BroadcastHashJoin Inner BuildRight (75)
               :     :- Project (71)
               :     :  +- BroadcastHashJoin Inner BuildRight (70)
               :     :     :- Project (66)
               :     :     :  +- BroadcastHashJoin Inner BuildRight (65)
               :     :     :     :- Project (61)
               :     :     :     :  +- BroadcastHashJoin Inner BuildLeft (60)
               :     :     :     :     :- BroadcastExchange (57)
               :     :     :     :     :  +- Project (56)
               :     :     :     :     :     +- Filter (55)
               :     :     :     :     :        +- BatchScan (54)
               :     :     :     :     +- Filter (59)
               :     :     :     :        +- BatchScan (58)
               :     :     :     +- BroadcastExchange (64)
               :     :     :        +- Filter (63)
               :     :     :           +- BatchScan (62)
               :     :     +- BroadcastExchange (69)
               :     :        +- Filter (68)
               :     :           +- BatchScan (67)
               :     +- BroadcastExchange (74)
               :        +- Filter (73)
               :           +- BatchScan (72)
               +- BroadcastExchange (79)
                  +- Filter (78)
                     +- BatchScan (77)


(1) BatchScanExecTransformer
Output [2]: [p_partkey#X, p_name#X]
DataFilters: [isnotnull(p_name#X), Contains(p_name#X, green), isnotnull(p_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(p_name), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(2) FilterExecTransformer
Input [2]: [p_partkey#X, p_name#X]
Arguments: ((isnotnull(p_name#X) AND Contains(p_name#X, green)) AND isnotnull(p_partkey#X))

(3) ProjectExecTransformer
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(4) WholeStageCodegenTransformer (X)
Input [1]: [p_partkey#X]
Arguments: false

(5) ColumnarBroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(6) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 0

(7) InputAdapter
Input [1]: [p_partkey#X]

(8) InputIteratorTransformer
Input [1]: [p_partkey#X]

(9) BatchScanExecTransformer
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
DataFilters: [isnotnull(l_partkey#X), isnotnull(l_suppkey#X), isnotnull(l_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(10) FilterExecTransformer
Input [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Arguments: ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(11) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(12) ProjectExecTransformer
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Input [7]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]

(13) BatchScanExecTransformer
Output [2]: [s_suppkey#X, s_nationkey#X]
DataFilters: [isnotnull(s_suppkey#X), isnotnull(s_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(14) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(15) WholeStageCodegenTransformer (X)
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: false

(16) ColumnarBroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(17) BroadcastQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: 1

(18) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(19) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(20) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(21) ProjectExecTransformer
Output [7]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [8]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(22) BatchScanExecTransformer
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
DataFilters: [isnotnull(ps_suppkey#X), isnotnull(ps_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(23) FilterExecTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: (isnotnull(ps_suppkey#X) AND isnotnull(ps_partkey#X))

(24) WholeStageCodegenTransformer (X)
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: false

(25) ColumnarBroadcastExchange
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, bigint, false]),false), [plan_id=X]

(26) BroadcastQueryStage
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: 2

(27) InputAdapter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]

(28) InputIteratorTransformer
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]

(29) GlutenBroadcastHashJoinExecTransformer
Left keys [2]: [l_suppkey#X, l_partkey#X]
Right keys [2]: [ps_suppkey#X, ps_partkey#X]
Join condition: None

(30) ProjectExecTransformer
Output [6]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X]
Input [10]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_partkey#X, ps_suppkey#X, ps_supplycost#X]

(31) BatchScanExecTransformer
Output [2]: [o_orderkey#X, o_orderdate#X]
DataFilters: [isnotnull(o_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date>

(32) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderdate#X]
Arguments: isnotnull(o_orderkey#X)

(33) WholeStageCodegenTransformer (X)
Input [2]: [o_orderkey#X, o_orderdate#X]
Arguments: false

(34) ColumnarBroadcastExchange
Input [2]: [o_orderkey#X, o_orderdate#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(35) BroadcastQueryStage
Output [2]: [o_orderkey#X, o_orderdate#X]
Arguments: 3

(36) InputAdapter
Input [2]: [o_orderkey#X, o_orderdate#X]

(37) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_orderdate#X]

(38) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(39) ProjectExecTransformer
Output [6]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X]
Input [8]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderkey#X, o_orderdate#X]

(40) BatchScanExecTransformer
Output [2]: [n_nationkey#X, n_name#X]
DataFilters: [isnotnull(n_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(41) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: isnotnull(n_nationkey#X)

(42) WholeStageCodegenTransformer (X)
Input [2]: [n_nationkey#X, n_name#X]
Arguments: false

(43) ColumnarBroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(44) BroadcastQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: 4

(45) InputAdapter
Input [2]: [n_nationkey#X, n_name#X]

(46) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(47) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(48) ProjectExecTransformer
Output [3]: [n_name#X AS nation#X, year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) as decimal(27,4))) - promote_precision(cast(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(l_quantity#X)), DecimalType(25,4), true) as decimal(27,4)))), DecimalType(27,4), true) AS amount#X]
Input [8]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X, n_nationkey#X, n_name#X]

(49) RegularHashAggregateExecTransformer
Input [3]: [nation#X, o_year#X, amount#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [partial_sum(amount#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [nation#X, o_year#X, sum#X, isEmpty#X]

(50) RegularHashAggregateExecTransformer
Input [4]: [nation#X, o_year#X, sum#X, isEmpty#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [sum(amount#X)]
Aggregate Attributes [1]: [sum(amount#X)#X]
Results [3]: [nation#X, o_year#X, sum(amount#X)#X AS sum_profit#X]

(51) SortExecTransformer
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: [nation#X ASC NULLS FIRST, o_year#X DESC NULLS LAST], true, 0

(52) WholeStageCodegenTransformer (X)
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: false

(53) VeloxColumnarToRowExec
Input [3]: [nation#X, o_year#X, sum_profit#X]

(54) BatchScan
Output [2]: [p_partkey#X, p_name#X]
DataFilters: [isnotnull(p_name#X), Contains(p_name#X, green), isnotnull(p_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(p_name), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_name:string>

(55) Filter
Input [2]: [p_partkey#X, p_name#X]
Condition : ((isnotnull(p_name#X) AND Contains(p_name#X, green)) AND isnotnull(p_partkey#X))

(56) Project
Output [1]: [p_partkey#X]
Input [2]: [p_partkey#X, p_name#X]

(57) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(58) BatchScan
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
DataFilters: [isnotnull(l_partkey#X), isnotnull(l_suppkey#X), isnotnull(l_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>

(59) Filter
Input [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Condition : ((isnotnull(l_partkey#X) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(60) BroadcastHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: None

(61) Project
Output [6]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]
Input [7]: [p_partkey#X, l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X]

(62) BatchScan
Output [2]: [s_suppkey#X, s_nationkey#X]
DataFilters: [isnotnull(s_suppkey#X), isnotnull(s_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(63) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(64) BroadcastExchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(65) BroadcastHashJoin
Left keys [1]: [l_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(66) Project
Output [7]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X]
Input [8]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_suppkey#X, s_nationkey#X]

(67) BatchScan
Output [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
DataFilters: [isnotnull(ps_suppkey#X), isnotnull(ps_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>

(68) Filter
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Condition : (isnotnull(ps_suppkey#X) AND isnotnull(ps_partkey#X))

(69) BroadcastExchange
Input [3]: [ps_partkey#X, ps_suppkey#X, ps_supplycost#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, bigint, false]),false), [plan_id=X]

(70) BroadcastHashJoin
Left keys [2]: [l_suppkey#X, l_partkey#X]
Right keys [2]: [ps_suppkey#X, ps_partkey#X]
Join condition: None

(71) Project
Output [6]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X]
Input [10]: [l_orderkey#X, l_partkey#X, l_suppkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_partkey#X, ps_suppkey#X, ps_supplycost#X]

(72) BatchScan
Output [2]: [o_orderkey#X, o_orderdate#X]
DataFilters: [isnotnull(o_orderkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date>

(73) Filter
Input [2]: [o_orderkey#X, o_orderdate#X]
Condition : isnotnull(o_orderkey#X)

(74) BroadcastExchange
Input [2]: [o_orderkey#X, o_orderdate#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(75) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(76) Project
Output [6]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X]
Input [8]: [l_orderkey#X, l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderkey#X, o_orderdate#X]

(77) BatchScan
Output [2]: [n_nationkey#X, n_name#X]
DataFilters: [isnotnull(n_nationkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(78) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : isnotnull(n_nationkey#X)

(79) BroadcastExchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(80) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(81) Project
Output [3]: [n_name#X AS nation#X, year(o_orderdate#X) AS o_year#X, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2), true))), DecimalType(26,4), true) as decimal(27,4))) - promote_precision(cast(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(l_quantity#X)), DecimalType(25,4), true) as decimal(27,4)))), DecimalType(27,4), true) AS amount#X]
Input [8]: [l_quantity#X, l_extendedprice#X, l_discount#X, s_nationkey#X, ps_supplycost#X, o_orderdate#X, n_nationkey#X, n_name#X]

(82) HashAggregate
Input [3]: [nation#X, o_year#X, amount#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [partial_sum(amount#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [4]: [nation#X, o_year#X, sum#X, isEmpty#X]

(83) HashAggregate
Input [4]: [nation#X, o_year#X, sum#X, isEmpty#X]
Keys [2]: [nation#X, o_year#X]
Functions [1]: [sum(amount#X)]
Aggregate Attributes [1]: [sum(amount#X)#X]
Results [3]: [nation#X, o_year#X, sum(amount#X)#X AS sum_profit#X]

(84) Sort
Input [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: [nation#X ASC NULLS FIRST, o_year#X DESC NULLS LAST], true, 0

(85) AdaptiveSparkPlan
Output [3]: [nation#X, o_year#X, sum_profit#X]
Arguments: isFinalPlan=true