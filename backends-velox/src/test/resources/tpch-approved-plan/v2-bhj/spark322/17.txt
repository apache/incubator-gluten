== Physical Plan ==
AdaptiveSparkPlan (49)
+- == Final Plan ==
   VeloxColumnarToRowExec (30)
   +- ^ ProjectExecTransformer (28)
      +- ^ RegularHashAggregateExecTransformer (27)
         +- ^ RegularHashAggregateExecTransformer (26)
            +- ^ ProjectExecTransformer (25)
               +- ^ GlutenBroadcastHashJoinExecTransformer Inner (24)
                  :- ^ ProjectExecTransformer (12)
                  :  +- ^ GlutenBroadcastHashJoinExecTransformer Inner (11)
                  :     :- ^ FilterExecTransformer (2)
                  :     :  +- ^ BatchScanExecTransformer (1)
                  :     +- ^ InputIteratorTransformer (10)
                  :        +- ^ InputAdapter (9)
                  :           +- ^ BroadcastQueryStage (8)
                  :              +- ColumnarBroadcastExchange (7)
                  :                 +- ^ ProjectExecTransformer (5)
                  :                    +- ^ FilterExecTransformer (4)
                  :                       +- ^ BatchScanExecTransformer (3)
                  +- ^ InputIteratorTransformer (23)
                     +- ^ InputAdapter (22)
                        +- ^ BroadcastQueryStage (21)
                           +- ColumnarBroadcastExchange (20)
                              +- ^ FilterExecTransformer (18)
                                 +- ^ ProjectExecTransformer (17)
                                    +- ^ RegularHashAggregateExecTransformer (16)
                                       +- ^ RegularHashAggregateExecTransformer (15)
                                          +- ^ FilterExecTransformer (14)
                                             +- ^ BatchScanExecTransformer (13)
+- == Initial Plan ==
   HashAggregate (48)
   +- HashAggregate (47)
      +- Project (46)
         +- BroadcastHashJoin Inner BuildRight (45)
            :- Project (38)
            :  +- BroadcastHashJoin Inner BuildRight (37)
            :     :- Filter (32)
            :     :  +- BatchScan (31)
            :     +- BroadcastExchange (36)
            :        +- Project (35)
            :           +- Filter (34)
            :              +- BatchScan (33)
            +- BroadcastExchange (44)
               +- Filter (43)
                  +- HashAggregate (42)
                     +- HashAggregate (41)
                        +- Filter (40)
                           +- BatchScan (39)


(1) BatchScanExecTransformer
Output [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
DataFilters: [isnotnull(l_partkey#X), isnotnull(l_quantity#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_quantity)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2)>

(2) FilterExecTransformer
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: (isnotnull(l_partkey#X) AND isnotnull(l_quantity#X))

(3) BatchScanExecTransformer
Output [3]: [p_partkey#X, p_brand#X, p_container#X]
DataFilters: [isnotnull(p_brand#X), isnotnull(p_container#X), (p_brand#X = Brand#X), (p_container#X = MED BOX), isnotnull(p_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_container), EqualTo(p_brand,Brand#X), EqualTo(p_container,MED BOX), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_brand:string,p_container:string>

(4) FilterExecTransformer
Input [3]: [p_partkey#X, p_brand#X, p_container#X]
Arguments: ((((isnotnull(p_brand#X) AND isnotnull(p_container#X)) AND (p_brand#X = Brand#X)) AND (p_container#X = MED BOX)) AND isnotnull(p_partkey#X))

(5) ProjectExecTransformer
Output [1]: [p_partkey#X]
Input [3]: [p_partkey#X, p_brand#X, p_container#X]

(6) WholeStageCodegenTransformer (X)
Input [1]: [p_partkey#X]
Arguments: false

(7) ColumnarBroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(8) BroadcastQueryStage
Output [1]: [p_partkey#X]
Arguments: 0

(9) InputAdapter
Input [1]: [p_partkey#X]

(10) InputIteratorTransformer
Input [1]: [p_partkey#X]

(11) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(12) ProjectExecTransformer
Output [3]: [l_quantity#X, l_extendedprice#X, p_partkey#X]
Input [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, p_partkey#X]

(13) BatchScanExecTransformer
Output [2]: [l_partkey#X, l_quantity#X]
DataFilters: [isnotnull(l_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2)>

(14) FilterExecTransformer
Input [2]: [l_partkey#X, l_quantity#X]
Arguments: isnotnull(l_partkey#X)

(15) RegularHashAggregateExecTransformer
Input [2]: [l_partkey#X, l_quantity#X]
Keys [1]: [l_partkey#X]
Functions [1]: [partial_avg(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [3]: [l_partkey#X, sum#X, count#X]

(16) RegularHashAggregateExecTransformer
Input [3]: [l_partkey#X, sum#X, count#X]
Keys [1]: [l_partkey#X]
Functions [1]: [avg(l_quantity#X)]
Aggregate Attributes [1]: [avg(l_quantity#X)#X]
Results [2]: [l_partkey#X, avg(l_quantity#X)#X]

(17) ProjectExecTransformer
Output [2]: [CheckOverflow((0.200000 * promote_precision(avg(l_quantity#X)#X)), DecimalType(18,7), true) AS (0.2 * avg(l_quantity))#X, l_partkey#X]
Input [2]: [l_partkey#X, avg(l_quantity#X)#X]

(18) FilterExecTransformer
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Arguments: isnotnull((0.2 * avg(l_quantity))#X)

(19) WholeStageCodegenTransformer (X)
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Arguments: false

(20) ColumnarBroadcastExchange
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=X]

(21) BroadcastQueryStage
Output [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Arguments: 1

(22) InputAdapter
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]

(23) InputIteratorTransformer
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]

(24) GlutenBroadcastHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: (cast(l_quantity#X as decimal(18,7)) < (0.2 * avg(l_quantity))#X)

(25) ProjectExecTransformer
Output [1]: [l_extendedprice#X]
Input [5]: [l_quantity#X, l_extendedprice#X, p_partkey#X, (0.2 * avg(l_quantity))#X, l_partkey#X]

(26) RegularHashAggregateExecTransformer
Input [1]: [l_extendedprice#X]
Keys: []
Functions [1]: [partial_sum(l_extendedprice#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(27) RegularHashAggregateExecTransformer
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum(l_extendedprice#X)]
Aggregate Attributes [1]: [sum(l_extendedprice#X)#X]
Results [1]: [sum(l_extendedprice#X)#X]

(28) ProjectExecTransformer
Output [1]: [CheckOverflow((promote_precision(sum(l_extendedprice#X)#X) / 7.00), DecimalType(27,6), true) AS avg_yearly#X]
Input [1]: [sum(l_extendedprice#X)#X]

(29) WholeStageCodegenTransformer (X)
Input [1]: [avg_yearly#X]
Arguments: false

(30) VeloxColumnarToRowExec
Input [1]: [avg_yearly#X]

(31) BatchScan
Output [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
DataFilters: [isnotnull(l_partkey#X), isnotnull(l_quantity#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_quantity)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2)>

(32) Filter
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Condition : (isnotnull(l_partkey#X) AND isnotnull(l_quantity#X))

(33) BatchScan
Output [3]: [p_partkey#X, p_brand#X, p_container#X]
DataFilters: [isnotnull(p_brand#X), isnotnull(p_container#X), (p_brand#X = Brand#X), (p_container#X = MED BOX), isnotnull(p_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_container), EqualTo(p_brand,Brand#X), EqualTo(p_container,MED BOX), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_brand:string,p_container:string>

(34) Filter
Input [3]: [p_partkey#X, p_brand#X, p_container#X]
Condition : ((((isnotnull(p_brand#X) AND isnotnull(p_container#X)) AND (p_brand#X = Brand#X)) AND (p_container#X = MED BOX)) AND isnotnull(p_partkey#X))

(35) Project
Output [1]: [p_partkey#X]
Input [3]: [p_partkey#X, p_brand#X, p_container#X]

(36) BroadcastExchange
Input [1]: [p_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(37) BroadcastHashJoin
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(38) Project
Output [3]: [l_quantity#X, l_extendedprice#X, p_partkey#X]
Input [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, p_partkey#X]

(39) BatchScan
Output [2]: [l_partkey#X, l_quantity#X]
DataFilters: [isnotnull(l_partkey#X)]
Format: parquet
Location: InMemoryFileIndex(1 paths)[*]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2)>

(40) Filter
Input [2]: [l_partkey#X, l_quantity#X]
Condition : isnotnull(l_partkey#X)

(41) HashAggregate
Input [2]: [l_partkey#X, l_quantity#X]
Keys [1]: [l_partkey#X]
Functions [1]: [partial_avg(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [3]: [l_partkey#X, sum#X, count#X]

(42) HashAggregate
Input [3]: [l_partkey#X, sum#X, count#X]
Keys [1]: [l_partkey#X]
Functions [1]: [avg(l_quantity#X)]
Aggregate Attributes [1]: [avg(l_quantity#X)#X]
Results [2]: [CheckOverflow((0.200000 * promote_precision(avg(l_quantity#X)#X)), DecimalType(18,7), true) AS (0.2 * avg(l_quantity))#X, l_partkey#X]

(43) Filter
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Condition : isnotnull((0.2 * avg(l_quantity))#X)

(44) BroadcastExchange
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=X]

(45) BroadcastHashJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: (cast(l_quantity#X as decimal(18,7)) < (0.2 * avg(l_quantity))#X)

(46) Project
Output [1]: [l_extendedprice#X]
Input [5]: [l_quantity#X, l_extendedprice#X, p_partkey#X, (0.2 * avg(l_quantity))#X, l_partkey#X]

(47) HashAggregate
Input [1]: [l_extendedprice#X]
Keys: []
Functions [1]: [partial_sum(l_extendedprice#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(48) HashAggregate
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum(l_extendedprice#X)]
Aggregate Attributes [1]: [sum(l_extendedprice#X)#X]
Results [1]: [CheckOverflow((promote_precision(sum(l_extendedprice#X)#X) / 7.00), DecimalType(27,6), true) AS avg_yearly#X]

(49) AdaptiveSparkPlan
Output [1]: [avg_yearly#X]
Arguments: isFinalPlan=true